<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>云服务器相关</title>
      <link href="/2024/07/13/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/07/13/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="更换yum源"><a href="#更换yum源" class="headerlink" title="更换yum源"></a>更换yum源</h2><p>购买好云服务器后，第一步先将yum源更换成阿里云的源，这样安装依赖的时候速度会快很多。</p><p>进入到指定目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br></pre></td></tr></table></figure><p>安装<code>wget</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget -y</span><br></pre></td></tr></table></figure><p>使用<code>wget</code>下载阿里镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>清理旧缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p>生成新缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><p>更新yum</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>安装docker所需要的软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>使用国内镜像源可以加速docker的下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>安装 Docker Engine</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>更换docker的源（默认的源已经被墙）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>插入内容</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;:[</span><br><span class="line">    &quot;https://j6o4qczl.mirror.aliyuncs.com&quot;,</span><br><span class="line">        &quot;https://9cpn8tt6.mirror.aliyuncs.com&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 重新加载 systemd 的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>重启docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>设置开机自启docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>查看docker是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="安装1panel"><a href="#安装1panel" class="headerlink" title="安装1panel"></a>安装1panel</h2><p>这里使用<code>Centos 7.9.4</code>作为参考</p><p>安装1panel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sh quick_start.sh</span><br></pre></td></tr></table></figure><p>安装成功后会有如下图示</p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202407131705010.png" alt="image-20240713170536960" style="zoom:67%" /><p>要记下1Panel的端口号，去到云服务器的控制台，在安全组那边开放这个端口</p><p>设置面板用户账号：admin，密码使用默认的就好</p><p>如果完成了安全组的开放后，即可通过<code>外网地址去访问</code>，http:&#x2F;&#x2F;公网:端口&#x2F;安全入口</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202407131708165.png" alt="image-20240713170827139"></p>]]></content>
      
      
      <categories>
          
          <category> 云服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具箱</title>
      <link href="/2024/06/14/%E8%B5%84%E6%BA%90%E9%9B%86%E5%90%88/"/>
      <url>/2024/06/14/%E8%B5%84%E6%BA%90%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p> <a href="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202406141648957.ttf">YaHei Consolas Hybrid</a></p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202406141654574.png" alt="image-20240614165400531" style="zoom: 50%;" /><h2 id="资源网站"><a href="#资源网站" class="headerlink" title="资源网站"></a>资源网站</h2><p><a href="https://link.juejin.cn/?target=https://github.com/hepengwei/visualization-collection">前端视觉效果集合</a></p><p><a href="https://gradient.shapefactory.co/">渐变神器Gradient</a></p><p><a href="https://glassgenerator.netlify.app/">CSS 玻璃风格神器</a></p><p><a href="https://bgjar.com/">背景生成器</a></p><p><a href="https://link.juejin.cn/?target=https://tinypng.com/">在线图片压缩</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenId与UnionId的区别</title>
      <link href="/2024/05/30/OpenId%E4%B8%8EUnionId/"/>
      <url>/2024/05/30/OpenId%E4%B8%8EUnionId/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenId"><a href="#OpenId" class="headerlink" title="OpenId"></a>OpenId</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>OpenId是一个用户对于<strong>一个小程序&#x2F;公众号</strong>的唯一标识，开发者通过这个标识来识别出用户信息。</p><p>在微信小程序中，openid是唯一标识一个用户的字符串，是用户在当前小程序中的身份证明。</p><ul><li>同一个人使用不同的小程序，openid是不同的。</li><li>获取openid的操作，不需要用户操作和授权。</li></ul><p>以上在微信公众号中也是同样道理。</p><h2 id="openId作用"><a href="#openId作用" class="headerlink" title="openId作用"></a>openId作用</h2><ul><li><p>用户身份识别</p><p>通过openId识别用户身份，提供个性化服务，例如，用户购买商品需要填写收货地址，通过openId就可以将用户的收获地址保存在服务器上，方便下一次购物时直接调取。</p></li><li><p>数据统计</p><p>对用户的行为进行统计分析，例如，用户浏览记录、购买记录、搜索记录等</p></li><li><p>安全验证</p><p>openId被当作唯一的用户身份标识，对一些需要安全验证操作非常有用，例如，对消息进行加密解密，对数据进行签名等。</p></li></ul><h2 id="获取openId"><a href="#获取openId" class="headerlink" title="获取openId"></a>获取openId</h2><p>小程序中获取openid的方式有两种：</p><ol><li><p>调用<strong>wx.login</strong>获取临时登录凭证code，通过code向服务器换取openId。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span>) &#123;</span><br><span class="line">      wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://api.weixin.qq.com/sns/jscode2session&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">appid</span>: <span class="string">&#x27;your_appid&#x27;</span>,</span><br><span class="line">          <span class="attr">secret</span>: <span class="string">&#x27;your_secret&#x27;</span>,</span><br><span class="line">          <span class="attr">js_code</span>: res.<span class="property">code</span>,</span><br><span class="line">          <span class="attr">grant_type</span>: <span class="string">&#x27;authorization_code&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">openid</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;登录失败！&#x27;</span> + res.<span class="property">errMsg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>通过登录授权的方式获取用户信息，其中包括openId。</p></li></ol><h1 id="UnionId"><a href="#UnionId" class="headerlink" title="UnionId"></a>UnionId</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>UnionId是一个用户对于<strong>同主体微信小程序&#x2F;公众号&#x2F;APP</strong>的标识，开发者可以通过unionId实现多个小程序、公众号、app之间的数据互通。</p><ul><li>如果开发者拥有多个移动应用、网站应用、公众号、小程序，可以用unionId来区分用户的唯一性，只要是同个主体下的产品，用户的unionId都是唯一、相同的。</li><li>简而言之，unionId是用来说明多个应用下用户身份一致性的问题。</li></ul><h2 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h2><ol><li>微信开放平台账号已完成开发者资质认证。</li><li>微信开放平台绑定小程序。</li></ol><h2 id="获取unionId"><a href="#获取unionId" class="headerlink" title="获取unionId"></a>获取unionId</h2><ol><li>调用<strong>wx.getUserInfo</strong>，从解密数据中获取unionId，本接口需要用户授权，开发者要考虑用户拒绝授权的情况。</li><li>如果相同主体下的不同的公众号，且用户已关注该公众号，开发者可以通过<strong>wx.login</strong>，<strong>code2Session</strong>获取到该用户的unionId，不需要用户再次授权。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 零散 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crypto-js</title>
      <link href="/2024/05/30/crypto/"/>
      <url>/2024/05/30/crypto/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install crypto-js</span><br></pre></td></tr></table></figure><h1 id="普通文本加密"><a href="#普通文本加密" class="headerlink" title="普通文本加密"></a>普通文本加密</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置密钥key</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="string">&#x27;berniezhong888666&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密文本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encryptText</span>(<span class="params">text, key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(text, key);</span><br><span class="line">  <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密文本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decryptText</span>(<span class="params">encryptedText, key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> decrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encryptedText, key);</span><br><span class="line">  <span class="keyword">return</span> decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encryptData = <span class="title function_">encryptText</span>(<span class="string">&#x27;我是加密文本&#x27;</span>,<span class="variable constant_">SECRET_KEY</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加密的&#x27;</span>, encryptData); </span><br><span class="line"><span class="comment">// 随机生成的 U2FsdGVkX19NSjS12wTYUsGhqMtnnxcyzY34bUh2jjwXX3H3GnC7TD6Zlsbi1pdC</span></span><br><span class="line"><span class="keyword">const</span> decryptData = <span class="title function_">decryptText</span>(encryptData,<span class="variable constant_">SECRET_KEY</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解密的&#x27;</span>, decryptData);</span><br><span class="line"><span class="comment">// &quot;我是加密文本&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html小效果集合</title>
      <link href="/2024/05/30/html%E5%B0%8F%E6%A1%88%E4%BE%8B/"/>
      <url>/2024/05/30/html%E5%B0%8F%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><details class="toggle" ><summary class="toggle-button" style="">列表进入动画</summary><div class="toggle-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>段落列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.pic</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">97%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#cae5e8</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.flex</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.card</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">65px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">65px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#cae5e8</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.square</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#cae5e8</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">79%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">95%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#99d1d3</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">65%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#cae5e8</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="keyword">@keyframes</span> one-in &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding-left</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding-left</span>: <span class="number">0%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;more&quot;</span> <span class="attr">v-bind:css</span>=<span class="string">&quot;false&quot;</span> <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span> <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;show3&quot;</span> <span class="attr">v-bind:data-index</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">show1</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">show2</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">show3</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">beforeEnter</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            el.<span class="property">style</span>.<span class="property">opacity</span> = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">enter</span>(<span class="params">el, done</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(el.dataset.index)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> delay = el.<span class="property">dataset</span>.<span class="property">index</span> * <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              el.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;opacity 0.4s &#x27;</span></span></span><br><span class="line"><span class="language-javascript">              el.<span class="property">style</span>.<span class="property">opacity</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">              el.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;one-in 0.4s infinite&#x27;</span></span></span><br><span class="line"><span class="language-javascript">              el.<span class="property">style</span>[<span class="string">&#x27;animation-iteration-count&#x27;</span>] = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;, delay)</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show1</span> = !<span class="variable language_">this</span>.<span class="property">show1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show2</span> = !<span class="variable language_">this</span>.<span class="property">show2</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show3</span> = !<span class="variable language_">this</span>.<span class="property">show3</span></span></span><br><span class="line"><span class="language-javascript">          &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></details><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><details class="toggle" ><summary class="toggle-button" style="">6位验证码输入</summary><div class="toggle-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#428675</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrpper</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrpper</span> <span class="selector-class">.ipt-hidden</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#10325e</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#10325e</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: flicker <span class="number">0.4s</span> linear infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 光标动画 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> flicker &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrpper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt-hidden&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 操作的元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ipt-hidden&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 正则表达式：6位 0-9</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> reg = <span class="regexp">/^[0-9]&#123;0,6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 临时存储的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> tempValue = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ipt.<span class="title function_">addEventListener</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        ipt.<span class="title function_">setSelectionRange</span>(ipt.<span class="property">value</span>.<span class="property">length</span>, ipt.<span class="property">value</span>.<span class="property">length</span> + <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> val = ipt.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!val) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 未输入时，默认第一个格子激活状态</span></span></span><br><span class="line"><span class="language-javascript">          items[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 判断哪个格子需要激活状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (val.<span class="property">length</span> &lt; items.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          items[val.<span class="property">length</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 最后一格</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (val.<span class="property">length</span> === items.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          items[val.<span class="property">length</span> - <span class="number">1</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 失焦事件</span></span></span><br><span class="line"><span class="language-javascript">      ipt.<span class="title function_">addEventListener</span>(<span class="string">&#x27;blur&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          item.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ipt.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 输入事件</span></span></span><br><span class="line"><span class="language-javascript">      ipt.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 先移除每个格子的激活状态</span></span></span><br><span class="line"><span class="language-javascript">        items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          item.<span class="property">textContent</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          item.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取输入的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> val = el.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 正则校验是否是0-9的数字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> match = reg.<span class="title function_">test</span>(val)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 假如匹配上了,临时变量就取输入的值得，若匹配不上，就设置input的值为当前临时变量tempValue的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (match) &#123;</span></span><br><span class="line"><span class="language-javascript">          tempValue = val</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          ipt.<span class="property">value</span> = tempValue</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将最终的输入的值拆分成数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> arr = ipt.<span class="property">value</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 没输入的时候默认第一个格子激活，或者说输入了删除全部后，激活第一个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!arr.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          items[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 循环设置每一格的文本、样式</span></span></span><br><span class="line"><span class="language-javascript">        arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          items[index].<span class="property">textContent</span> = item</span></span><br><span class="line"><span class="language-javascript">          items[index].<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (items[index + <span class="number">1</span>]) &#123;</span></span><br><span class="line"><span class="language-javascript">            items[index + <span class="number">1</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (index === items.<span class="property">length</span> - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            items[index].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">锚点平滑效果</summary><div class="toggle-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置滚动时平滑效果 */</span></span></span><br><span class="line"><span class="language-css">        scroll-behavior: smooth;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#428675</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.navbar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.navbar</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#4e7ca1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#fb8b05</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#2f90b9</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#603d30</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#b6a476</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#621d34</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#a&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#b&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#c&quot;</span>&gt;</span>c<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#d&quot;</span>&gt;</span>d<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">文字涂抹效果</summary><div class="toggle-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#428675</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="string">&#x27;hello berniezhong&#x27;</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#eb507e</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right</span>: <span class="number">5px</span> solid <span class="number">#eb507e</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: animate <span class="number">2s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">#eb507e</span>);</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 动画来回轮流 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation-direction</span>: alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> animate &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span>hello berniezhong<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">title</summary><div class="toggle-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 固定每张图片的宽度</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> imgWidth = <span class="number">120</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 假如图片元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">createImgs</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> src = <span class="string">`https://picsum.photos/200/200?<span class="subst">$&#123;index&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          img.<span class="property">src</span> = src</span></span><br><span class="line"><span class="language-javascript">          img.<span class="property">width</span> = imgWidth</span></span><br><span class="line"><span class="language-javascript">          img.<span class="property">onload</span> = setPosition</span></span><br><span class="line"><span class="language-javascript">          container.<span class="title function_">appendChild</span>(img)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">createImgs</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 计算一共多少列，以及每一列之间的间隙</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">calc</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 容器的宽度</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> containerWidth = container.<span class="property">clientWidth</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 计算列的数量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> columns = <span class="title class_">Math</span>.<span class="title function_">floor</span>(containerWidth / imgWidth)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 间隙的数量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> spaceNumber = columns + <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 计算剩余空间</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> leftSpace = containerWidth - columns * imgWidth</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将剩余空间平均分给间隙 得出每个间隙的宽度</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> space = leftSpace / spaceNumber</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          space,</span></span><br><span class="line"><span class="language-javascript">          columns,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置每张图片的位置</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">setPosition</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取列数和间隙</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> info = <span class="title function_">calc</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 该数组长度为列数，每一项表示该列的下一个图片的纵坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> nextTop = <span class="keyword">new</span> <span class="title class_">Array</span>(info.<span class="property">columns</span>)</span></span><br><span class="line"><span class="language-javascript">        nextTop.<span class="title function_">fill</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// container下的图片数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> imgs = container.<span class="property">children</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Array</span>.<span class="title function_">from</span>(imgs).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 每一个图片项</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> img = container.<span class="property">children</span>[index]</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 找到nextTop中最小值作为当前图片的纵坐标</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> minTop = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, nextTop)</span></span><br><span class="line"><span class="language-javascript">          img.<span class="property">style</span>.<span class="property">top</span> = minTop + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 重新设置数组这一项的下一个top值</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> i = nextTop.<span class="title function_">indexOf</span>(minTop)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i&#x27;</span>, i)</span></span><br><span class="line"><span class="language-javascript">          nextTop[i] = nextTop[i] + img.<span class="property">height</span> + info.<span class="property">space</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 计算横坐标</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> left = (i + <span class="number">1</span>) * info.<span class="property">space</span> + i * imgWidth</span></span><br><span class="line"><span class="language-javascript">          img.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 得到nextTop中的最大值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, nextTop)</span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">style</span>.<span class="property">height</span> = max + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// window.onload = setPosition</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (timer) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        timer = <span class="built_in">setTimeout</span>(setPosition, <span class="number">300</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">input校验左右抖动</summary><div class="toggle-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#428675</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-item</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f7cfba</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f7cfba</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-indent</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-item</span> <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#2f2f2f</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 校验失败的时候 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-item</span> <span class="selector-tag">input</span><span class="selector-pseudo">:invalid</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: shake <span class="number">0.2s</span> ease-in-out <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-item</span> <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-item</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#f7cfba</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 过度效果 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> shake &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">25%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">75%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>输入框失败时候左右抖效果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>校验规则：只能输入数字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;[0-9]*&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">canvas电子签名</summary><div class="toggle-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;cancel()&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;save()&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">with</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lineWidth</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">strokeStyle</span>: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lineCap</span>: <span class="string">&#x27;round&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lineJoin</span>: <span class="string">&#x27;round&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">width</span> = config.<span class="property">with</span></span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">height</span> = config.<span class="property">height</span></span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">style</span>.<span class="property">border</span> = <span class="string">`1px solid #000`</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">`transparent`</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillRect</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="number">0</span>, <span class="comment">// x 轴起始绘制位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="number">0</span>, <span class="comment">// y 轴起始绘制位置</span></span></span><br><span class="line"><span class="language-javascript">        config.<span class="property">width</span>, <span class="comment">// 宽度</span></span></span><br><span class="line"><span class="language-javascript">        config.<span class="property">height</span>, <span class="comment">// 高度</span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> client = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">offsetX</span>: <span class="number">0</span>, <span class="comment">// 偏移量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">offsetY</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">endX</span>: <span class="number">0</span>, <span class="comment">// 坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">endY</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> mobileStatus = <span class="regexp">/Mobile|Android|iPhone/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(mobileStatus ? <span class="string">&#x27;touchstart&#x27;</span> : <span class="string">&#x27;mousedown&#x27;</span>, init)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; offsetX, offsetY, pageX, pageY &#125; = mobileStatus ? event.<span class="property">changedTouches</span>[<span class="number">0</span>] : event</span></span><br><span class="line"><span class="language-javascript">        client.<span class="property">endX</span> = pageX</span></span><br><span class="line"><span class="language-javascript">        client.<span class="property">endY</span> = pageY</span></span><br><span class="line"><span class="language-javascript">        client.<span class="property">offsetX</span> = offsetX</span></span><br><span class="line"><span class="language-javascript">        client.<span class="property">offsetY</span> = offsetY</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">beginPath</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">lineWidth</span> = config.<span class="property">lineWidth</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">strokeStyle</span> = config.<span class="property">strokeStyle</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">lineCap</span> = config.<span class="property">lineCap</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">lineJoin</span> = config.<span class="property">lineJoin</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">strokeStyle</span> = config.<span class="property">strokeStyle</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">moveTo</span>(client.<span class="property">endX</span>, client.<span class="property">endY</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(mobileStatus ? <span class="string">&#x27;touchmove&#x27;</span> : <span class="string">&#x27;mousemove&#x27;</span>, draw)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; pageX, pageY &#125; = mobileStatus ? event.<span class="property">changedTouches</span>[<span class="number">0</span>] : event</span></span><br><span class="line"><span class="language-javascript">        client.<span class="property">endX</span> = pageX</span></span><br><span class="line"><span class="language-javascript">        client.<span class="property">endY</span> = pageY</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(pageX, pageY)</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">stroke</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">cloaseDraw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">closePath</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, draw)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(mobileStatus ? <span class="string">&#x27;touchend&#x27;</span> : <span class="string">&#x27;mouseup&#x27;</span>, cloaseDraw)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 取消</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, config.<span class="property">with</span>, config.<span class="property">height</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">save</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        canvas.<span class="title function_">toBlob</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 获取当前时间并转成字符串，用来当做文件名</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> date = <span class="title class_">Date</span>.<span class="title function_">now</span>().<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 创建一个 a 标签</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 设置 a 标签的下载文件名</span></span></span><br><span class="line"><span class="language-javascript">          a.<span class="property">download</span> = <span class="string">`<span class="subst">$&#123;date&#125;</span>.png`</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 设置 a 标签的跳转路径为 文件流地址</span></span></span><br><span class="line"><span class="language-javascript">          a.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 手动触发 a 标签的点击事件</span></span></span><br><span class="line"><span class="language-javascript">          a.<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 移除 a 标签</span></span></span><br><span class="line"><span class="language-javascript">          a.<span class="title function_">remove</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></details>]]></content>
      
      
      <categories>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid栅格布局</title>
      <link href="/2024/04/09/grid%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
      <url>/2024/04/09/grid%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="栅格布局初体验"><a href="#栅格布局初体验" class="headerlink" title="栅格布局初体验"></a>栅格布局初体验</h2>]]></content>
      
      
      <categories>
          
          <category> grid </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron</title>
      <link href="/2024/03/25/Electron/"/>
      <url>/2024/03/25/Electron/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h2><p>将Electron设置国内镜像后，可以加快文件的下载速度，需要设置 electron_mirror 与 electron_builder_binaries_mirror 镜像，下面是 electron的国内镜像设置。</p><h3 id="pnpm设置"><a href="#pnpm设置" class="headerlink" title="pnpm设置"></a>pnpm设置</h3><p><strong>electron_mirror</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pnpm config <span class="built_in">set</span> electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class="line">或</span><br><span class="line">pnpm config <span class="built_in">set</span> electron_mirror=https://registry.npmmirror.com/-/binary/electron/</span><br><span class="line">或</span><br><span class="line">pnpm config <span class="built_in">set</span> electron_mirror https://npmmirror.com/mirrors/electron/</span><br><span class="line">或</span><br><span class="line">pnpm config <span class="built_in">set</span> electron_mirror https://mirrors.huaweicloud.com/electron/</span><br></pre></td></tr></table></figure><p><strong>electron_builder_binaries_mirror</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pnpm config <span class="built_in">set</span> electron_builder_binaries_mirror=https://npm.taobao.org/mirrors/electron-builder-binaries/</span><br><span class="line">或</span><br><span class="line">pnpm config <span class="built_in">set</span> electron_builder_binaries_mirror=https://mirrors.huaweicloud.com/electron-builder-binaries/</span><br><span class="line">或</span><br><span class="line">pnpm config <span class="built_in">set</span> electron_builder_binaries_mirror=https://registry.npmmirror.com/-/binary/electron-builder-binaries/</span><br></pre></td></tr></table></figure><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>创建一个简单的桌面应用，体验下electron的工作流程。</p><p>这里要区分一个概念，项目中的node.js与你电脑中的node.js版本无关，</p><p>因为electron在打包的时候，会将<code>浏览器环境</code>以及<code>Node运行环境</code>一起打包到二进制文件中。</p><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>使用pnpm初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><p>此时会生成package.json文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试electron流程&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bernie&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="安装electron"><a href="#安装electron" class="headerlink" title="安装electron"></a>安装electron</h3><div class="note info no-icon flat"><p>-D 是 pnpm add 命令中的一个选项，它表示你希望将 electron 包作为开发依赖安装。</p><p>意思是electron包将会被添加到devDependencies中，而不是dependencies中。</p><p>开发依赖通常是指在开发过程中需要用到的工具、库或框架，但在生产环境中并不需要。</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add -D electron</span><br></pre></td></tr></table></figure><p>修改package.json文件中的内容，如下：</p><ul><li>name 作为app.name的默认值</li><li>productName 字段会做为app.name的默认值，优先级高于name</li><li>main 主进程的入口文件</li><li>dev 作为项目的启动命令</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-demo&quot;</span></span><br><span class="line">  <span class="attr">&quot;productName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bernie-electron-demo&quot;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^22.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="模版文件"><a href="#模版文件" class="headerlink" title="模版文件"></a>模版文件</h3><p>类似于vue这种单页面应用，electron也有一个渲染的html模版文件。</p><p>它是渲染进程的一个入口文件。</p><h3 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h3><p>根目录下创建main.js主进程文件，用于创建窗口并加载模版文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化窗口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initWindow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 定义应用的窗口，这里不需要加像素单位</span></span><br><span class="line">  <span class="keyword">const</span> windowInstance = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    width：<span class="number">300</span>，</span><br><span class="line">    <span class="attr">height</span>: <span class="number">300</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 加载模版文件，因不同系统间的路径不一致，这里使用__dirname</span></span><br><span class="line">  windowInstance.<span class="title function_">loadFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当应用准备好后创建窗口</span></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">initWindow</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 窗口关闭时，退出程序（要做平台兼容性,win是直接关闭，mac是后台运行）</span></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 不是苹果系统,则退出程序</span></span><br><span class="line">      app.<span class="title function_">quit</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 窗口被激活时，重新定义窗口</span></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">initWindow</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听IPC通信,调用主进程事件</span></span><br><span class="line">  ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;saveFile&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;save file&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">process.platform判断运行的环境</summary><div class="toggle-content"><ul><li>darwin 苹果系统</li><li>win32 window系统</li><li>linux Linux系统</li></ul></div></details><h2 id="基于开发"><a href="#基于开发" class="headerlink" title="基于开发"></a>基于开发</h2><h4 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h4><p>在开发过程中，如果文件一旦被修改，希望立马重新编译项目，而不是重新启动，依赖于nodemon模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add -g nodemon</span><br></pre></td></tr></table></figure><p>修改package.json文件内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --exec electron .&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>根目录创建nodemon.json文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;colours&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verbose&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;restartable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*.*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ext&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html,js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a>安全策略</h4><p>因为 Electron 项目可以执行javascript代码，也可以访问用户电脑的文件系统，所以访问任何不受信任的内容都可能带来安全隐患。</p><p>若没有配置安装策略，electron会在控制台抛出警告：</p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202403252223756.png" alt="image-20240325222311694" style="zoom: 50%;" /><p>解决办法：</p><p>在模版文件的meta区域，添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常用的应用配置"><a href="#常用的应用配置" class="headerlink" title="常用的应用配置"></a>常用的应用配置</h4><p>以下常用配置用于开发阶段，更多请查阅文档（<a href="https://electronjs.p2hp.com/docs/latest/api/browser-window%EF%BC%89%E3%80%82">https://electronjs.p2hp.com/docs/latest/api/browser-window）。</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1400</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">alwaysOnTop</span>: <span class="literal">true</span>, <span class="comment">// 窗口置顶</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mainWindow.<span class="title function_">setAspectRatio</span>(<span class="number">1</span>) <span class="comment">// 设置拖放比例1：1</span></span><br><span class="line">mainWindow.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>() <span class="comment">// 打开应用调试工具（和浏览器的F12一样的）</span></span><br></pre></td></tr></table></figure><h2 id="多进程模型"><a href="#多进程模型" class="headerlink" title="多进程模型"></a>多进程模型</h2><p>electron将使用两种类型的进程：<strong>主进程</strong> 和 <strong>渲染进程</strong>。</p><h3 id="主进程-1"><a href="#主进程-1" class="headerlink" title="主进程"></a>主进程</h3><ul><li>调用原生Node.js的API，来实现系统级别的操作（文件的操作等）。</li><li>通过原生菜单改变渲染进程页面内容。</li><li>IPC通信使用 <strong>ipcMain</strong> 和 <strong>ipcRenderer</strong>两个模块传递消息。</li></ul><h3 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h3><p>通过BrowserWindow打开的窗口生成一个单独的渲染器进程。</p><h3 id="预加载脚本"><a href="#预加载脚本" class="headerlink" title="预加载脚本"></a>预加载脚本</h3><p>主进程和渲染进程之间的通信，是通过<strong>preload.js预加载</strong>来实现的，简单来说，如果想要用网页直接操作系统文件，网页直接调用node模块，就要使用到这个预加载脚本。</p><p>一般预加载脚本都是和main.js主进程入口文件同级，命名为preload.js，我们在定义窗口的时候，就可以一并加载这个脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">alwaysOnTop</span>: <span class="literal">true</span>, <span class="comment">// 窗口置顶</span></span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">    <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>) <span class="comment">// 预加载脚本</span></span><br><span class="line">    <span class="comment">// nodeIntegration: true // 开启Node集成</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202403252253495.png" alt="image-20240325225327466" style="zoom: 33%;" /><p>前面提到进程之间的通信，通过预加载文件来实现，它是主进程与渲染进程的桥梁。</p><details class="toggle" ><summary class="toggle-button" style="">预加载脚本与主进程通信</summary><div class="toggle-content"><p>预加载脚本使用主进程的事件，使用<strong>ipcMain</strong>模块来监听一个事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BrowserWindow</span>, app, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;saveFile&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主进程内的saveFile事件被调用&#x27;</span>) <span class="comment">// 这里可以使用node模块来操作系统</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><p>这里要注意，因为主进程文件运行在node环境，所以这里的打印，是在终端输出的。</p></div><p>在与加载脚本中，使用<strong>ipcRenderer</strong>向主进程发射一个事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preload.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;saveFile&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202403252259980.png" alt="image-20240325225959943" style="zoom: 50%;" /><p>此时在终端控制台可以看到主进程的saveFile事件被调用了。</p></div></details><details class="toggle" ><summary class="toggle-button" style="">渲染进程通过预加载脚本调用主进程事件</summary><div class="toggle-content"></div></details>]]></content>
      
      
      <categories>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp遇到的问题</title>
      <link href="/2024/02/03/uniapp%E5%B8%B8%E7%94%A8/"/>
      <url>/2024/02/03/uniapp%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h1><h2 id="判断是否安装某个应用"><a href="#判断是否安装某个应用" class="headerlink" title="判断是否安装某个应用"></a>判断是否安装某个应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (plus.<span class="property">runtime</span>.<span class="title function_">isApplicationExist</span>(&#123; <span class="attr">pname</span>: <span class="string">&#x27;com.eg.android.AlipayGphone&#x27;</span>, <span class="attr">action</span>: <span class="string">&#x27;alipays://&#x27;</span> &#125;)) &#123;</span><br><span class="line">  <span class="comment">//安装了支付宝</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//未安装支付宝</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考值</span></span><br><span class="line"><span class="comment">// 微信：    com.tencent.mm                 weixin://</span></span><br><span class="line"><span class="comment">// QQ：     com.tencent.mobileqq           mqq://</span></span><br><span class="line"><span class="comment">// 微博：    com.sina.weibo                 sinaweibo://</span></span><br><span class="line"><span class="comment">// 淘宝：    com.taobao.taobao              taobao://</span></span><br><span class="line"><span class="comment">// 支付宝：  com.eg.android.AlipayGphone    alipay://</span></span><br><span class="line"><span class="comment">// 京东：    com.jingdong.app.mall          openApp.jdMobile://</span></span><br><span class="line"><span class="comment">// 优酷：    com.youku.phone                youku://</span></span><br><span class="line"><span class="comment">// 高德地图： com.autonavi.minimap          iosamap://</span></span><br><span class="line"><span class="comment">// 百度地图： com.baidu.BaiduMap            baidumap://</span></span><br></pre></td></tr></table></figure><h2 id="支付宝当面付"><a href="#支付宝当面付" class="headerlink" title="支付宝当面付"></a>支付宝当面付</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plus.<span class="property">runtime</span>.<span class="title function_">openURL</span>(<span class="string">`alipays://platformapi/startapp?saId=10000007&amp;qrcode=`</span> + <span class="built_in">decodeURI</span>(res.<span class="property">data</span>.<span class="property">jsConfig</span>.<span class="property">qrCode</span>))</span><br></pre></td></tr></table></figure><h2 id="app拉起微信小程序"><a href="#app拉起微信小程序" class="headerlink" title="app拉起微信小程序"></a>app拉起微信小程序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">that.<span class="property">sweixin</span>.<span class="title function_">launchMiniProgram</span>(&#123;</span><br><span class="line">  <span class="comment">//跳转小程序页面路径</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">`pages/app_payment/payment/index?order_id=<span class="subst">$&#123;orderId&#125;</span>`</span>,</span><br><span class="line">  <span class="comment">//可取值： 0-正式版； 1-测试版； 2-体验版。 默认值为0。</span></span><br><span class="line">  <span class="attr">type</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">//小程序的原始id - 测试环境微信小程序</span></span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;gh_a269eb45xxxx&#x27;</span>, <span class="comment">//小程序的原始id - 生产环境微信小程序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="安卓下载安装包"><a href="#安卓下载安装包" class="headerlink" title="安卓下载安装包"></a>安卓下载安装包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">up</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">progress</span> = <span class="number">0</span> <span class="comment">// 设置进度条</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">upshow</span> = <span class="literal">true</span> <span class="comment">//切换进度条显示</span></span><br><span class="line">  <span class="comment">//开启下载任务</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dtask</span> = plus.<span class="property">downloader</span>.<span class="title function_">createDownload</span>(<span class="string">`apk下载链接`</span>, &#123;&#125;, <span class="function">(<span class="params">d, status</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载成功安装&#x27;</span> + d.<span class="property">filename</span>)</span><br><span class="line">      plus.<span class="property">runtime</span>.<span class="title function_">install</span>(d.<span class="property">filename</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      plus.<span class="property">nativeUI</span>.<span class="title function_">alert</span>(<span class="string">&#x27;安装失败，请稍候重试&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">progress</span> = <span class="number">0</span> <span class="comment">// 重置进度条</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">upshow</span> = <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下载任务状态变化事件,计算进度条数值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dtask</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;statechanged&#x27;</span>, <span class="function">(<span class="params">task</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (task.<span class="property">state</span> == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> progress = (<span class="variable language_">this</span>.<span class="property">dtask</span>.<span class="property">downloadedSize</span> / <span class="variable language_">this</span>.<span class="property">dtask</span>.<span class="property">totalSize</span>) * <span class="number">100</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">progress</span> = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(progress) <span class="comment">// 进度条百分比</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dtask</span>.<span class="title function_">start</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义头部"><a href="#自定义头部" class="headerlink" title="自定义头部"></a>自定义头部</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;statusbar trans&quot; :style=&quot;&#123; height: `$&#123;statusBarHeight&#125;px` &#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;navbar&quot; :style=&quot;&#123; height: `$&#123;titleBarHeight&#125;px` &#125;&quot;&gt;</span><br><span class="line">      &lt;view class=&quot;left-box flex items-center justify-center&quot; @click=&quot;navBack&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;iconfont icon-fanhui2&quot;&gt;&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;!-- #ifdef MP --&gt;</span><br><span class="line">      &lt;view class=&quot;title&quot; :style=&quot;&#123; width: `$&#123;jiaonangWidth&#125;px` &#125;&quot;&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;!-- #endif --&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- #ifdef APP-PLUS --&gt;</span><br><span class="line">      &lt;view class=&quot;title&quot;&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;!-- #endif --&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      statusBarHeight: 0,  // 状态栏高度</span><br><span class="line">      titleBarHeight: 0, // 自定义的头部的高度</span><br><span class="line">      saveAreaHeight: 0, // 底部安全区域的高度</span><br><span class="line"></span><br><span class="line">      // #ifdef MP</span><br><span class="line">      jiaonangWidth: 0</span><br><span class="line">      // #endif</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // 获取当前设备信息</span><br><span class="line">    const currentDevice = uni.getSystemInfoSync()</span><br><span class="line"></span><br><span class="line">    // #ifdef MP</span><br><span class="line">    let menuButtonObject = uni.getMenuButtonBoundingClientRect()</span><br><span class="line">    //获取系统信息</span><br><span class="line">    uni.getSystemInfo(&#123;</span><br><span class="line">      success: (res) =&gt; &#123;</span><br><span class="line">        //导航栏高度 = 菜单按钮高度 +（菜单按钮与顶部距离-状态栏高度）*2</span><br><span class="line">        let navHeight = menuButtonObject.height + (menuButtonObject.top - res.statusBarHeight) * 2</span><br><span class="line">        this.titleBarHeight = navHeight</span><br><span class="line">        this.statusBarHeight = res.statusBarHeight</span><br><span class="line"></span><br><span class="line">        // 胶囊的宽度</span><br><span class="line">        this.jiaonangWidth =</span><br><span class="line">          currentDevice.windowWidth -</span><br><span class="line">          menuButtonObject.width -</span><br><span class="line">          (currentDevice.windowWidth - menuButtonObject.right) * 2 -</span><br><span class="line">          50</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    // #endif</span><br><span class="line"></span><br><span class="line">    // #ifdef APP-PLUS</span><br><span class="line">    // 获取系统信息</span><br><span class="line">    const sysHeight = currentDevice.statusBarHeight</span><br><span class="line">    this.statusBarHeight = sysHeight</span><br><span class="line">    this.titleBarHeight = sysHeight</span><br><span class="line">    // #endif</span><br><span class="line"></span><br><span class="line">    uni.getSystemInfo(&#123;</span><br><span class="line">      success: (res) =&gt; &#123;</span><br><span class="line">        // 获取底部安全区域的高度</span><br><span class="line">        this.saveAreaHeight = res.safeAreaInsets.bottom</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 加载完成后发射事件</span><br><span class="line">    this.$emit(&#x27;loadHeader&#x27;, &#123;</span><br><span class="line">      saveAreaHeight: this.saveAreaHeight</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  .navbar &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    position: relative;</span><br><span class="line"></span><br><span class="line">    .left-box &#123;</span><br><span class="line">      width: 100rpx;</span><br><span class="line">      height: 100%;</span><br><span class="line">      position: absolute;</span><br><span class="line">      height: 100%;</span><br><span class="line"></span><br><span class="line">      .back-icon &#123;</span><br><span class="line">        width: 40upx;</span><br><span class="line">        height: 40upx;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: center;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .title &#123;</span><br><span class="line">      height: 100%;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 100rpx;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line"></span><br><span class="line">      /* #ifdef APP-PLUS */</span><br><span class="line">      width: calc(100% - 100rpx);</span><br><span class="line">      padding-right: 10rpx;</span><br><span class="line">      /* #endif */</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h2 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h2><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><p>ios中使用<code>plus.runtime.openURL</code>，拉取支付宝（当面付）报错<code>&#123;&quot;code&quot;:-3,&quot;message&quot;:&quot;此功能不支持&quot;&#125;</code></p><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>找到<code>manifest.json =&gt; 源码视图 =&gt; distribute</code>中添加以下的信息</p><p>重新运行自定义基座或云打包后生效</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;ios&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;urlschemewhitelist&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;alipay,safepay,alipays&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;apple&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;urlschemewhitelist&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;alipay&quot;</span><span class="punctuation">,</span> <span class="string">&quot;safepay&quot;</span><span class="punctuation">,</span> <span class="string">&quot;alipays&quot;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centOS服务器初始化</title>
      <link href="/2024/01/27/centOS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/01/27/centOS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="更新源yum"><a href="#更新源yum" class="headerlink" title="更新源yum"></a>更新源yum</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检验</span></span><br><span class="line">git -v</span><br></pre></td></tr></table></figure><h2 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202401271607152.png" alt="ssh" /><h2 id="读取公钥"><a href="#读取公钥" class="headerlink" title="读取公钥"></a>读取公钥</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h1 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h1><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><p>由于云服务器上很难从<code>github</code>或者<code>包源处</code>下载，这里使用电脑本机下载nvm压缩包，手动SFTP到服务器的方式。</p><h2 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h2><p>电脑上下载</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/nvm-sh/nvm/archive/refs/tags/v0.39.7.tar.gz</span><br></pre></td></tr></table></figure><h2 id="上传压缩包"><a href="#上传压缩包" class="headerlink" title="上传压缩包"></a>上传压缩包</h2><p>使用三方工具上传压缩包至 <code>/root</code>目录下</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202401271628625.png" alt="image-20240127162837438"></p><h2 id="解压包"><a href="#解压包" class="headerlink" title="解压包"></a>解压包</h2><p>解压的时候要注意<code>安装包</code>的名字</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nvm-0.39.7.tar.gz -C /root</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改bashrc文件</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入配置</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/nvm-0.39.7&quot;</span> </span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载用户配置</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="设置镜像源"><a href="#设置镜像源" class="headerlink" title="设置镜像源"></a>设置镜像源</h2><p>npm使用的是原来的源<code>https://registry.npmjs.org/</code>，最新的源地址是<code>https://registry.npmmirror.com</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前源</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最新源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="安装pnpm"><a href="#安装pnpm" class="headerlink" title="安装pnpm"></a>安装pnpm</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pnpm</span></span><br><span class="line">npm install pnpm -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检验</span></span><br><span class="line">pnpm -v</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置pnpm镜像（淘宝镜像）</span></span><br><span class="line">pnpm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><h2 id="nvm补充"><a href="#nvm补充" class="headerlink" title="nvm补充"></a>nvm补充</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nvm验证</span></span><br><span class="line">nvm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nvm查看远程node版本</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装node具体版本</span></span><br><span class="line">nvm install v18.19.0</span><br></pre></td></tr></table></figure><h1 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm i -g pm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检验pm2是否安装成功</span></span><br><span class="line">pm2 -v</span><br></pre></td></tr></table></figure><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建启动脚本</span></span><br><span class="line">pm2 startup systemd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> pm2-root</span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">pm2 start app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nestjs的某个服务，并且命名为nest-app</span></span><br><span class="line">pm2 start main.js --name nest-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">pm2 restart xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">pm2 stop xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止所有服务</span></span><br><span class="line">pm2 stop all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个服务</span></span><br><span class="line">pm2 delete xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有服务</span></span><br><span class="line">pm2 delete all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个服务日子</span></span><br><span class="line">pm2 <span class="built_in">log</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有服务日子</span></span><br><span class="line">pm2 <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所用已启动项目</span></span><br><span class="line">pm2 list</span><br></pre></td></tr></table></figure><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">sudo yum install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h2 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><ul><li>检查Nginx的状态，出现<code>active (running)</code>代表nginx成功运行中</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx status</span><br></pre></td></tr></table></figure><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure><h3 id="停止Nginx"><a href="#停止Nginx" class="headerlink" title="停止Nginx"></a>停止Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx stop</span><br></pre></td></tr></table></figure><h3 id="更快的停止服务"><a href="#更快的停止服务" class="headerlink" title="更快的停止服务"></a>更快的停止服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -9 nginx</span><br></pre></td></tr></table></figure><h3 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><h3 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h3><ul><li>Nginx检查配置文件中的语法错误，并避免运行时报错</li><li>同时通过这个命令，也可以看到生效配置的路径，如以下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202401291432689.png" alt="image-20240129143217654"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><h3 id="检查路径"><a href="#检查路径" class="headerlink" title="检查路径"></a>检查路径</h3><ul><li>检查Nginx的路径，一般为<code>/usr/sbin/nginx</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> nginx</span><br></pre></td></tr></table></figure><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>使用chrome下载redis的包：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/redis/redis/archive/7.2.3.tar.gz</span><br></pre></td></tr></table></figure><p>使用ftp工具将这个包推送到服务器的某个文件夹下，这里推送到 <code>/root</code></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>解压到当前目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-7.2.3.tar.gz</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>进入到解压后到<code>redis-7.2.3.tar.gz</code>文件夹内，执行make</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h2><p>进入到<code>redis-7.2.3.tar.gz</code>目录的<code>src</code>目录中，执行安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><p>进入到<code>redis-7.2.3.tar.gz</code>目录的<code>src</code>目录中，执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure><p>如果代表成功</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202401291759829.png" alt="image-20240129175925782"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="后台运行-允许远程连接"><a href="#后台运行-允许远程连接" class="headerlink" title="后台运行&#x2F;允许远程连接"></a>后台运行&#x2F;允许远程连接</h3><ul><li><p>进入到redis目录，<code>cd redis-7.2.3/</code></p></li><li><p>编辑配置文件，<code>vi redis.conf</code></p></li><li><p>使用<code>/要搜索的内容</code>回车，直接快速定位文档中的位置，找到<code>bind 127.0.0.1</code>将其注释</p></li><li><p>设置<code>protected-mode no</code></p></li><li><p>设置<code>daemonize yes</code> （后台运行）</p></li><li><p>设置<code>requirepass 用户名:密码</code>（添加密码）</p></li><li><p>重启可能会遇到以下报错，根据提示去修改<code>vm.overcommit_memory=1</code>即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="1-安装wget"><a href="#1-安装wget" class="headerlink" title="1.安装wget"></a>1.安装wget</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><h2 id="2-下载rpm"><a href="#2-下载rpm" class="headerlink" title="2.下载rpm"></a>2.下载rpm</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="3-安装rpm"><a href="#3-安装rpm" class="headerlink" title="3.安装rpm"></a>3.安装rpm</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="4-修改repo配置"><a href="#4-修改repo配置" class="headerlink" title="4.修改repo配置"></a>4.修改repo配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br></pre></td></tr></table></figure><ul><li>将<code> [mysql57-community] =&gt; enabled</code>设置为1，表示打开5.7</li><li>将<code>[mysql80-community] =&gt; enabled</code>设置为0，表示关闭8.0</li></ul><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202401291447777.png" alt="image-20240129144745722"></p><h2 id="5-禁用模块"><a href="#5-禁用模块" class="headerlink" title="5.禁用模块"></a>5.禁用模块</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum module <span class="built_in">disable</span> mysql</span><br></pre></td></tr></table></figure><h2 id="6-安装mysql"><a href="#6-安装mysql" class="headerlink" title="6.安装mysql"></a>6.安装mysql</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><h2 id="7-查看版本"><a href="#7-查看版本" class="headerlink" title="7.查看版本"></a>7.查看版本</h2><ul><li>mysql  Ver 14.14 Distrib 5.7.44, for Linux (x86_64) using  EditLine wrapper</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><h2 id="8-开机自启"><a href="#8-开机自启" class="headerlink" title="8.开机自启"></a>8.开机自启</h2><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld.service</span><br></pre></td></tr></table></figure><h3 id="取消自启"><a href="#取消自启" class="headerlink" title="取消自启"></a>取消自启</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> mysqld.service</span><br></pre></td></tr></table></figure><h2 id="9-查用命令"><a href="#9-查用命令" class="headerlink" title="9.查用命令"></a>9.查用命令</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><h2 id="10-查看临时密码"><a href="#10-查看临时密码" class="headerlink" title="10.查看临时密码"></a>10.查看临时密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202401291507396.png" alt="image-20240129150723353"></p><h2 id="11-修改密码前"><a href="#11-修改密码前" class="headerlink" title="11.修改密码前"></a>11.修改密码前</h2><ol><li><p>修改密码前，需要修改配置文件，执行 <code>vim /etc/my.cnf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure></li><li><p>在<code>[mysqld]</code>下一行中添加<code>skip-grant-tables</code>，如图</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202401291511269.png" alt="image-20240129151036008"></p></li><li><p>重启mysql</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure></li></ol><h2 id="12-修改密码"><a href="#12-修改密码" class="headerlink" title="12.修改密码"></a>12.修改密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql 8</span></span><br><span class="line">alter user root@<span class="string">&#x27;localhost&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;Root@123456&#x27;</span>;</span><br><span class="line"><span class="comment"># 或者 推荐</span></span><br><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;新密码&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> ; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码，重启mysql后生效</span></span><br><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure><h2 id="13-报错"><a href="#13-报错" class="headerlink" title="13.报错"></a>13.报错</h2><ul><li><p>如果使用native连接mysql时报错<code>MySQL提示：Host &#39;183.239.44.174&#39; is not allowed to connect to this MySQL server</code></p></li><li><p>进入mysql中去配置下权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一步</span><br><span class="line">use mysql;</span><br><span class="line"># 第二步</span><br><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line"># 第三步</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> centOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite环境变量</title>
      <link href="/2023/05/08/vite%E9%80%9A%E8%BF%87env%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99title/"/>
      <url>/2023/05/08/vite%E9%80%9A%E8%BF%87env%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99title/</url>
      
        <content type="html"><![CDATA[<h1 id="vite环境变量"><a href="#vite环境变量" class="headerlink" title="vite环境变量"></a>vite环境变量</h1><h2 id="组件中使用"><a href="#组件中使用" class="headerlink" title="组件中使用"></a>组件中使用</h2><p>如果一个项目需要统一配置<code>系统名称</code>等，需要使用到vite的环境变量</p><ul><li>vite的环境变量 在根目录需要创建两个文件<ul><li><code>.env.development</code> 开发模式中使用</li><li><code>.env.production</code> 生产模式中使用</li></ul></li><li>在<code>.env.development</code>文件中添加系统标题</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>.env.development</span><br><span class="line">VITE<span class="built_in">_</span>APP<span class="built_in">_</span>TITLE=系统名称 </span><br></pre></td></tr></table></figure><p><strong>在组件中的使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;span style=&quot;font-size: 20px; font-weight: 600&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">//调用环境变量 在 template 中使用 title </span><br><span class="line">const title = import.meta.env.VITE_APP_TITLE;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="index-html中使用"><a href="#index-html中使用" class="headerlink" title="index.html中使用"></a>index.html中使用</h2><p>如果想要在<code>index.html</code>中使用环境变量，需要按照以下方式配置</p><p><strong>安装插件:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-html -D</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>-D 表示安装完成后 将插件配置到 package.json 的 devDependencies 中</p></div><p><strong>在 vite.config.ts中配置</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig, loadEnv &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createHtmlPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个配置 为了在html中使用 环境变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getViteEnv</span> = (<span class="params">mode, target</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">loadEnv</span>(mode, process.<span class="title function_">cwd</span>())[target]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; mode &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="title function_">vue</span>(),</span><br><span class="line">      <span class="title function_">createHtmlPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">inject</span>: &#123;</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="comment">// 将环境变量 VITE_APP_TITLE 赋值给 title 方便 html页面使用 title 获取系统标题</span></span><br><span class="line">            <span class="attr">title</span>: <span class="title function_">getViteEnv</span>(mode, <span class="string">&#x27;VITE_APP_TITLE&#x27;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// ...其他配置</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在index.html中替换title的内容</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">  &lt;%- title %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的自定义指令</title>
      <link href="/2023/05/08/vue%E5%A5%BD%E7%94%A8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/05/08/vue%E5%A5%BD%E7%94%A8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义内容超出范围省略号"><a href="#自定义内容超出范围省略号" class="headerlink" title="自定义内容超出范围省略号"></a>自定义内容超出范围省略号</h1><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>不传行数默认是一行省略</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一行超出隐藏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-ellipsis</span>&gt;</span>不安于小成，然后足以成大器；不诱于小利，然后可以立远功。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 两行超出隐藏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-ellipsis</span>=<span class="string">&quot;2&quot;</span>&gt;</span>不安于小成，然后足以成大器；不诱于小利，然后可以立远功。不安于小成，然后足以成大器。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 三行超出隐藏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-ellipsis</span>=<span class="string">&quot;3&quot;</span>&gt;</span>不安于小成，然后足以成大器；不诱于小利，然后可以立远功。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建自定义指令"><a href="#创建自定义指令" class="headerlink" title="创建自定义指令"></a>创建自定义指令</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义指令：根据显示信息是否超出显示省略号动态添加title</span></span><br><span class="line"><span class="comment"> * 行数不传默认为 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ellipsis</span>: <span class="title class_">Directive</span> = &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el: HTMLElement, binding: DirectiveBinding</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">rowNum</span>: <span class="built_in">number</span> = <span class="title class_">Number</span>(binding.<span class="property">value</span>);</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (rowNum) &#123;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;-webkit-box&#x27;</span>;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">webkitLineClamp</span> = <span class="title class_">String</span>(rowNum);</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">webkitBoxOrient</span> = <span class="string">&#x27;vertical&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (el.<span class="property">clientHeight</span> &lt; el.<span class="property">scrollHeight</span>) &#123;</span><br><span class="line">        el.<span class="property">title</span> = el.<span class="property">innerText</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">textOverflow</span> = <span class="string">&#x27;ellipsis&#x27;</span>;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">whiteSpace</span> = <span class="string">&#x27;nowrap&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (el.<span class="property">clientWidth</span> &lt; el.<span class="property">scrollWidth</span>) &#123;</span><br><span class="line">        el.<span class="property">title</span> = el.<span class="property">innerText</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="注册指令"><a href="#注册指令" class="headerlink" title="注册指令"></a>注册指令</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ellipsis &#125; <span class="keyword">from</span> <span class="string">&#x27;./directive/ellipsis&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;ellipsis&#x27;</span>, ellipsis)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim模式</title>
      <link href="/2023/04/24/vim%E5%B8%B8%E8%A7%81%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/04/24/vim%E5%B8%B8%E8%A7%81%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="安装vim插件"><a href="#安装vim插件" class="headerlink" title="安装vim插件"></a>安装vim插件</h2><p>Vscode编辑器插件市场搜索 Vim 插件后，修改setting.json文件，添加以下配置：</p><details class="toggle" ><summary class="toggle-button" style="">添加以下配置</summary><div class="toggle-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;vim.easymotion&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vim.incsearch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vim.useSystemClipboard&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vim.useCtrlKeys&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vim.hlsearch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vim.insertModeKeyBindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;j&quot;</span><span class="punctuation">,</span> <span class="string">&quot;j&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;Esc&gt;&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vim.normalModeKeyBindingsNonRecursive&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;leader&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;d&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;d&quot;</span><span class="punctuation">,</span> <span class="string">&quot;d&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;C-n&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;:nohl&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;K&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;lineBreakInsert&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;silent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vim.leader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;space&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vim.handleKeys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;&lt;C-a&gt;&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;&lt;C-f&gt;&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></details><p>设置Mac系统 快速移动光标</p><details class="toggle" ><summary class="toggle-button" style="">需要执行的命令</summary><div class="toggle-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line">defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line">defaults write com.visualstudio.code.oss ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line">defaults write com.microsoft.VSCodeExploration ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line">defaults delete -g ApplePressAndHoldEnabled</span><br></pre></td></tr></table></figure></div></details><h2 id="行命令"><a href="#行命令" class="headerlink" title="行命令"></a>行命令</h2><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i</td><td>键入模式（当前文本位置键入）</td></tr><tr><td>a</td><td>键入模式（当前文本后面键入）</td></tr><tr><td>shift + i</td><td>键入模式（当前行键入）</td></tr><tr><td>h</td><td>左移动</td></tr><tr><td>j</td><td>下移动</td></tr><tr><td>k</td><td>上移动</td></tr><tr><td>l</td><td>右移动</td></tr><tr><td>o (小写)</td><td>往下一行插入</td></tr><tr><td>O（大写）</td><td>往上一行插入</td></tr><tr><td>gg</td><td>移动到第一行代码</td></tr><tr><td>shift + g</td><td>移动到最后一行代码</td></tr><tr><td>yy</td><td>复制当前行</td></tr><tr><td>dd</td><td>删除当前行</td></tr><tr><td>p</td><td>粘贴</td></tr><tr><td>shift + a</td><td>插入模式，当前行最后键入</td></tr></tbody></table><details class="toggle" ><summary class="toggle-button" style="">修改跳转当前页行首行尾的快捷键</summary><div class="toggle-content"><p>打开<code>setting.json</code>，添加以下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vim.normalModeKeyBindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;H&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;^&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;L&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;g&quot;</span><span class="punctuation">,</span><span class="string">&quot;_&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div></details><h2 id="vim-语法"><a href="#vim-语法" class="headerlink" title="vim 语法"></a>vim 语法</h2><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>删除操作：<code>d</code>被激活后，可以配合组合键执行下一步操作。</p><details class="toggle" ><summary class="toggle-button" style="">操作符改键</summary><div class="toggle-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vim.operatorPendingModeKeyBindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;H&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;^&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;L&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;g&quot;</span><span class="punctuation">,</span><span class="string">&quot;_&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div></details><p>配置完成后，删除当前行的前面部分通过<code>d + H</code>，删除当前行后面的部分通过<code>d + L</code></p><h2 id="基于单词-字串移动"><a href="#基于单词-字串移动" class="headerlink" title="基于单词&#x2F;字串移动"></a>基于单词&#x2F;字串移动</h2><p><code>e</code>：移动到单词的结尾</p><p><code>b</code>：移动到上一个单词的开头</p><p><code>w</code>：移动到下一个单词的开头</p><p><code>ge</code>：移动到上一个单词的结尾</p><p><code>cw</code>：删除当前单词</p><p><code>ea</code>：在当前单词结尾处添加</p><h2 id="vscode-操作"><a href="#vscode-操作" class="headerlink" title="vscode 操作"></a>vscode 操作</h2><details class="toggle" ><summary class="toggle-button" style="">配置跳转工作区、编辑区</summary><div class="toggle-content"><p>找到<code>show explorer</code>的配置，将它配置为<code>ctrl + ;</code></p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202304241542073.png" alt="image-20230424154224023"></p><p>通过<code>ctrl + ;</code>可以在资源管理器和编辑器来回跳转</p></div></details><details class="toggle" ><summary class="toggle-button" style="">新建文件、文件夹</summary><div class="toggle-content"><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202304241543316.png" alt="image-20230424154314290"></p><p>可以通过 vscode 的第三方插件实现</p></div></details>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-router v6</title>
      <link href="/2023/04/20/React-router6/"/>
      <url>/2023/04/20/React-router6/</url>
      
        <content type="html"><![CDATA[<h1 id="React-router-v6"><a href="#React-router-v6" class="headerlink" title="React-router v6"></a>React-router v6</h1><h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="https://reactrouter.com/en/main">React Router 官网首页</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-router-dom@6 --save</span><br></pre></td></tr></table></figure><h1 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h1><table><thead><tr><th>组件</th><th>作用</th><th>描述</th></tr></thead><tbody><tr><td>BrowerRouter</td><td>路由history模式</td><td>表现为：<code>http://localhost:3000/about</code></td></tr><tr><td>HashRouter</td><td>路由hash模式</td><td>表现为：<code>http://localhost:3000/#/about</code></td></tr><tr><td>Routes</td><td>包裹所有路由的映射关系的组件</td><td></td></tr><tr><td>Route</td><td>映射路由与地址的组件</td><td><code>&lt;Route path=&#39;/about&#39; element=&#123;About组件&#125; /&gt;</code></td></tr><tr><td>Outlet</td><td>类似于router-view，给渲染组件提供占位符</td><td></td></tr><tr><td>Link</td><td>导航组件</td><td>会被渲染为a标签，与 VueRouter中的<code>&lt;router-link /&gt;</code>类似。</td></tr></tbody></table><h1 id="路由模式的使用"><a href="#路由模式的使用" class="headerlink" title="路由模式的使用"></a>路由模式的使用</h1><p>在项目入口文件main.tsx中，使用路由模式的标签包裹全局唯一App组件，路由模式全局只出现一次。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h1><p>在最新的写法中，可以通过路由表的方式创建路由与地址的映射关系，最后再使用useRoutes来动态创建<code>&lt;Routes&gt;和&lt;Route&gt;</code>，大致的写法是</p><details class="toggle" ><summary class="toggle-button" style="">写法一：路由表直接写组件</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lazy &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MailOutlined</span>, <span class="title class_">SettingOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LayoutCom</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../Layout/Layout&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Dashboard</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Dashboard/Dashboard&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Login</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Login/Login&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Main</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Main/Main&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Role</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Role/Role&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/User/User&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Menu</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Menu/Menu&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Column</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Column/Column&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Category</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Category/Category&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Error</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Error/404&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">MailOutlined</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">element</span>: (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">LayoutCom</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Dashboard</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LayoutCom</span>&gt;</span></span></span><br><span class="line">    ),</span><br><span class="line">    <span class="attr">needAuth</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;登录&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">MailOutlined</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">needAuth</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;系统管理&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">LayoutCom</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">needAuth</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;role&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;角色管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Role</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;用户管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">User</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;menu&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;菜单管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Menu</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/other&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;其他内容&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">LayoutCom</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">needAuth</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;category&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;分类管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Category</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;column&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;栏目管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Column</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Error</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">needAuth</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">写法二：通过api创建组件</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; lazy &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserRouter, createHashRouter, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">RouteObject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CopyOutlined</span>, <span class="title class_">CalendarOutlined</span>, <span class="title class_">WarningOutlined</span>, <span class="title class_">FileAddOutlined</span>, <span class="title class_">ScheduleOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../layout&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sign</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Sign/Sign&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Exception</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Exception/Exception&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Apply</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Apply/Apply&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Check</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Check/Check&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Login</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Login/Login&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BeforeEach</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/BeforeEach&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;react-router&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IndexRouteObject</span> &#123;</span><br><span class="line">    meta?: &#123;</span><br><span class="line">      menu?: <span class="built_in">boolean</span></span><br><span class="line">      title?: <span class="built_in">string</span></span><br><span class="line">      icon?: <span class="title class_">React</span>.<span class="property">ReactNode</span></span><br><span class="line">      auth?: <span class="built_in">boolean</span></span><br><span class="line">    &#125;</span><br><span class="line">    name?: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">NonIndexRouteObject</span> &#123;</span><br><span class="line">    meta?: &#123;</span><br><span class="line">      menu?: <span class="built_in">boolean</span></span><br><span class="line">      title?: <span class="built_in">string</span></span><br><span class="line">      icon?: <span class="title class_">React</span>.<span class="property">ReactNode</span></span><br><span class="line">      auth?: <span class="built_in">boolean</span></span><br><span class="line">    &#125;</span><br><span class="line">    name?: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteObject</span>[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Navigate</span>, &#123; <span class="attr">to</span>: <span class="string">&#x27;/sign&#x27;</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">BeforeEach</span>, <span class="literal">null</span>, <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Home</span>)),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">menu</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;考勤管理&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">CopyOutlined</span>),</span><br><span class="line">      <span class="attr">auth</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;sign&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;sign&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Sign</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">menu</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;在线打卡签到&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">CalendarOutlined</span>),</span><br><span class="line">          <span class="attr">auth</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;exception&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;exception&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Exception</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">menu</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;异常考勤查询&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">WarningOutlined</span>),</span><br><span class="line">          <span class="attr">auth</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;apply&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;apply&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Apply</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">menu</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;添加考勤审批&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">FileAddOutlined</span>),</span><br><span class="line">          <span class="attr">auth</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;check&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;check&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Check</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">menu</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;我的考勤审批&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">ScheduleOutlined</span>),</span><br><span class="line">          <span class="attr">auth</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">BeforeEach</span>, <span class="literal">null</span>, <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Login</span>)),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createHashRouter</span>(routes, &#123;</span><br><span class="line">  <span class="attr">basename</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div></details><h1 id="默认路由展示"><a href="#默认路由展示" class="headerlink" title="默认路由展示"></a>默认路由展示</h1><p>比如说现在路由表中有这么一组映射关系的<code>routes</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/other&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;其他内容&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">LayoutCom</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">needAuth</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;category&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;分类管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Category</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;column&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;栏目管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Column</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果想让地址访问<code>/other</code>的时候，有一个默认显示的组件内容，通过<code>index:true</code>和<code>&lt;Navigate /&gt;</code>组件来实现重定向</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/other&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;其他内容&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">LayoutCom</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">needAuth</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">index</span>:<span class="literal">true</span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/other/category&#x27;</span>&gt;</span>默认显示的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> &#125;， <span class="comment">// 当前访问other的时候，会默认显示这个内容</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;category&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;分类管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Category</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;column&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;栏目管理&#x27;</span>, <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Column</span> /&gt;</span></span>, <span class="attr">needAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="404路由处理"><a href="#404路由处理" class="headerlink" title="404路由处理"></a>404路由处理</h1><p>在路由表的最下方添加404路由组件，<code>一定要放到路由表的最后一项</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">   <span class="attr">label</span>: <span class="string">&quot;404&quot;</span>,</span><br><span class="line">   <span class="attr">element</span>: <span class="language-xml">&lt;404 /&gt;</span>,</span><br><span class="line">   <span class="attr">needAuth</span>: <span class="literal">false</span>,</span><br><span class="line"> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="单页面错误边界errorElement"><a href="#单页面错误边界errorElement" class="headerlink" title="单页面错误边界errorElement"></a>单页面错误边界errorElement</h1><p>如果想指定某个路由组件渲染错误的时候，可以使用<code>errorElement</code>，配合<code>loader装载机</code>一起使用更好。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/other&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;其他内容&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">SettingOutlined</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">LayoutCom</span> /&gt;</span></span>,</span><br><span class="line"><span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorCom</span> /&gt;</span></span> <span class="comment">// 当访问/other页面渲染错误时候，显示的组件</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h1><p>使用步骤</p><ol><li><p>创建一个全局的自定义守卫组件。</p></li><li><p>在根组件中，使用守卫组件将根组件进行包裹，通过props的方法，将子组件通过props传入到守卫组件。</p></li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">BeforeEach</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">BeforeEach</span>&gt;</span></span></span><br><span class="line">    ),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;layout&quot;</span>,</span><br><span class="line">      <span class="attr">auth</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    <span class="attr">children</span>: []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li>在子组件中，通过matchRoutes方法，传入routes和localtion匹配到当前路由信息。</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="variable constant_">FC</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; matchRoutes, <span class="title class_">Navigate</span>, useLocation &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BeforeEach</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">props: IProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; children, ...rest &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line">  <span class="keyword">const</span> mathchs = <span class="title function_">matchRoutes</span>(routes, location);</span><br><span class="line">  <span class="keyword">const</span> meta = mathchs![mathchs!.<span class="property">length</span> - <span class="number">1</span>].<span class="property">route</span>.<span class="property">meta</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否需要登录</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isNeedLogin</span> = (<span class="params"></span>) =&gt; meta.<span class="property">auth</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;</span></span><br><span class="line"><span class="language-xml">     isNeedLogin() ? <span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#123;</span>&quot;/&quot;&#125; /&gt;</span> : children</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/&gt;</span></span>;  </span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BeforeEach</span>;</span><br></pre></td></tr></table></figure><h1 id="常用的内置hooks"><a href="#常用的内置hooks" class="headerlink" title="常用的内置hooks"></a>常用的内置hooks</h1><h2 id="useRoutes"><a href="#useRoutes" class="headerlink" title="useRoutes"></a>useRoutes</h2><p>根据路由表，动态创建<code>&lt;Routes&gt;和&lt;Route&gt;</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> dynamic = <span class="title function_">useRoutes</span>(routes)</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   &#123;</span></span><br><span class="line"><span class="language-xml">    dynamic</span></span><br><span class="line"><span class="language-xml">   &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h2><p>获取当前页路径信息</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="keyword">from</span>, pathname &#125; = location</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你当前在 &#123;pathname&#125;，你是从 &#123;from&#125; 跳转过来的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useNavgiate"><a href="#useNavgiate" class="headerlink" title="useNavgiate"></a>useNavgiate</h2><p>编程式导航是通过JavaScript编程方式进行路由页面跳转，实现步骤如下：</p><ol><li><p>使用useNavigate钩子函数</p></li><li><p>返回路由跳转函数</p></li><li><p>在JavaScript中执行跳转</p></li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> router = <span class="title function_">useNavigate</span>(); <span class="comment">// 返回路由跳转函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">routerLink</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">router</span>(<span class="string">&quot;/about&quot;</span>); <span class="comment">// 传入页面跳转地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;routerLink&#125;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由跳转函数接受第二个参数，如果不想留下页面栈，可以传入<code>&#123;replace:true&#125;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">router</span>(<span class="string">&quot;/about&quot;</span>, &#123;<span class="attr">replace</span>:<span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><p>传递参数（通过<code>state</code>传递数据对象）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过state传递数据对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">const</span> router = <span class="title function_">useNavigate</span>()</span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">RouterLink</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">router</span>(<span class="string">&#x27;/login&#x27;</span>,&#123;</span><br><span class="line">   <span class="attr">replace</span>:<span class="literal">true</span>,</span><br><span class="line">   <span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 前进或者后退</span></span><br><span class="line">  <span class="title function_">router</span>(<span class="number">1</span>) </span><br><span class="line">  <span class="title function_">router</span>(-<span class="number">1</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>App<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h2><p>用来匹配路由的params参数，例如：<code>user/:id  =&gt;  localhost:3000/user/123</code>对应的id就是123</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/User.jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProfilePage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取URL中携带过来的params参数</span></span><br><span class="line">  <span class="keyword">let</span> &#123; id &#125; = <span class="title function_">useParams</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;users/:id&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">User</span> /&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h2><p>用于<code>读取</code>和<code>修改</code>当前位置URL中的查询参数，返回一个包含两个值的数组：**[当前search参数，更新search的函数]**</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = <span class="title function_">useSearchParams</span>();</span><br><span class="line">  <span class="keyword">const</span> id = search.<span class="title function_">get</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> title = search.<span class="title function_">get</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> content = search.<span class="title function_">get</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setSearch(&quot;id=008&amp;title=哈哈&amp;content=嘻嘻&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          点我更新一下收到的search参数</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useMatch"><a href="#useMatch" class="headerlink" title="useMatch"></a>useMatch</h2><p>返回当前路由所匹配的信息</p><h1 id="新增有趣功能"><a href="#新增有趣功能" class="headerlink" title="新增有趣功能"></a>新增有趣功能</h1><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>允许我们在路由表中设置异步请求函数，只有当异步请求函数正确返回，才会正确的渲染组件。</p><p>使用步骤：</p><ol><li>首先要使用createBrowserRouter动态生成路由表（根标签相当于是所有路由的父级菜单，而所有的子组件是在children中定义）。</li><li>在入口文件main.tsx中要使用新版的<code>&lt;RouterProvider /&gt;</code>标签渲染组件。</li><li>在路由表中添加loader请求函数。</li></ol><details class="toggle" ><summary class="toggle-button" style="">使用Route方法</summary><div class="toggle-content"><p>&#x2F;router&#x2F;index.ts</p><p>在根地址&#x2F;中，添加了一个rootLoader请求方法，进入&#x2F;地址后，会执行一次rootLoader，请求pokemon的列表数据，在返回数据之后才会继续渲染组件，否则会渲染errorElement组件。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rootLoader = <span class="keyword">async</span> (): <span class="title class_">Promise</span>&lt;<span class="title class_">PokemonListType</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://pokeapi.co/api/v2/pokemon&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!results.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Poken Something Wrong&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> pokemons = <span class="keyword">await</span> results.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123; pokemons &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(</span><br><span class="line">  <span class="title function_">createRoutesFromElements</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">path</span>=<span class="string">&quot;/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">App</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      loader=&#123;rootLoader&#125; </span></span><br><span class="line"><span class="language-xml">      errorElement=&#123;<span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">path</span>=<span class="string">&quot;about/:name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        loader=&#123;pokemonLoader&#125;</span></span><br><span class="line"><span class="language-xml">        errorElement=&#123;<span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">路由表方式</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;layout&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    <span class="attr">loader</span>: rootLoader,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">        <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;about/:name&quot;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;关于&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span>,</span><br><span class="line">        <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">        <span class="attr">loader</span>: pokemonLoader,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(routes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></div></details><p>无论使用哪一种方式，需要在app入口文件中，使用<code>V6</code>的<code>RouterProvider</code>API，将路由信息<strong>router</strong>传入</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结合以上讲诉，可以通过loader进行鉴权，如果返回的结果正确则进入路由，如果不正确则重定向到登陆页，这里的重定向不再使用<code>&lt;Navigate /&gt;</code>，而是使用redirect(‘&#x2F;home’)</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;redirect,<span class="title class_">LoaderFunctionArgs</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">TParams</span> = &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  context?: <span class="literal">undefined</span>;</span><br><span class="line">  <span class="attr">request</span>: <span class="title class_">Request</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">LoaderFunctionArgs</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;layout&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    <span class="attr">loader</span>: rootLoader,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">        <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;about/:name&quot;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;关于&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span>,</span><br><span class="line">        <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something error!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="keyword">async</span> (<span class="attr">params</span>: <span class="title class_">TParams</span>) =&gt; &#123;</span><br><span class="line">          <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="title function_">pokemonLoader</span>(params);</span><br><span class="line">          <span class="keyword">const</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (random) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">redirect</span>(<span class="string">&quot;/home&quot;</span>); <span class="comment">// 进行重定向到home地址</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux状态管理</title>
      <link href="/2023/04/20/Redux%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2023/04/20/Redux%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Redux-状态管理"><a href="#Redux-状态管理" class="headerlink" title="Redux 状态管理"></a>Redux 状态管理</h1><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>vuex、pinia 和 redux 实现的功能是同一个，都是 JavaScript 状态的容器，让所有组件都可以访问公共的方法和变量。</p><p>安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux --save</span><br></pre></td></tr></table></figure><p>如果想要在浏览器调试的时候看到实时的动向，需要安装插件：<code>Redux DevTools</code></p><p>项目中需要安装对应的模块：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux-devtools-extension</span><br></pre></td></tr></table></figure><p>在 redux 入口文件中拓展调试工具插件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&quot;redux-devtools-extension&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(counterReducer, <span class="title function_">composeWithDevTools</span>());</span><br></pre></td></tr></table></figure><h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><table><thead><tr><th>核心内容</th><th>描述</th></tr></thead><tbody><tr><td>state</td><td>用于存储共享数据的仓库</td></tr><tr><td>reducer</td><td>用于修改 state 数据的方法集合</td></tr><tr><td>middleware</td><td>用于扩展一些插件来完成异步操作</td></tr><tr><td>dispatch</td><td>用于触发 reducer 或者 middleware</td></tr></tbody></table><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><details class="toggle" ><summary class="toggle-button" style="">入口文件的定义</summary><div class="toggle-content"><p>定义一个入口文件&#x2F;store&#x2F;index.ts，包含了创建的 store，reducer 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&quot;redux-devtools-extension&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">counterReducer</span> = (<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;inc&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;dec&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(counterReducer, <span class="title function_">composeWithDevTools</span>());</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">组件中的使用</summary><div class="toggle-content"><p>组件中通过<code>dispatch</code>修改 count 状态变量</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BackRoot</span> <span class="keyword">from</span> <span class="string">&quot;../components/BackRoot&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title class_">React</span>.<span class="title function_">useState</span>(store.<span class="title function_">getState</span>().<span class="property">count</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeCountAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 通过dispatch来调用reducer</span></span><br><span class="line">    store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;inc&quot;</span>, <span class="attr">payload</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 实时监听store中count的变化，从而对count在页面中的渲染</span></span><br><span class="line">  store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(store.<span class="title function_">getState</span>().<span class="property">count</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>About<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        redux内容：</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeCountAction&#125;</span>&gt;</span>修改count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">BackRoot</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h1 id="React-redux-简化-Redux"><a href="#React-redux-简化-Redux" class="headerlink" title="React-redux 简化 Redux"></a>React-redux 简化 Redux</h1><h2 id="React-redux"><a href="#React-redux" class="headerlink" title="React-redux"></a>React-redux</h2><p>使用纯 Redux 原生的库使用起来非常的繁琐，React-redux 让 Redux 和 React 结合起来使用，更加的简单轻松，输入 Redux 的一个辅助模块，类似于 Vue 和 vuex 的关系。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-redux --save</span><br></pre></td></tr></table></figure><h2 id="核心内容-1"><a href="#核心内容-1" class="headerlink" title="核心内容"></a>核心内容</h2><table><thead><tr><th>核心</th><th>描述</th></tr></thead><tbody><tr><td>Provider</td><td>将 store 注入到子代组件中，主要是注册状态管理与 React 结合，并且可以自动完成重新渲染的操作</td></tr><tr><td>useSelector</td><td>获取共享状态</td></tr><tr><td>useDispatch</td><td>修改共享状态</td></tr></tbody></table><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><details class="toggle" ><summary class="toggle-button" style="">通过Provider全局注入store</summary><div class="toggle-content"><p>会自动向下传递整个 store 仓库</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">数据的获取和修改</summary><div class="toggle-content"><p>在组件中使用，通过<code>useSelector</code>和<code>useDispatch</code>获取和修改共享状态</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">BackRoot</span> <span class="keyword">from</span> <span class="string">&quot;../components/BackRoot&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state: <span class="built_in">any</span></span>) =&gt;</span> state.<span class="property">count</span>); <span class="comment">// 获取state</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>(); <span class="comment">// 获取dispatch派发器</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeCountAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;inc&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeCountAction&#125;</span>&gt;</span>修改count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="处理多个-reducer"><a href="#处理多个-reducer" class="headerlink" title="处理多个 reducer"></a>处理多个 reducer</h2><p>对于多个共享状态数据的时候，最好进行分离操作，独立成一个一个的模块，这样后期维护起来会非常的方便。可以通过 combineReducers 方法，可以处理多个 reducer 函数（注意命名空间，防止和其他 reducer 模块冲突）。</p><p>将多个 reducer 拆分成多个模块：</p><details class="toggle" ><summary class="toggle-button" style="">counterReducer模块</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules/counterReducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">counterReducer</span> = (<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;count/inc&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + action.<span class="property">payload</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;count/dec&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">messageReducer模块</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules/messageReducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">messageReducer</span> = (<span class="params">state = &#123; msg: <span class="string">&quot;&quot;</span> &#125;, action: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;message/change&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: action.<span class="property">payload</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">使用combineReducers合并多个模块</summary><div class="toggle-content"><p>&#x2F;store&#x2F;index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; counterReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./modules/counter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; messageReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./modules/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">  <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer, <span class="comment">// counter 这里是指命名空间，使用在useSelector获取状态的时候</span></span><br><span class="line">    <span class="attr">message</span>: messageReducer, <span class="comment">// message 这里是指命名空间，使用在useSelector获取状态的时候</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></div></details><h2 id="Redux-thunk-中间件"><a href="#Redux-thunk-中间件" class="headerlink" title="Redux-thunk 中间件"></a>Redux-thunk 中间件</h2><p>如果想要在 Redux 中处理异步操作，需要使用到 redux-thunk 中间件，它可以让 dispatch 支持回调函数。</p><details class="toggle" ><summary class="toggle-button" style="">安装依赖</summary><div class="toggle-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux-thunk --save</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">在store入口文件中，通过applyMiddleware方法应用中间件。</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&quot;redux-devtools-extension&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; counterReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./modules/counter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; messageReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./modules/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">  <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">    <span class="attr">message</span>: messageReducer,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="title function_">compose</span>(<span class="title function_">applyMiddleware</span>(thunkMiddleware)) <span class="comment">// 多个中间件使用逗号分隔 applyMiddleware（中间件1，中间件2，。。。）</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">在dispatch中添加回调函数</summary><div class="toggle-content"><p>在原来的 dispatch 中添加回调函数，形参就是原来的 dispacth</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 派发器方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeCountAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">dispatch</span>(<span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的形参就是原来的dispatch派发器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="comment">// 这里的dispatch就是原来的dispatch派发器</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;count/inc&quot;</span>,</span><br><span class="line">        <span class="attr">payload</span>: <span class="number">11</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">优化异步函数的书写</summary><div class="toggle-content"><p>像上面的例子中，通过<strong>changeCountAction</strong> 方法派发的方法，达不到复用的效果，这里可以将实际的异步函数和 reducer 放到同一个模块</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">counterReducer</span> = (<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;count/inc&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + action.<span class="property">payload</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;count/dec&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">counterAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过这里可以返回一个promise，然后在外部通过then来接收</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;count/inc&quot;</span>,</span><br><span class="line">          <span class="attr">payload</span>: <span class="number">11</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;response data&quot;</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在外部的 dispatch 中，可以通过 then 来接收 promise</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">changeCountAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">dispatch</span>(<span class="title function_">counterAction</span>()).<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res&quot;</span>, res); <span class="comment">// ‘response data’</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><h1 id="Redux-Toolkit（RTK）"><a href="#Redux-Toolkit（RTK）" class="headerlink" title="Redux-Toolkit（RTK）"></a>Redux-Toolkit（RTK）</h1><h2 id="Redux-Toolkit"><a href="#Redux-Toolkit" class="headerlink" title="Redux-Toolkit"></a>Redux-Toolkit</h2><p>RTK 在实际项目开发中，使用起来更加得心应手，它的优点在于：</p><ol><li>可以自动和 Redux devTools 结合，不再需要依赖 redux-devtools-extension 模块来实现。</li><li>数据不再通过返回值进行修改，可以像 vue 一样直接修改。</li><li>内置了 redux-thunk 这个中间件，来实现异步操作数据。</li><li>代码风格好，采用选项式编写程序。</li></ol><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-redux @reduxjs/toolkit --save</span><br></pre></td></tr></table></figure><p>全局引入和 react-redux 一样</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><details class="toggle" ><summary class="toggle-button" style="">创建store</summary><div class="toggle-content"><p>从<code>@reduxjs/toolkit</code>包中导入<strong>configureStore</strong>，来创建一个 store，传入一个配置对象作为参数,如果有多个 reducer 使用 reducer 对象包裹。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> counterSlice <span class="keyword">from</span> <span class="string">&quot;./modules/counter&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里的counter是命名空间，与slice里的name不是同一个，这里是在获取state的值的时候使用的，state.counter.count</span></span><br><span class="line">    <span class="attr">counter</span>: counterSlice,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">创建模块</summary><div class="toggle-content"><p>在每个模块中的<code>reducers</code>对象中定义了多个修改状态的函数，会自动同步到模块的 action 对象中，通过导出修改函数，让组件可以同步修改共享数据。</p><p>对象结构是<code>{type:&#39;name/函数名&#39;,playload:函数的参数}</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counterSlice&quot;</span>, <span class="comment">// 触发dispatch的命名空间</span></span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;, <span class="comment">// 初始化共享状态</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">inc</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span> = action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;, <span class="comment">// 编写reducer方法</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; inc &#125; = counterSlice.<span class="property">actions</span>; <span class="comment">// inc是同步修改共享数据的reducer方法，可以在组件中直接使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">组件中使用</summary><div class="toggle-content"><p>在组件中调用使用 RTK 的时候，也是使用<code>useSelector</code>和<code>useDispatch</code>两个 API</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">BackRoot</span> <span class="keyword">from</span> <span class="string">&quot;../components/BackRoot&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state: <span class="built_in">any</span></span>) =&gt;</span> state.<span class="property">counter</span>.<span class="property">count</span>);</span><br><span class="line">  <span class="keyword">const</span> message = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state: <span class="built_in">any</span></span>) =&gt;</span> state.<span class="property">message</span>.<span class="property">msg</span>);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeCountAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;counterSlice/inc&quot;</span>, <span class="comment">// 这里的counterSlice对应的就是切片的name</span></span><br><span class="line">      <span class="attr">payload</span>: <span class="number">6</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;messageSlice/msgChange&quot;</span>, <span class="comment">// 这里的messageSlice对应的就是切片的name</span></span><br><span class="line">      <span class="attr">payload</span>: <span class="string">&quot;React&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="RTK-处理异步函数"><a href="#RTK-处理异步函数" class="headerlink" title="RTK 处理异步函数"></a>RTK 处理异步函数</h2><p>在 RTK 中通过<code>createAsyncThunk</code>方法来进行异步处理，并且还提供了一个配置选项<code>extraReducers</code>来处理额外的 reducer。</p><p>比如在<strong>messageSlice</strong>中定义一个异步函数<strong>messageTestAction</strong>，然后在组件中使用是通过 dispatch(异步方法)这种方式调用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义异步的方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> messageTestAction = <span class="title function_">createAsyncThunk</span>(</span><br><span class="line">  <span class="string">&quot;messageSlice/testAction&quot;</span>, <span class="comment">// 这里是作为dispatch的命名空间</span></span><br><span class="line">  <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;response data&quot;</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在组件中通过 changeMessageAction 的一个自定义方法调用异步函数<code>messageTestAction</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">changeMessageAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">dispatch</span>(<span class="title function_">messageTestAction</span>() <span class="keyword">as</span> <span class="built_in">any</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="comment">// 这里是在组件中同步修改message的值</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;messageSlice/msgChange&quot;</span>,</span><br><span class="line">      <span class="attr">payload</span>: res.<span class="property">payload</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在组件中这样使用，这里的 res 就是异步函数的返回值，格式为以下内容：</p><p>返回值包含了 payload，type 中包含命名空间&#x2F;请求状态，分别有 pendding、fail、fulfilled 三种状态。</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202304201043805.png" alt="image-20230420104338736"></p><p>如果想在异步函数中，同步修改模块中的共享数据内容，可以通过额外的配置项<code>extraReducers</code>来实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中调用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeMessageAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">dispatch</span>(<span class="title function_">messageTestAction</span>());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// messageSlice切片中</span></span><br><span class="line"><span class="keyword">const</span> messageSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;messageSlice&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="attr">uplowerCase</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">msgChange</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">message</span> = state.<span class="property">message</span> + action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extraReducers</span>: <span class="function">(<span class="params">builder</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里是RTK2.0的写法，通过builder的方式去创建异步函数</span></span><br><span class="line">    <span class="comment">// 格式为：builder.addCase(异步函数的命名空间.请求状态《包含了成功、失败、等待三种状态》)</span></span><br><span class="line">    builder.<span class="title function_">addCase</span>(messageTestAction.<span class="property">fulfilled</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">uplowerCase</span> = action.<span class="property">payload</span>; <span class="comment">// 在这里同步修改state的值</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="RTK-数据持久化"><a href="#RTK-数据持久化" class="headerlink" title="RTK 数据持久化"></a>RTK 数据持久化</h2><p>redux-persist 模块是对状态管理进行持久化处理的。</p><p>非常的方便轻松，只需要进行几步配置即可达到持久化存储，内部集成了 localstorage 的实现</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202304201052186.png" alt="image-20230420105245162"></p><details class="toggle" ><summary class="toggle-button" style="">安装依赖</summary><div class="toggle-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux-persist --save</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">使用方式</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在store的入口处按照下面的配置即可</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  persistStore,</span><br><span class="line">  persistReducer,</span><br><span class="line">  <span class="variable constant_">FLUSH</span>,</span><br><span class="line">  <span class="variable constant_">REHYDRATE</span>,</span><br><span class="line">  <span class="variable constant_">PAUSE</span>,</span><br><span class="line">  <span class="variable constant_">PERSIST</span>,</span><br><span class="line">  <span class="variable constant_">PURGE</span>,</span><br><span class="line">  <span class="variable constant_">REGISTER</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;redux-persist&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&quot;redux-persist/lib/storage&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持久化的一些配置</span></span><br><span class="line"><span class="keyword">const</span> persistConfig = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;counterData&quot;</span>, <span class="comment">// 这里的命名，会成为localstorage中的 &quot;persist:counterData&quot;</span></span><br><span class="line">  <span class="attr">version</span>: <span class="number">1</span>,</span><br><span class="line">  storage, <span class="comment">// 这里是值localstorage</span></span><br><span class="line">  <span class="comment">// whitelist: [&quot;counter&quot;], // 字段白名单，意思是只持久化counter这个字段</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="comment">//将需要持久化的切片，传入persistReducer中，第一个参数配置项，第二个参数是切片</span></span><br><span class="line">    <span class="attr">counter</span>: <span class="title function_">persistReducer</span>(persistConfig, counterSlice) <span class="keyword">as</span> <span class="built_in">any</span>,</span><br><span class="line">    <span class="attr">message</span>: messageSlice,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 使用持久化就一定要这么写，按照这么写就行了</span></span><br><span class="line">  <span class="attr">middleware</span>: <span class="function">(<span class="params">getDefaultMiddleware</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">getDefaultMiddleware</span>(&#123;</span><br><span class="line">      <span class="attr">serializableCheck</span>: &#123;</span><br><span class="line">        <span class="attr">ignoredActions</span>: [<span class="variable constant_">FLUSH</span>, <span class="variable constant_">REHYDRATE</span>, <span class="variable constant_">PAUSE</span>, <span class="variable constant_">PERSIST</span>, <span class="variable constant_">PURGE</span>, <span class="variable constant_">REGISTER</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">persistStore</span>(store); <span class="comment">// 这个也要配置上，意思是让持久化和我们的store进行关联</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></div></details>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2023/04/20/TypeScript/"/>
      <url>/2023/04/20/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h1 id="vscode-编译-ts-文件"><a href="#vscode-编译-ts-文件" class="headerlink" title="vscode 编译 ts 文件"></a>vscode 编译 ts 文件</h1><ol><li>在项目中执行 <strong>tsc-init</strong> 命令，生成<strong>tscondig.json</strong>的配置文件。</li><li>在<strong>tsconfig.json</strong>文件中，<strong>outDir</strong>是用来指定编译的 js 文件存放位置。</li><li>vscode 菜单 <strong>&#x3D;&gt;</strong> 终端 <strong>&#x3D;&gt;</strong> 运行任务 <strong>&#x3D;&gt;</strong> TypeScript <strong>&#x3D;&gt;</strong> tsc:监视-tsconfig.json。</li><li>每次修改 ts 文件，都会将 ts 文件自动编译为 js 文件到指定目录下。</li></ol><h1 id="TS-的数据类型"><a href="#TS-的数据类型" class="headerlink" title="TS 的数据类型"></a>TS 的数据类型</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><p>TS 中内置的基础数据类型有：boolean、string、number、undefined、null、symbol、BigInt。</p><p>void 类型：常用于没有返回值的函数的类型。</p><p>any 类型：是所有类型的顶级类型，它会跳过 TS 类型检查机制，可以被其他类型任意分配。</p><p>unknown 类型：也是所有类型的顶级类型，也可以被其他类型任意分配。</p><div class="note primary no-icon flat"><p><strong>undefined</strong> 和 <strong>null</strong> 是所有类型的子类型，在非严格模式下，都可以被其他类型所分配。</p><p>当你需要使用 <strong><code>any</code></strong> 的时候，不妨用 <strong><code>unknown</code></strong> 替代它。</p></div><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义数组的三种方式：<strong>类型[]</strong> 、<strong>数组泛型</strong>、<strong>接口定义数组</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型[]</span></span><br><span class="line"><span class="keyword">const</span> list：<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组泛型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">list</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义数组</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">INumber</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">number</span>; <span class="comment">// 当索引类型为number的时候，值的类型必须是number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="title class_">INumber</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><h2 id="元祖-Tuple"><a href="#元祖-Tuple" class="headerlink" title="元祖 Tuple"></a>元祖 Tuple</h2><p>元祖是数组类型中的一种，表示已知元素和元素类型的数组，元素可以是不同数据类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;bernie&quot;</span>, <span class="number">18</span>];</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">React中的useState就是元祖类型</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其中count为number类型，setCount是函数类型</span></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>使用 TS 简单实现 React 中的 useState 基本功能：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CallBackType</span> = [<span class="built_in">unknown</span>, <span class="function">(<span class="params">newValue: <span class="built_in">unknown</span></span>) =&gt;</span> <span class="built_in">void</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">initValue: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> currentValue = initValue;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setCurrentValue</span>(<span class="params">newValue: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">    currentValue = newValue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">callback</span>: <span class="title class_">CallBackType</span> = [currentValue, setCurrentValue];</span><br><span class="line">  <span class="keyword">return</span> callback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="枚举类型-enum"><a href="#枚举类型-enum" class="headerlink" title="枚举类型 enum"></a>枚举类型 enum</h2><p>使用<strong>enum</strong>关键字定义枚举类型，常用于 <strong>标识状态</strong> 、<strong>定义具体值</strong>的场景，有点 switch case 内味～</p><details class="toggle" ><summary class="toggle-button" style="">字符串枚举</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">  success = <span class="string">&quot;success&quot;</span>,</span><br><span class="line">  warning = <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">  danger = <span class="string">&quot;danger&quot;</span>,</span><br><span class="line">  error = <span class="string">&quot;error&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myStatus = <span class="title class_">Status</span>.<span class="property">success</span>; <span class="comment">// &#x27;success&#x27;</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">数字枚举</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  red,</span><br><span class="line">  blue,</span><br><span class="line">  orange,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> color = <span class="title class_">Color</span>.<span class="property">orange</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div></details><h1 id="TS-的高级类型"><a href="#TS-的高级类型" class="headerlink" title="TS 的高级类型"></a>TS 的高级类型</h1><h2 id="联合类型｜"><a href="#联合类型｜" class="headerlink" title="联合类型｜"></a>联合类型｜</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">foo</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">`0597-22222222`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">bar</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="number">15088888888</span>;</span><br></pre></td></tr></table></figure><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型 &amp;"></a>交叉类型 &amp;</h2><p>多种类型的集合，联合对象将具有所有联合类型的成员。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Man</span> &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TAcross</span> = <span class="title class_">People</span> &amp; <span class="title class_">Man</span>; <span class="comment">// 交叉类型，具备了People和Man的联合类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时TAcross等同于</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TAcross</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>类型断言是指你比 ts 更懂这个数据是什么类型。</p><p>类型断言的两种方式：<strong>使用关键字 as</strong> 、**&lt;类型&gt;值**。</p><p>使用场景：</p><ul><li>将一个联合类型推断为一个类型</li><li>将 any 类型断言成一个具体的类型</li><li>将任意的一个类型断言成 any</li></ul><div class="note danger no-icon flat"><p>类型断言只能够「欺骗」TypeScript 的编译器，无法避免运行时的错误，滥用类型断言可能会导致运行时报错。</p></div><details class="toggle" ><summary class="toggle-button" style="">小技巧</summary><div class="toggle-content"><p>直接使用 const 定义的基础类型常量，是无法重新被赋值的。</p><p>如果用 let 定义的变量，也不能被重新赋值，就可以使用断言的方式： <strong>as const</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;bernie&quot;</span> <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">str = <span class="string">&quot;hhhhh&quot;</span>; <span class="comment">// 不能将类型&#x27;hhhhh&#x27;分配给&#x27;bernie&#x27;</span></span><br></pre></td></tr></table></figure></div></details><h1 id="TS-的内置对象"><a href="#TS-的内置对象" class="headerlink" title="TS 的内置对象"></a>TS 的内置对象</h1><h2 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h2><p>Boolean、Number、String、RegExp、Date、Error…等等。</p><h2 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h2><p>Document、HTMLElement、Event、MouseEvent、NodeList…等等。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">body</span>:<span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="property">body</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">divs</span>:<span class="title class_">NodeList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取某个div的dom，需要使用类型断言，或者加个判断读不到的时候返回null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">div</span>:<span class="title class_">HTMLElement</span>｜<span class="literal">null</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">e:Event</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="定义-Promise-类型"><a href="#定义-Promise-类型" class="headerlink" title="定义 Promise 类型"></a>定义 Promise 类型</h2><p>使用规则是：<strong>Promise<T></strong></p><div class="note danger no-icon flat"><p>如果不指定 Promise 的返回类型，TS 是推导不出 Promise 类型的，默认为 <strong>unknown</strong> 类型。</p></div><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202304211055150.png" alt="image-20230421105541961"></p><details class="toggle" ><summary class="toggle-button" style="">当函数的返回值是Promise，可以给函数的返回值定义类型</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">someRequest</span>(<span class="params"></span>):<span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>) <span class="comment">// 此时这里定义的Promise类型是number</span></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">通过泛型方式给Promise的返回值一个类型</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseCallback</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line"> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h1 id="TS-中的函数"><a href="#TS-中的函数" class="headerlink" title="TS 中的函数"></a>TS 中的函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数的参数、返回值都有类型，不过函数的返回值会根据上下文自动推导函数返回值的类型）</p><details class="toggle" ><summary class="toggle-button" style="">函数声明式</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = (<span class="attr">name</span>:<span class="built_in">string</span>):<span class="function"><span class="params">string</span> =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">匿名函数</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="built_in">string</span>&#123;&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数 ?"></a>可选参数 ?</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name?:<span class="built_in">string</span></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数 &#x3D;"></a>默认参数 &#x3D;</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">name:<span class="built_in">number</span> = <span class="number">20</span></span>) =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>剩余参数有内置的 TS 类型：<code>IArguments</code></p><p>剩余参数是伪数组的集合，伪数组具有 length 属性，没有可迭代属性，所以不能使用数组方法，除非把它用 <strong>Array.from(arr)</strong> 转换为真数组后再使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...args:<span class="built_in">any</span></span>)&#123;</span><br><span class="line"> <span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">IArguments</span> = args</span><br><span class="line"> <span class="title class_">Array</span>.<span class="title function_">from</span>(arr).<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;item&#x27;</span>,item)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">// 会输出结果</span></span><br></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>在 ES5 标准中，同名的函数和变量，后者会覆盖前者。</p><p>但是在 TS 中，同名的函数不会被覆盖，这会使得函数具有重载功能：<strong>同名的两个函数，传入不同类型的参数，达到返回不同类型的结果。</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getBaseInfo</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBaseInfo</span>(<span class="params">age: <span class="built_in">number</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBaseInfo</span>(<span class="params">str: <span class="built_in">any</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我叫&quot;</span> + str;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我今年&quot;</span> + str + <span class="string">&quot;岁&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确写法：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getBaseInfo</span>(<span class="string">&quot;zwd&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getBaseInfo</span>(<span class="number">27</span>));</span><br><span class="line"><span class="comment">// 错误写法: 在函数重载中未找到布尔类型的函数</span></span><br><span class="line"><span class="comment">// console.log(getBaseInfo(true));</span></span><br></pre></td></tr></table></figure><h1 id="TS-的类"><a href="#TS-的类" class="headerlink" title="TS 的类"></a>TS 的类</h1><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>在 ES6 中使用 class 关键字定义类。</p><p>通过 static 关键字可以定义静态属性和静态方法，这种属性和方法可以在类实例化之前被调用。</p><details class="toggle" ><summary class="toggle-button" style="">static关键字注意点</summary><div class="toggle-content"><p>但是静态方法不可以访问类的其他类型的属性，只能访问静态属性，比如一下 print 方法不能访问 age 属性，但是可以访问 action 属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">action</span>: <span class="built_in">string</span> = <span class="string">&quot;run&quot;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实例化的时候被调用&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 会报错，静态方法不支持访问类的属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">action</span>) <span class="comment">// &#x27;run&#x27;，静态方法可以访问静态属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类的静态方法&#x27;</span>); <span class="comment">// 正常打印</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">print</span>(); <span class="comment">// 在实例化之前，可以被直接调用。</span></span><br></pre></td></tr></table></figure></div></details><h2 id="类的属性修饰符"><a href="#类的属性修饰符" class="headerlink" title="类的属性修饰符"></a>类的属性修饰符</h2><p>类的属性和方法通过修饰符来约束访问和使用，三种修饰符：<code>public</code> 、<code>protected</code>、<code>private</code>。</p><p><strong>public</strong>不用多说，使用 public 定义的属性和方法，在任意位置都可以使用。</p><p><strong>protected</strong>：类内部、子类可以访问，外部不可以访问。</p><p><strong>private</strong>：类的内部可以访问，子类和外部都不可以被访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="title class_">String</span>; <span class="comment">// 默认public公有属性</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">12</span>; <span class="comment">// 保护类型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">height</span>: <span class="built_in">number</span> = <span class="number">188</span>; <span class="comment">// 私有类型</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">watchAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this.age&quot;</span>, <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bernie = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zwd&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bernie.<span class="property">age</span>); <span class="comment">// error！！ 父类的age是保护类型，外部不可访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bernie.<span class="property">height</span>); <span class="comment">// error！！ 父类的height是私有类型，外部不可访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bernie.<span class="property">name</span>); <span class="comment">// 公有类型可以访问</span></span><br></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>类和类之间可以通过 extend 来实现继承，父类被称为基类或者超类。</p><p>类的继承包含了两个关键字：<code>constructor</code> 和 <code>super</code></p><ul><li>构造函数 constructor 会在类实例化的时候被调用。</li><li>super 是调用父类的构造函数，所以派生类一定要调用 super 方法。</li><li>父类和子类如果有同名的属性和方法，会就近原则，执行子类里的方法。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我的名字是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Man类继承Person类，会有父类一样的属性和方法。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name); <span class="comment">// super代表：调用父类的构造函数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Man&#x27;run&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&quot;bernie&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">name</span>); <span class="comment">// 我的名字是bernie</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="title function_">run</span>()); <span class="comment">// Man&#x27;run</span></span><br></pre></td></tr></table></figure><h2 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h2><p>多态属于继承的一部分。</p><p>意思是：<strong>父类定义一个方法，但是父类不去实现它，让继承它的子类去实现，每一个子类都会有不同的表现。</strong></p><p>简而言之：<strong>父类和子类有同名的方法，就近原则，执行子类里的同名方法。</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`基类的方法`</span>); <span class="comment">// 基类定义的方法不实现</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;吃猫粮&quot;</span>); <span class="comment">// 重载基类的方法去实现</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;醋咪&quot;</span>);</span><br><span class="line">cat.<span class="title function_">eat</span>(); <span class="comment">// 醋咪吃猫粮</span></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>使用关键字 <code>abstract</code> 定义抽象类，抽象类的子类必须遵循父类的标准。</p><p>简而言之：<strong>抽象类里的属性和方法，派生类必须重写相同的属性和方法。</strong></p><p>使用场景：定义一个父类作为类的标准，让派生类都必须按照这个父类的标准去重写属性或者方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is running`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zhumi = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;zhumi&quot;</span>, <span class="number">40</span>);</span><br><span class="line">zhumi.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure><h1 id="TS-的接口"><a href="#TS-的接口" class="headerlink" title="TS 的接口"></a>TS 的接口</h1><p>使用关键字 <code>interface</code> 定义接口，接口是一种行为约束，约束数据的结构必须符合这个接口的格式。</p><p>定义接口的时候，可以使用大写 I 开头+变量名，例如：ILable、IProps…等。</p><h2 id="对象接口"><a href="#对象接口" class="headerlink" title="对象接口"></a>对象接口</h2><p>定义一个接口来约束对象的属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IForm</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">form</span>: <span class="title class_">IForm</span> = &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="string">&quot;标题内容&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">对象字面量会绕过属性检查</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FullName</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">secondName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">obj: FullName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>, <span class="comment">// 虽然接口不包含对age属性的约束，但是对象字面量obj会绕过属性检查</span></span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">secondName</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">printName</span>(obj); <span class="comment">// 并不会报错，因为obj符合接口FullName中的firstName属性和secondName属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是以下方式，则会进行属性检查</span></span><br><span class="line"><span class="title function_">printName</span>(&#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">secondName</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">&#125;) <span class="comment">// 会报错！！ 接口中没有age属性</span></span><br></pre></td></tr></table></figure></div></details><h2 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h2><p>定义一个接口来约束函数的表现（传参、返回值），格式为**(参数规则):函数返回值规则**：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IEntry</span> &#123;</span><br><span class="line">  (<span class="attr">key</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">md5</span>: <span class="title class_">IEntry</span> = <span class="function">(<span class="params">key: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> key + <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类接口"><a href="#类接口" class="headerlink" title="类接口"></a>类接口</h2><p>使用关键字 <code>implements</code> 来定义类的接口，有点像抽象类的概念。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> animal &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">sport</span>(<span class="attr">str</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">implements</span> animal &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sport</span>(<span class="params"><span class="keyword">type</span>:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">type</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> duck = <span class="keyword">new</span> <span class="title class_">Duck</span>(<span class="string">&#x27;鸭&#x27;</span>)</span><br><span class="line">duck.<span class="title function_">sport</span>(<span class="string">&#x27;跑步&#x27;</span>)</span><br><span class="line">duck.<span class="title function_">sport</span>(<span class="number">123</span>) <span class="comment">// error !! 不符合接口sport方法参数为string的类型</span></span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">类接口可以使用interface和类型别名type来定义</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PartialPointX</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口或类型别名都可以</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPointX</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> <span class="keyword">extends</span> <span class="title class_">PartialPointX</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">但是不能使用类型别名type的联合类型：</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPoint</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>, &#125; | &#123; <span class="attr">y</span>: <span class="built_in">number</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类不能使用类型别名的联合类型来拓展</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomePartialPoint</span> <span class="keyword">implements</span> <span class="title class_">PartialPoint</span> &#123; <span class="comment">// Error!!</span></span><br><span class="line">  x = <span class="number">1</span>;</span><br><span class="line">  y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="接口的索引签名"><a href="#接口的索引签名" class="headerlink" title="接口的索引签名"></a>接口的索引签名</h2><p>有时候希望某个接口包含了必选和可选属性之外的任意属性，可以使用索引签名。</p><div class="note warning no-icon flat"><p>一旦使用了接口的索引签名，确定属性和可选属性都必须是索引签名的子集</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">string</span>;</span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125; <span class="comment">// name 和 age都必须符合索引签名，属性是strng：值是可以分配给any的类型（string、number等）</span></span><br></pre></td></tr></table></figure><h2 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h2><p>接口可以和类一样，实现继承，也是用 <code>extends</code> 关键字：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PartialPointX</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> <span class="keyword">extends</span> <span class="title class_">PartialPointX</span> &#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="同名接口"><a href="#同名接口" class="headerlink" title="同名接口"></a>同名接口</h2><p>同名的接口可以合并为一个接口，并且进行类型检查，类似于接口拓展，接口继承：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IA &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> IA &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo</span>: <span class="variable constant_">IA</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;bernie&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="可选｜只读属性"><a href="#可选｜只读属性" class="headerlink" title="可选｜只读属性"></a>可选｜只读属性</h2><p>接口的属性可以定义为 <code>可选、只读</code>：</p><p>可选属性通过 <strong>?</strong> 来定义。</p><p>只读属性通过关键字 <code>readonly</code> 定义、或者使用 TS 自带的 <code>ReadonlyArray&lt;T&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPoint</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>; <span class="comment">// 可选属性</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span>; <span class="comment">// 只读属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要一组只读属性的数字元素的数组：</p><details class="toggle" ><summary class="toggle-button" style="">方式一：简单只读数据</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 数组只读属性</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">方式二：复杂点的数据，通过泛型传入一个interface、type来实现只读</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式二：复杂点的数据，通过泛型传入一个interface、type来实现只读</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TArray</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="title class_">TArray</span>&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;bernie&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 此时arr数组项不可被修改</span></span><br></pre></td></tr></table></figure></div></details><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>和接口的功能一样，类型别名也是约束数据的结构用的，使用关键字 type 定义：<code>type 类型别名=约束规则</code></p><div class="note warning no-icon flat"><p>和接口不一样的是，类型别名可以用于 原始类型(基本数据类型)、引用类型、联合类型、元祖和指定值的别名。</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义对象别名</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数别名</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo</span>: <span class="title class_">Foo</span> = <span class="function">(<span class="params">nickname: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> nickname;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义基本数据类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义联合类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = <span class="title class_">Name</span> | <span class="title class_">Age</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义元祖类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Data</span> = [<span class="built_in">number</span>,<span class="built_in">string</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义值的别名</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Value</span> = <span class="string">&#x27;bernie&#x27;</span> | <span class="string">&#x27;zwd&#x27;</span> <span class="comment">// 实现必须是这两个值</span></span><br></pre></td></tr></table></figure><p>类型别名也可以拓展，使用 &amp; 符号</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointX</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = <span class="title class_">PointX</span> &amp; &#123; <span class="attr">y</span>: <span class="built_in">number</span> &#125;; <span class="comment">// Point必须符合&#123;x：number、y：number&#125;</span></span><br></pre></td></tr></table></figure><h2 id="类型别名和接口的区别？"><a href="#类型别名和接口的区别？" class="headerlink" title="类型别名和接口的区别？"></a>类型别名和接口的区别？</h2><details class="toggle" ><summary class="toggle-button" style="">相同点</summary><div class="toggle-content"><p>接口和别名都可以继承，接口和接口之间使用 extends，别名和别名之间使用&amp;符号，接口和别名之间使用&amp;符号</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IMy</span> = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">info: IMy &amp; IPerson</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">不同点</summary><div class="toggle-content"><p>接口可以同名，接口同名会自动拓展，别名不可以同名。</p><p>接口不可以使用操作符，别名可以使用操作符(typeof、keyof 等)。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="keyword">typeof</span> obj</span><br><span class="line"><span class="keyword">type</span> B = keyof obj</span><br></pre></td></tr></table></figure></div></details><h1 id="TS-的泛型"><a href="#TS-的泛型" class="headerlink" title="TS 的泛型"></a>TS 的泛型</h1><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><p>让一个函数有更好的拓展性，可以给函数定义泛型，语法：<code>函数名&lt;参数名&gt;():返回值&#123;&#125;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title class_">AddNumberFn</span>&lt;T&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AddNumberFn函数可以传入一个类型T，让AddNumberFn函数的参数a和b都符合这个T的类型，然后函数的返回值是一个数组，数组中每个项都是T类型</span></span><br><span class="line"><span class="title class_">AddNumberFn</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title class_">AddNumberFn</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;bernie&quot;</span>, <span class="string">&quot;zhong&quot;</span>);</span><br></pre></td></tr></table></figure><p>也可以使用不同的泛型参数名，只要数量和位置上一一对应即可。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title class_">PersonInfo</span>&lt;N, A&gt;(<span class="attr">name</span>: N, <span class="attr">age</span>: A) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Info</span>: &#123; <span class="attr">name</span>: N; <span class="attr">age</span>: A &#125; = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Info</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>定义接口的时候，也可以通过泛型对接口实现复用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">args</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">IPerson</span>&lt;<span class="built_in">number</span>&gt; = <span class="function">(<span class="params">age: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类的声明和泛型函数类似：<code>类名&lt;泛型参数&gt;</code></p><p>实例化类的时候：<code>new 类名&lt;泛型参数&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个泛型类，查找传入的数字集合的最小值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">minNum</span>&lt;T&gt;&#123;</span><br><span class="line">  <span class="attr">list</span>:T[]</span><br><span class="line">  <span class="title function_">add</span>(<span class="attr">item</span>:T):<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">find</span>():T&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型工具链"><a href="#泛型工具链" class="headerlink" title="泛型工具链"></a>泛型工具链</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>获取变量的类型</p><details class="toggle" ><summary class="toggle-button" style="">变量声明</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量类型</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&quot;bernie&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TAge</span> = <span class="keyword">typeof</span> age; <span class="comment">// 此时TAge =&gt; &#x27;bernie&#x27;，这里的TAge只能是&#x27;bernie&#x27;</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">对象类型</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;bernie&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">vip</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TPerson</span> = <span class="keyword">typeof</span> person;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时 TPerson 类似于以下接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">vip</span>: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">函数重载类型</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数重载的类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBaseInfo</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBaseInfo</span>(<span class="params">age: <span class="built_in">number</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBaseInfo</span>(<span class="params">str: <span class="built_in">any</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我叫&quot;</span> + str;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我今年&quot;</span> + str + <span class="string">&quot;岁&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TFunc</span> = <span class="keyword">typeof</span> getBaseInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时TFunc类似于以下接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TFunc</span> &#123;</span><br><span class="line">  (<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">  (<span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h2><p>获取一个对象接口中所有的 key 值，使用 keyof 产生的是**联合类型(即枚举类型)**：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IFoo</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TKeys</span> = keyof <span class="title class_">IFoo</span>; <span class="comment">// TKeys的类型为联合类型 &#x27;name&#x27;|&#x27;age&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">n</span>: <span class="title class_">TKeys</span> = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">TKeys</span> = <span class="string">&quot;age&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><p>遍历枚举类型，使用枚举类型遍历：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TStr</span> = <span class="string">&quot;a&quot;</span> | <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TObject</span> = &#123;</span><br><span class="line">  [p <span class="keyword">in</span> <span class="title class_">TStr</span>]:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时 TObject 类似于以下接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TObject</span> &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">b</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><p><code>Partial&lt;T&gt;</code>的作用是将某个类型里的属性全部变为可选属性：</p><p>这里是<code>Partial&lt;T&gt;</code>的源码解读：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">interest</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;</span><br></pre></td></tr></table></figure><p>以上代码解读：</p><p>首先使用对象<code>keyof T</code>，遍历 T 后，读取到 T 的所有属性，转换为枚举类型 -&gt; <code>&#39;name&#39; | &#39;age&#39; | &#39;interest&#39;</code>。</p><p>然后<code>[P in &#39;name&#39;|&#39;age&#39;|&#39;interest&#39;]</code>，遍历枚举类型，P 遍历后对应的是<code>name age interest</code>。</p><p>结合起来的<code>[P in keyof T]?：</code>后产生的是<code>name?: age?: interest?:</code>。</p><p>最后通过 T[P]取得对应的属性值的类型进行重新生成：<code>T[P]即 Person[name]对应的是string</code>。</p><p>以此类推，最后将 Person 转换成 <code>&#123;name?: string age?:string  interest?:string&#125;</code>。</p><h2 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h2><p><code>Required&lt;T&gt;</code> 的作用刚好和 Partial 相反，将所有可选属性变成必选属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IRead</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  interest?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T  = <span class="title class_">Required</span>&lt;<span class="title class_">IRead</span>&gt;</span><br><span class="line"><span class="function"><span class="params">T</span> =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="attr">interest</span>: <span class="built_in">string</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>通过 extends 可以约束泛型参数，比如一个泛型函数，传入的泛型参数 T，有时候想对这个 T 进行拓展或者约束：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">interest</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">ExtendsFn</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Person</span>&gt;(<span class="attr">arg</span>: T) &#123;</span><br><span class="line">  <span class="comment">// arg 包含了传入的T类型，也包含了Person接口约束的属性</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg&quot;</span>, arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">interest</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ExtendsFn</span>&lt;<span class="title class_">Test</span>&gt;(&#123; <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;ikun&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">interest</span>: <span class="string">&quot;篮球&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// Test 必须符合接口Person和传入的T的类型</span></span><br></pre></td></tr></table></figure><h2 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h2><p>infer 相当于是一个占位符，如果使用 infer U ，则会产生一个 U 的类型，方便引用这个 U 变量或者是返回变量。</p><div class="note danger no-icon flat"><p>infer 只能在条件类型的 extends 字句中使用，并且 infer 声明的类型变量只在条件 true 分支中使用</p></div><p>举个例子：定义一个类型，如果是数组类型就返回数组元素的类型，否则传入什么类型就返回什么类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用infer的情况下，想要实现这个需求</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TInfer</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; ? T[<span class="built_in">number</span>] : T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用infer的情况</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TInfer</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer U&gt; ? U : T</span><br></pre></td></tr></table></figure><p>更多例子：</p><details class="toggle" ><summary class="toggle-button" style="">利用下表获取数组对象中每一个对象的类型</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Animals</span> = <span class="title class_">Array</span>&lt;&#123; <span class="attr">type</span>: <span class="built_in">string</span>, <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = <span class="title class_">Animals</span>[<span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animals</span> = <span class="title class_">Array</span>&lt;&#123; <span class="attr">type</span>: <span class="built_in">string</span>, <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = <span class="title class_">Animals</span> <span class="keyword">extends</span> (infer T)[] ? T : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">推断具体数组或者元祖第一个元素的类型</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">InferFirst</span>&lt;T <span class="keyword">extends</span> <span class="built_in">unknown</span>[]&gt; = T <span class="keyword">extends</span> [infer F, ...infer _] ? F : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TArrFirst</span> = <span class="title class_">InferFirst</span>&lt;[<span class="literal">true</span>, <span class="number">123</span>, <span class="string">&quot;abc&quot;</span>]&gt;;</span><br><span class="line"><span class="comment">// 此时type TArrFirst 是 true</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">推断函数类型的参数</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">InferParams</span>&lt;T&gt; = T <span class="keyword">extends</span> (...<span class="attr">ages</span>: infer P) =&gt; <span class="built_in">any</span> ? P : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TFn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TParams</span> = <span class="title class_">InferParams</span>&lt;<span class="title class_">TFn</span>&gt;; <span class="comment">// [number, string]</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">推断Promise成功值的类型</summary><div class="toggle-content"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">InferPromise</span>&lt;T&gt; =  T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer U&gt; ? U : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TPromise</span> = <span class="title class_">InferPromise</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;; <span class="comment">// string</span></span><br></pre></td></tr></table></figure></div></details><h2 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h2><p>此工具是在 T 类型中，去除 T 类型和 U 类型的交集，返回剩余的部分。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TTest1</span> = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TTest2</span> = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="title class_">TTest1</span>, <span class="title class_">TTest2</span>&gt;; <span class="comment">// &#x27;b&#x27; | &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><p>将某个接口中的部分属性挑出来，返回一个新的类型。</p><p>举个例子：提取某个接口中的部分属性，将它转换为可选属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">isVip</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">fat</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">car</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TPChoose</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Person</span>, <span class="string">&quot;id&quot;</span> | <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TMan</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">TPChoose</span>&gt;;</span><br><span class="line"><span class="comment">// 此时TMan类似于接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TMan</span> &#123;</span><br><span class="line"> id?:<span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line"> name?:<span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line"> age?:<span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h2><p>Omit 和 Pick 作用相反，是以一个类型为基础，剔除某些属性，返回一个新的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">isVip</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TPChoose</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt;;</span><br><span class="line"><span class="comment">//此时TPChoose类似于接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TPChoose</span> &#123;</span><br><span class="line"> <span class="attr">id</span>:<span class="built_in">number</span></span><br><span class="line"> <span class="attr">isVip</span>:<span class="built_in">boolean</span></span><br><span class="line"> <span class="attr">height</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h2><p>用来定义对象的 key 和 value 类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">vip</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TTest</span> = <span class="title class_">Record</span>&lt;keyof <span class="title class_">IPerson</span>, <span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><h1 id="声明文件-d-ts"><a href="#声明文件-d-ts" class="headerlink" title="声明文件 d.ts"></a>声明文件 d.ts</h1><p>d.ts 这类文件：只包含类型集合的类型声明，仅用于提供类型信息。</p><p>使用关键字 declare 创建声明类型，如果是 type 和 interface 定义的类型，可以省略 declare 关键字：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TDirenction</span> = <span class="string">&quot;up&quot;</span> | <span class="string">&quot;down&quot;</span>;  <span class="comment">// 可以省略declare关键字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125; <span class="comment">// 可以省略declare关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// *.ts文件中可以直接使用</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">direction</span>: <span class="title class_">TDirenction</span> = <span class="string">&quot;up&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">info</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;bernie&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">123</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* 基本选项 */</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定 ECMAScript 目标版本: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES6&#x27;/&#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, or &#x27;ESNEXT&#x27;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定使用模块: &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27; or &#x27;es2015&#x27;</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 指定要包含在编译中的库文件</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许编译 javascript 文件</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 报告 javascript 文件中的错误</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定 jsx 代码的生成: &#x27;preserve&#x27;, &#x27;react-native&#x27;, or &#x27;react&#x27;</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 生成相应的 &#x27;.d.ts&#x27; 文件</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 生成相应的 &#x27;.map&#x27; 文件</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 将输出文件合并为一个文件</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定输出目录</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 用来控制输出目录结构 --outDir.</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 删除编译后的所有的注释</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不生成输出文件</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 从 tslib 导入辅助工具函数</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 将每个文件做为单独的模块 （与 &#x27;ts.transpileModule&#x27; 类似）.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 严格的类型检查选项 */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 启用所有严格类型检查选项</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class="line">    <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 启用严格的 null 检查</span></span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span><br><span class="line">    <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 以严格模式检查每个模块，并在每个文件里加入 &#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 额外的检查 */</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 有未使用的变量时，抛出错误</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 有未使用的参数时，抛出错误</span></span><br><span class="line">    <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模块解析选项 */</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span> <span class="comment">// 选择模块解析策略： &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; (TypeScript pre-1.6)</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 用于解析非相对模块名称的基目录</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 模块名到基于 baseUrl 的路径映射的列表</span></span><br><span class="line">    <span class="attr">&quot;rootDirs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span><br><span class="line">    <span class="attr">&quot;typeRoots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 包含类型声明的文件列表</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 需要包含的类型声明文件名列表</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="attr">&quot;sourceRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span><br><span class="line">    <span class="attr">&quot;mapRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span><br><span class="line">    <span class="attr">&quot;inlineSourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span><br><span class="line">    <span class="attr">&quot;inlineSources&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 其他选项 */</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 启用装饰器</span></span><br><span class="line">    <span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 为装饰器提供元数据的支持</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 指定一个排除列表（include的反向操作）</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;demo.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;demo.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2023/04/15/React/"/>
      <url>/2023/04/15/React/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-语法补充"><a href="#JavaScript-语法补充" class="headerlink" title="JavaScript 语法补充"></a>JavaScript 语法补充</h1><h3 id="类的定义、继承"><a href="#类的定义、继承" class="headerlink" title="类的定义、继承"></a>类的定义、继承</h3><details class="toggle" ><summary class="toggle-button" style="">ES5定义类</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">namem, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">running</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;bernie&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>) <span class="comment">// bernie</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">age</span>) <span class="comment">// 18</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">running</span>() <span class="comment">// 我是bernie，今年18岁</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">ES6定义类</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Person &#123; name: &quot;bernie&quot;, age: 10&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;bernie&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>) <span class="comment">// bernie</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">age</span>) <span class="comment">// 18</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">running</span>() <span class="comment">// 我是bernie，今年18岁</span></span><br></pre></td></tr></table></figure><p>关于this指向</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="title class_">Person</span>.<span class="property">running</span>;</span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.这里调用func方法，进而调用了Person类中的running方法</span></span><br><span class="line"><span class="comment"> * 2.由于 func() 调用者是顶级window对象(window.func())</span></span><br><span class="line"><span class="comment"> * 3.Person类中的running方法被执行，打印的this是undefined</span></span><br><span class="line"><span class="comment"> * 4.所以在running方法中打印的this.name和this.age会报错</span></span><br><span class="line"><span class="comment"> * 5.如果要让func的this指向另外一个对象，可以使用call、bind、apply</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> personInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">45</span>,</span><br><span class="line">&#125;;</span><br><span class="line">func.<span class="title function_">call</span>(personInfo);</span><br><span class="line">func.<span class="title function_">bind</span>(personInfo)(); <span class="comment">// bind返回一个函数，需要调用才能执行</span></span><br><span class="line">func.<span class="title function_">apply</span>(personInfo);</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">ES6类的继承</summary><div class="toggle-content"><p><strong>constructor</strong>方法会在类创建的时候立即执行。<br>子类如果继承父类必须调用<strong>super</strong>方法，并且可以传入需要初始化的值。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, title</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;kobe&quot;</span>, <span class="number">45</span>, <span class="string">&quot;曼巴&quot;</span>);</span><br><span class="line">teacher.<span class="title function_">running</span>();</span><br></pre></td></tr></table></figure></div></details><h2 id="JSX-核心语法"><a href="#JSX-核心语法" class="headerlink" title="JSX 核心语法"></a>JSX 核心语法</h2><p>既不是 html 也不是字符串，JSX 是通过 createElement 生成的 dom 树结构。</p><p>JSX 只能有一个根标签，可以使用<code>&lt;&gt; &lt;/&gt;</code>或者**&lt;*Fragment*&gt;&lt;*&#x2F;Fragment*&gt;**来占位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释里面不能嵌套注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 我是一段注释 */</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染数据"><a href="#渲染数据" class="headerlink" title="渲染数据"></a>渲染数据</h3><p>JSX 中通过花括号<code>&#123;&#125;</code>来插入数据，相当于 Vue 中的双花括号<code>&#123;&#123;&#125;&#125;</code>插值语法。</p><p>渲染的内容： string、number、array、表达式。</p><p>会被忽略的内容：false、null、undefined。</p><p>JSX 中可以插入表达式，表达式代表有返回值的代码，例如：运算符表达式、三元表达式、函数调用、短路运算&amp;&amp;等。</p><h3 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h3><p>给元素绑定属性的时候，需要使用花括号<code>&#123;&#125;</code>。</p><p>在写内联样式的时候，需要传入一个对象，且对象属性名要驼峰命名，例如：fontSize、backgroundColor…</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> &quot;<span class="attr">16px</span>&quot;, <span class="attr">backgroundColor:</span> &quot;<span class="attr">red</span>&quot; &#125;&#125;&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定多个 className 可以使用字符串拼接的方式，要注意空格（title和active之间要保持空格才能生效）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>&quot;<span class="attr">box</span> <span class="attr">title</span> &quot; + (<span class="attr">active</span> ? &quot;<span class="attr">active</span>&quot; <span class="attr">:</span> &quot;&quot;)&#125;&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>条件渲染可以使用：<strong>if…else</strong> 、<strong>三元运算符</strong> 、<strong>短路运算（要注意左侧条件不能为0，否则会渲染0）</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isLogin ? <span class="tag">&lt;<span class="name">AdminPanel</span> /&gt;</span> : <span class="tag">&lt;<span class="name">LoginForm</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;isLogin &amp;&amp; <span class="tag">&lt;<span class="name">AdminPanel</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>通过数组方法 map、filter 等有返回值的方式进行数据渲染。</p><p>在进行列表渲染时要确保给每一项都绑定 key 属性，用于虚拟 DOM 的 diff 算法对比。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><p>在函数组件中绑定事件，通过 onClick 属性传入一个事件方法，<mark class="hl-label red">注意：事件不需要调用，直接当作一个props值传给onClick</mark> </p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;--事件被触发--&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>触发事件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要给事件传递参数，需要使用箭头函数的方式</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params">msg: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(msg);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(&quot;hello react&quot;)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要同时给事件传递<code>事件对象</code>和<code>自定义参数</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MouseEvent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params">event: MouseEvent&lt;HTMLButtonElement&gt;, msg: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件对象&quot;</span>, event);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;自定义参数&quot;</span>, msg);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;(event)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          handleClick(event, &quot;hello react&quot;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-核心内容"><a href="#React-核心内容" class="headerlink" title="React 核心内容"></a>React 核心内容</h2><h3 id="React-的两种组件"><a href="#React-的两种组件" class="headerlink" title="React 的两种组件"></a>React 的两种组件</h3><p>React 应用程序是一个一个组件构成，组件可以小到一个按钮，也可以大到整个页面。</p><p>React 允许你创建可重复使用的组件，每一个 UI 都是一个组件，组件定义一次，可以在多个地方重复调用。</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">函数组件</button><button type="button" class="tab " data-href="-2">类组件</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>函数组件就是 JavaScript 函数，但它必须符合两个规范：</p><ol><li>函数名必须以大写字母开头</li><li>组件必须返回 JSX 或者 TSX 格式的内容</li><li>返回的内容必须只有一个根标签</li></ol><div class="note info no-icon flat"><p>React 渲染 JSX 的过程中，遇到小写的标签<code>&lt;section /&gt;</code>就知道这是在渲染 HTML 标签，当遇到大写的标签<code>&lt;Profile /&gt;</code>就知道它渲染的是一个组件</p></div><p>React18 中官方推荐，<mark class="hl-label red">不要在一个组件中定义另外一个组件</mark> ，更好的做法是将子组件抽离出来，如果想要实现组件间数据的共享，可以通过<code>Props</code>的形式传递。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Gallery</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 🔴 Never define a component inside another component!</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐做法 ✅ Declare components at the top level</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 子组件内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Gallery</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Profile</span> /&gt;</span></span> <span class="comment">// 父组件调用</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>class 类组件继承至 React 中<code>Component</code>类，在类组件实例的时候必须要调用<code>super</code>，内部通过<code>render()</code>方法渲染组件内容。</p><p>类组件中的构造函数<code>constructor</code>只做两件事：</p><ol><li>通过 this.state 赋值对象的形式，来初始化类组件 state 对象。</li><li>为事件显示绑定 this 例如：this.btnClick &#x3D; this.btnClick.bind(this)。</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="点标记语法"><a href="#点标记语法" class="headerlink" title="点标记语法"></a>点标记语法</h3><p>无论是函数组件还是类组件，都可以使用点标记语法操作组件。</p><p>这种写法很适合复杂组件，可以拓展子组件进行组合使用，更加具备语义划操作。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Imooc</span> = &#123;</span><br><span class="line">  <span class="title class_">Welcome</span>: <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello Welcome<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">Head</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello Head<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* 这里通过点语法使用组件 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Imooc.Welcome</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Imooc.Head</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="类组件的生命周期"><a href="#类组件的生命周期" class="headerlink" title="类组件的生命周期"></a>类组件的生命周期</h3><p><strong>componentDidMount：</strong>组件挂载 DOM 后立即调用，一般使用场景有：</p><ol><li>操作 DOM</li><li>发送网络请求</li><li>在此处添加一些订阅，然后在 componentWillUnmount 取消订阅</li></ol><p><strong>componentDidUpdate：</strong> 会在 DOM 更新的时候立即调用，但首次渲染不会执行：</p><ol><li>当组件更新后，可以在此处对 DOM 进行操作</li></ol><p><strong>componentWillUnmount：</strong> 会在组件卸载和销毁之前调用：</p><ol><li>清除定时器，取消网络请求</li></ol><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="组件间的嵌套"><a href="#组件间的嵌套" class="headerlink" title="组件间的嵌套"></a>组件间的嵌套</h4><ol><li>组件名字统一首字母大写</li><li>使用组件可以使用单标签</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Main<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Productcom</span>&gt;</span><span class="tag">&lt;/<span class="name">Productcom</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Footer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Footer<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Main</span>&gt;</span><span class="tag">&lt;/<span class="name">Main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="父传子通信"><a href="#父传子通信" class="headerlink" title="父传子通信"></a>父传子通信</h4><p>父组件：通过<code>属性名=属性值</code>的方式向子组件传递数据</p><p>子组件：通过<code>props</code>来接收数据</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">函数组件</button><button type="button" class="tab " data-href="-2">类组件</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="variable constant_">FC</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Childrencom</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">props: IProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age, height &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>函数子组件展示数据：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;name + &quot; &quot; + age + &quot; &quot; + height&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Parentcom</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Childrencom</span> <span class="attr">name</span>=<span class="string">&quot;zwd&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">height</span>=<span class="string">&quot;175&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">  <span class="attr">age</span>: number</span><br><span class="line">  <span class="attr">height</span>: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Childrencom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props: IProps</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age, height &#125; = <span class="variable language_">this</span>.<span class="property">props</span> <span class="keyword">as</span> <span class="title class_">IProps</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>类子组件展示数据：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;name + &#x27; &#x27; + age + &#x27; &#x27; + height&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Childrencom</span> <span class="attr">name</span>=<span class="string">&quot;zwd&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">height</span>=<span class="string">&quot;175&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h4 id="子传父通信"><a href="#子传父通信" class="headerlink" title="子传父通信"></a>子传父通信</h4><p>将父组件的方法传递给子组件，子组件通过<code>props</code>获取到父组件的方法后，执行该方法</p><p><img src="https://s2.loli.net/2022/01/12/JpRP7CQcWLfIk15.gif" alt="image-20220112104342657"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">FC</span>, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">HTMLAttributes</span>&lt;<span class="title class_">HTMLElement</span>&gt; &#123;</span><br><span class="line">  <span class="attr">setCount</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildCompont</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">props: IProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; setCount &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setCount&#125;</span>&gt;</span>子组件：+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildCompont</span> <span class="attr">setCount</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;<span class="tag">&lt;/<span class="name">ChildCompont</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="祖孙组件通信"><a href="#祖孙组件通信" class="headerlink" title="祖孙组件通信"></a>祖孙组件通信</h4><p>祖孙之间的通信分好几种：<code>context</code>、<code>redux</code>、<code>EventBus事件巴士</code>等等。</p><p>在函数组件中，更多时候使用<code>useContext</code>这个钩子来实现跨组件通信。</p><p>第三方库中，也增加了<code>redux-toolkit</code>这个第三方集成的跨组件通信库。</p><h4 id="组件传值校验"><a href="#组件传值校验" class="headerlink" title="组件传值校验"></a>组件传值校验</h4><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">函数组件</button><button type="button" class="tab " data-href="-2">类组件</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>使用函数组件+TypeScript 的时候，可以通过 ts 很好的对 Props 进行校验：</p><p>因为 props 中含有 children 的元素，所以可以让 props 继承自<code>React.HTMLAttributes&lt;HTMLDivElement&gt;</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Childrencom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props: IProps</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age, height &#125; = <span class="variable language_">this</span>.<span class="property">props</span> <span class="keyword">as</span> <span class="title class_">IProps</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>类子组件展示数据：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;name + &quot; &quot; + age + &quot; &quot; + height&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Childrencom</span> <span class="attr">name</span>=<span class="string">&quot;zwd&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">height</span>=<span class="string">&quot;175&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>在不使用 TypeScript 的情况下，可以通过第三方库<code>prop-types</code>来实现校验 Props:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prop-types --save</span><br></pre></td></tr></table></figure><p>在子组件中使用</p><ol><li>引入 ProTypes：<code>import ProTypes from &#39;prop-types</code></li><li>添加校验规则：<code>组件名.propTypes</code></li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ProTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Childrencom</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; name, age, height, names = [] &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>...<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件传值校验</span></span><br><span class="line"><span class="title class_">Childrencom</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">ProTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">// 必传</span></span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">ProTypes</span>.<span class="property">number</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="title class_">ProTypes</span>.<span class="property">number</span>,</span><br><span class="line">  <span class="attr">names</span>: <span class="title class_">ProTypes</span>.<span class="property">array</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件传递</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parentcom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Childrencom</span> <span class="attr">name</span>=<span class="string">&quot;zwd&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">height</span>=<span class="string">&#123;175&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="React-中的插槽"><a href="#React-中的插槽" class="headerlink" title="React 中的插槽"></a>React 中的插槽</h3><h4 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容</h4><p>通过<code>props.children</code>进行内容分发，相当于是 Vue 中的<code>&lt;slot /&gt;</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">FC</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123;&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NavBar</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">props: IProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">NavBar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>默认插槽<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>通过<code>props.属性名</code>这种方式实现具名插槽</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">FC</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123;</span><br><span class="line">  <span class="attr">center</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NavBar</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">props: IProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props&quot;</span>, props);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;nav_bar_box&quot;</span>&gt;</span>&#123;props.center&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">center</span>=<span class="string">&#123;</span>&lt;<span class="attr">span</span>&gt;</span>我是具名插槽内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125; /&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createPortal-传送门"><a href="#createPortal-传送门" class="headerlink" title="createPortal 传送门"></a>createPortal 传送门</h3><p>传送门就是爸当前容器内的结构传递到容器外，主要是为了解决一些布局上的缺陷，在 React 中通过<code>ReactDOM.createPortal（）</code>将子节点渲染到 DOM 节点中，从而实现传送门的功能。</p><p>有三个参数：<strong>ReactDOM.createPortal(children 需要渲染的组件内容，container 容器，key 非必填)</strong></p><p>这里举一个弹窗的例子，需要事先定义好一个<code>id=modal</code>的容器：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Modal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Modal</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;modal&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>modal<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    <span class="title class_">Modal</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="逻辑组件"><a href="#逻辑组件" class="headerlink" title="逻辑组件"></a>逻辑组件</h4><p>类似于 Antd-design 的 Modal 消息弹窗，就是将弹窗 dom 传送到与 root 根节点同级下，但是这种弹窗一般在组件中会通过逻辑组件进行实现，并不会直接去编写结构，那么该如何实现一个逻辑组件呢？</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202304151049023.png" alt="image-20220112113951537"></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">FC</span>, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.less&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CSSTransition</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-transition-group&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123;</span><br><span class="line">  <span class="attr">icon</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = &#123;</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">text: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">MessageOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;message&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="title class_">MessageOM</span>);</span><br><span class="line">    message.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> <span class="attr">text</span>=<span class="string">&#123;text&#125;</span> <span class="attr">icon</span>=<span class="string">&quot;✔&quot;</span> /&gt;</span></span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Message</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="function">(<span class="params">props: Props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [prop, setProp] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> nodeRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleEntered</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setProp</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">appear</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">nodeRef</span>=<span class="string">&#123;nodeRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">in</span>=<span class="string">&#123;prop&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">timeout</span>=<span class="string">&#123;1000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">classNames</span>=<span class="string">&quot;Message&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">unmountOnExit</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onEntered</span>=<span class="string">&#123;handleEntered&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Message&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;nodeRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.icon&#125; &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    message.<span class="title function_">success</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello portal<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.&#x2F;App.less</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Message</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> -<span class="number">4px</span> <span class="number">#0000001f</span>, <span class="number">0</span> <span class="number">6px</span> <span class="number">16px</span> <span class="number">#00000014</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">9px</span> <span class="number">28px</span> <span class="number">8px</span> <span class="number">#0000000d</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: all;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-enter-done</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-exit</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-exit-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-exit-done</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-appear</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-appear-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Message-appear-done</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-中使用动画"><a href="#React-中使用动画" class="headerlink" title="React 中使用动画"></a>React 中使用动画</h1><p>可以使用第三方的动画库<a href="http://reactcommunity.org/react-transition-group/">React Transtion Group</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-transition-group --save</span><br></pre></td></tr></table></figure><p>这个库的使用和 vue 有点类似，也是通过自定义动画名来分配动画类，分别有以下几个类：</p><table><thead><tr><th>开始</th><th>激活</th><th>结束</th></tr></thead><tbody><tr><td>*-enter（入场前第一帧）</td><td>*-enter-active（整个动画的执行过程中）</td><td>*-enter-done（动画结束后）</td></tr><tr><td>*-exit</td><td>*-exit-active</td><td>*-exit-done</td></tr><tr><td>*-appear（初始执行的动画）</td><td>*-appear-active</td><td>*-appear-done</td></tr></tbody></table><p>动画组件 CSSTranstion 的使用：将需要执行动画的组件，插入 CSSTransition 标签中。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">CSSTranstion</span> appear <span class="keyword">in</span> =&#123;&#125; timeout=&#123;&#125; className=<span class="string">&quot;&quot;</span> unmountOnExit onEnter=&#123;&#125; onExit=&#123;&#125; nodeRef=&#123;&#125;&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Something</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">CSSTransition</span>&gt;</span><br></pre></td></tr></table></figure><p>这里的例子是简单的盒子的显示与隐藏：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.less&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CSSTransition</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-transition-group&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inProp, setInProp] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setInProp</span>(!inProp);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Animation&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello Animate<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CSSTransition</span> <span class="attr">appear</span> <span class="attr">in</span>=<span class="string">&#123;inProp&#125;</span> <span class="attr">timeout</span>=<span class="string">&#123;1000&#125;</span> <span class="attr">classNames</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Animation</span> &#123;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#8b614d</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.fade-enter</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.fade-enter-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.fade-enter-done</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.fade-exit</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.fade-exit-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.fade-exit-done</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.fade-apper</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.fade-apper-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.fade-apper-done</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-样式"><a href="#React-样式" class="headerlink" title="React 样式"></a>React 样式</h1><p>常用的样式方式有几种：内联样式、普通 css、css.module、style-component、less、sass 等。</p><p>也可以使用 taiwindcss、unocss 这种集成样式方案。</p><div class="note info no-icon flat"><p>React 中使用 Less:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure></div><p>这里列举如何使用 css.module 的写法：</p><p>&#x2F;style.module.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;*.tsx</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&quot;./style.module.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;style.title&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要合并两个 class 类名，要使用第三方的库：<code>classnames</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i classnames --save</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&quot;./style.module.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> c <span class="keyword">from</span> <span class="string">&quot;classnames&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;c(style.title,</span> <span class="attr">style.banner</span>)&#125;&gt;</span>Login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-章节"><a href="#Hook-章节" class="headerlink" title="Hook 章节"></a>Hook 章节</h1><h2 id="什么是-Hook"><a href="#什么是-Hook" class="headerlink" title="什么是 Hook"></a>什么是 Hook</h2><p>hook 本身是一个函数，它可以让你<strong>“钩入”</strong>React 的特性。</p><div class="note danger no-icon flat"><p>使用 hook 的注意点：只能在<strong>函数组件</strong>的<strong>顶层使用</strong>，不可以放在语句中进行调用。</p></div><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>允许向组件添加一个状态变量(响应式的变量)，当数据发生改变的时候会重新执行组件的渲染。</p><p>语法规则：[something, setSomething] &#x3D; useState(初始值)</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [msg, setMsg] = <span class="title function_">useState</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setMsg</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>useState 的特性：</strong></p><details class="toggle" ><summary class="toggle-button" style="">惰性初始值</summary><div class="toggle-content"><p>如果遇到初始值需要大量运算才能获取的，可以采用<code>惰性初始化state</code>，通过传入一个<code>回调函数</code>来实现初始值。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">initCount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">initCount</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// count初始值为4</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">set函数异步特性</summary><div class="toggle-content"><p>set 函数<code>组件下一次渲染的时候，才更新状态变量</code>，所以 set 函数是异步的，在 set 函数后面打印状态值，还是原来的旧值。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setMsg</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// 依然是hello，如果想拿到更新之后的值，需要使用useEffect钩子实现</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">新旧值跳过机制</summary><div class="toggle-content"><p>如果向 set 函数提供的值和旧值一样，React 会跳过组件的重新渲染（包括子组件）,这个是 React 内部做的一个优化方案。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [msg, setMsg] = <span class="title function_">useState</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="title function_">setMsg</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 这里是会跳过组件的重新渲染的</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">修改原始值</summary><div class="toggle-content"><p>set 函数在修改变量状态的时候，对于修改的值，不会进行原值的合并处理，可利用扩展运算符来解决合并问题。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [info, setInfo] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setInfo</span>(&#123;</span><br><span class="line">  ...info,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;xiaoqiang&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">默认的批量处理能力</summary><div class="toggle-content"><p>useState 是<code>默认具有批量处理能力</code>的，执行完所有的 set 函数，才会执行组件的重现渲染。</p><div class="note info no-icon flat"><p>例如一个按钮点击，触发 handleClick 事件，会将 msg 和 count 的数据进行更新，React 触发了组件的重新的渲染，所以每次触发 handleClick 事件，都会执行 123，并且将 count 和 msg 两个数据值进行更新，然后将 count 和 msg 缓存记忆起来，为下一次组件渲染提供数据。</p></div><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [msg, setMsg] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCLick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setMsg</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件重新渲染&quot;</span>, +<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// 除了Login组件进入时会打印，在执行完handleCLick中的两个set函数，这里也会打印，并且msg和count都是更改之后的值</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>msg:&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleCLick&#125;</span>&gt;</span>修改值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想使用这种批量处理能力，想更新 msg 值后就重新渲染组件，组件再次渲染完成后，再继续执行 count 值的更新，React 提供了<code>flushSync()</code>的方法来实现这种效果**(需要从 react-dom 包中导入)**</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setMsg</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 执行完setMsg后，重新渲染组件，再执行setCount，又再渲染组件</span></span><br></pre></td></tr></table></figure></div></details><h2 id="useImmer"><a href="#useImmer" class="headerlink" title="useImmer"></a>useImmer</h2><p>一个替代useState用法的库：<a href="https://github.com/immerjs/use-immer">传送门</a></p><details class="toggle" ><summary class="toggle-button" style="">使用useState的更新状态，不够好的地方</summary><div class="toggle-content"><p>使用useState的定义一个对象的状态时候，更改这个对象显得十分麻烦（<strong>因为React不应该直接改变状态中持有的对象和数组，而是推荐拷贝现有对象来更新状态，所以显得操作非常的繁琐</strong>）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [person, setPerson] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Niki de Saint Phalle&#x27;</span>,</span><br><span class="line">    <span class="attr">artwork</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;Blue Nana&#x27;</span>,</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;Hamburg&#x27;</span>,</span><br><span class="line">      <span class="attr">image</span>: <span class="string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeNameAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setPerson</span>(&#123;</span><br><span class="line">      ...person,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Niki de Saint Phalle2&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeTitleAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setPerson</span>(&#123;</span><br><span class="line">      ...person,</span><br><span class="line">      <span class="attr">artwork</span>: &#123;</span><br><span class="line">        ...person.<span class="property">artwork</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Blue Nana2&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeNameAction&#125;</span>&gt;</span>更改name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeTitleAction&#125;</span>&gt;</span>更改artwork中的title<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>而<code>use-immer</code>的库的出现，减少了重复的代码，提高了开发效率</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install immer use-immer</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">use-immer的使用</summary><div class="toggle-content"><p><code>useImmer</code>的使用方法和<code>useState</code>一样，同样是返回一个数组，包含了状态值和更新状态值的函数，hook也是传入默认值。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useImmer &#125; <span class="keyword">from</span> <span class="string">&quot;use-immer&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [person, setPerson] = <span class="title function_">useImmer</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Niki de Saint Phalle&#x27;</span>,</span><br><span class="line">    <span class="attr">artwork</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;Blue Nana&#x27;</span>,</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;Hamburg&#x27;</span>,</span><br><span class="line">      <span class="attr">image</span>: <span class="string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeNameAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setPerson</span>(<span class="function"><span class="params">darft</span> =&gt;</span> &#123;</span><br><span class="line">      darft.<span class="property">name</span> = <span class="string">&#x27;bernie&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeTitleAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setPerson</span>(<span class="function"><span class="params">darft</span> =&gt;</span> &#123;</span><br><span class="line">      darft.<span class="property">artwork</span>.<span class="property">title</span> = <span class="string">&#x27;new title&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeNameAction&#125;</span>&gt;</span>更改name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeTitleAction&#125;</span>&gt;</span>更改artwork中的title<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="useImmerReducer"><a href="#useImmerReducer" class="headerlink" title="useImmerReducer"></a>useImmerReducer</h2><p><code>useImmerReducer</code>是基于<code>useReducer</code>的封装</p><details class="toggle" ><summary class="toggle-button" style="">官方示例</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useImmerReducer &#125; <span class="keyword">from</span> <span class="string">&quot;use-immer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">draft, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;reset&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> initialState;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">void</span> draft.<span class="property">count</span>++;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">void</span> draft.<span class="property">count</span>--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useImmerReducer</span>(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;reset&quot; &#125;)&#125;&gt;Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>useEffect 可以让你在函数组件中执行副作用操作，每次组件渲染都会执行一遍，相当于类组件中的<strong>componentDidMount</strong></p><p>副作用包括：<strong>DOM 操作</strong>、<strong>获取数据</strong>、<strong>记录日志</strong>等。</p><p>因为函数组件中没有生命周期钩子，所以可以用<code>useEffect</code>替代类组件中的生命周期钩子。</p><p>语法使用：</p><p>useEffect 是异步函数，在<code>组件加载完毕</code>和<code>组件更新</code>时触发。</p><p>useEffect 的回调函数，在<code>组件更新前</code>和<code>组件卸载</code>时被触发，常用于清理副作用。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件加载完毕 or 组件更新&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// useEffect的回调函数，可以清理副作用</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件更新前 or 组件被卸载&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// handleClick的执行，会重新触发useEffect</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>修改数字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>useEffect 的特性：</strong></p><details class="toggle" ><summary class="toggle-button" style="">钩子独立性</summary><div class="toggle-content"><p>每一个<strong>useEffect</strong>钩子都是独立的，可以在组件中使用多个 useEffect 来分离关注点</p></div></details><details class="toggle" ><summary class="toggle-button" style="">使用回调函数进行性能优化</summary><div class="toggle-content"><p>可以通过<strong>useEffect</strong>的回调函数进行性能优化（清理副作用等）。</p></div></details><details class="toggle" ><summary class="toggle-button" style="">可控性</summary><div class="toggle-content"><p><strong>useEffect</strong>钩子中没有使用响应式数据，仅仅是希望它在初始化的时候执行一次，可以传入一个<code>空数组</code>。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件初次渲染执行的内容&quot;</span>); <span class="comment">// 在初始化的时候执行一次</span></span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">依赖处理</summary><div class="toggle-content"><p>如果<strong>useEffect</strong>中使用了某个响应式数据，一定要进行数组依赖的处理。</p><p>只有当依赖数组中的声明项发生了改变，才会重新执行 useEffect 的回调函数。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;effect&quot;</span>, count);</span><br><span class="line">  &#125;, [count]); <span class="comment">// effect中有count这个响应式数据，一定要进行数组依赖处理，[count]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">频繁修改某个响应式数据，可以通过回调函数改写</summary><div class="toggle-content"><p>举例：在一个 effect 中，定时的去更新某个响应式状态，上面提到过只要 effect 中有响应式状态，就使用数组依赖处理，所以当 count 每次发生变化的，会重新执行 useEffect 的钩子，setInterval 会生成多个定时器 id，造成定时器的累加。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, [count]); <span class="comment">// 这种情况会造成定时器的重复调用，会产生多个setInterval的id</span></span><br></pre></td></tr></table></figure><p>想要实现定时器 id 不累加，又符合数组依赖处理，可以这样改写：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">闪屏问题</summary><div class="toggle-content"><p><strong>useEffect</strong>是在渲染被绘制到屏幕之后执行的，是异步的。</p><p><strong>uselayoutEffect</strong>是在渲染之后但在屏幕更新之前，是同步的。</p><p>大部分情况下我们采用 useEffect，性能好，但是当你需要在 useEffect 中操作 DOM，并且改变页面样式，就需要使用<code>useLayoutEffect</code>，否则会出现闪屏问题。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [msg, setMsg] = <span class="title function_">useState</span>(<span class="string">&quot;welcome&quot;</span>);</span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   let i = 0;</span></span><br><span class="line">  <span class="comment">//   while (i &lt; 10000) &#123;</span></span><br><span class="line">  <span class="comment">//     i++;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   console.log(&quot;11&quot;);</span></span><br><span class="line">  <span class="comment">//   setMsg(&quot;Hello World &quot;);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">1000033</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setMsg</span>(<span class="string">&quot;Hello World &quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><p>useRef 的作用是获取原生 DOM 的钩子。</p><details class="toggle" ><summary class="toggle-button" style="">使用useRef获取输入框的焦点</summary><div class="toggle-content"><p>通过调用 useRef 钩子，返回 ref 对象，获取对象内的某个属性，使用<code>.current</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> myRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">focusAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myRef.current&quot;</span>, myRef.<span class="property">current</span>);</span><br><span class="line">    myRef.<span class="property">current</span>?.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;focusAction&#125;</span>&gt;</span>聚焦<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">ref对象转发</summary><div class="toggle-content"><p>可以将父组件中的<code>ref对象</code>转发到子组件中，子组件需要使用 React 内置<code>forwardRef方法</code>将子组件包裹，子组件的第二个参数 ref 就是父组件转发过来的<code>ref对象</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forwardRef, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildCom</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props: Props, ref: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fatherRef = useRef&lt;<span class="title class_">HTMLDivElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    fatherRef.<span class="property">current</span>?.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>让子组件获取焦点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildCom</span> <span class="attr">ref</span>=<span class="string">&#123;fatherRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">ChildCom</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">记忆能力</summary><div class="toggle-content"><p>useRef 可以和 useState 类似的功能，给普通值进行缓存操作<strong>（给组件下一次渲染提供数据被称为有缓存记忆功能）</strong></p><p>当触发 handleClick 的时候，会触发组件的重新渲染，如果使用 useRef 定义 count，并且给定一个初始值 0，每次组件重新加载的时候，都会取上一次更新后的 count 值，达到缓存记忆功能。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count.<span class="property">current</span>++;</span><br><span class="line">    <span class="title function_">setNum</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num + <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">current</span>); <span class="comment">// 哪怕组件App重新被执行，count都会被缓存起来</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>记忆count的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">使用useRef控制组件的更新时机</summary><div class="toggle-content"><p>前面提到<code>useEffect</code>只有在组件渲染后，和组件更新时触发，组件的初次渲染可以使用传入空数组方式来控制执行，那组件的更新怎么控制触发时机呢？</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="title function_">useRef</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="comment">// 通过flag来控制是否继续执行</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag为true的时候执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleFlagAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num + <span class="number">1</span>);</span><br><span class="line">    flag.<span class="property">current</span> = <span class="literal">true</span>; <span class="comment">// 利用useRef可以让值具有缓存功能的特点，来实现控制useEffect的执行</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleFlagAction&#125;</span>&gt;</span>更新flag<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><p>使用 useContext 可以创建一个 context 对象，实现跨组件通信。</p><p>使用步骤分为 3 步：</p><details class="toggle" ><summary class="toggle-button" style="">第一步</summary><div class="toggle-content"><p>首先通过<code>React.createContext</code>创建一个全局上下文，返回一个上下文对象。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">GlobalContext</span> = <span class="title function_">createContext</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;bernie&quot;</span>, <span class="comment">// 这里可以设置默认值</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GlobalContext</span>;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">第二步</summary><div class="toggle-content"><p>将需要使用到这个上下文对象的子组件放到<code>Provider</code>标签中，通过<code>value属性</code>定义需要共享的数据，自动向下传递数据。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">GlobalContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">name:</span> &quot;<span class="attr">zwd</span>&quot;, <span class="attr">age:</span> <span class="attr">20</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Head</span>&gt;</span><span class="tag">&lt;/<span class="name">Head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">GlobalContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">第三步</summary><div class="toggle-content"><p>子组件中使用<code>useContext</code>来接收上下文对象</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Footer</span> = (<span class="params">props: Props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useContext</span>(data);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>useMemo 返回一个可记忆的值，useCallback 是 useMemo 的一个特殊形式。</p><p>语法：useCallback(fn:要缓存的函数，dependent：依赖值)，如果依赖值是一个<code>空数组</code>，那么这个函数的引用地址永远指向同一个。</p><details class="toggle" ><summary class="toggle-button" style="">组件缓存记忆学习前提</summary><div class="toggle-content"><p>在性能优化上有提过一个例子，<code>&lt;Head /&gt;</code>组件使用了 React.memo 方法，使得这个组件具有缓存作用，只有给<code>&lt;Head /&gt;</code>组件传递了新的 props 值，才会触发<code>&lt;Head /&gt;</code>组件的重现渲染。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Head</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;(Math.random() * 10).toFixed(2)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(num + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Head</span> <span class="attr">num</span>=<span class="string">&#123;num&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>如果传递给子组件的是一个固定的<code>引用类型数据</code>，那么也会出现重复渲染子组件的行为，这时候就可以使用<code>useMemo</code>钩子，让你的数据始终指向同一个内存地址。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">arr</span>: <span class="built_in">number</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Head</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="title function_">memo</span>(<span class="function">(<span class="params">props: Props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;(Math.random() * 10).toFixed(2)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(num + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], []); <span class="comment">// // 传入空数组，让useMemo中的数据的缓存值永远指向同一个引用地址</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Head</span> <span class="attr">arr</span>=<span class="string">&#123;arr&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>useCallback 返回一个可记忆的函数。</p><p>语法：useCallback(fn:要缓存的函数，dependent：依赖值)，如果依赖值是一个<code>空数组</code>，那么这个函数的引用地址永远指向同一个。</p><p>在下面的例子中：</p><p>父组件<code>&lt;App /&gt;</code>向子组件<code>&lt;Head /&gt;</code>传递了一个事件 onClick，这里的 onClick 是一个函数，在 JavaScript 中顶层类型是引用类型 Object。所以每次<code>&lt;App /&gt;</code>组件的渲染，函数 foo 的引用地址都不同，也会触发<code>&lt;Head /&gt;</code>组件的渲染。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Head</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="title function_">memo</span>(<span class="function">(<span class="params">props: Props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;(Math.random() * 10).toFixed(2)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(num + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123; <span class="keyword">do</span> something ... &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Head</span> <span class="attr">onClick</span>=<span class="string">&#123;foo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里引出了 useCallback 钩子的使用，使用 useCallback 可以让某个函数永远指向同一个引用地址。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(num + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> foo = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;&#125;, []); <span class="comment">// 传入空数组，让useCallback的缓存值永远指向同一个引用地址</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Head</span> <span class="attr">onClick</span>=<span class="string">&#123;foo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用 useMemo 将 useCallback 改写</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;&#125;, []);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="function">() =&gt;</span> &#123;&#125;, []);</span><br></pre></td></tr></table></figure><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><p><code>useReducer</code>是 useState 的替代方案，在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。</p><p>基本语法：</p><p>类似于 redux 中的(state,action) &#x3D;&gt; new State 的写法，返回一个数组<code>[state,dispatch]</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123; <span class="attr">age</span>: <span class="number">42</span> &#125;);</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">优化前的案例</summary><div class="toggle-content"><p>假设有这么一个例子：分别有两个状态 isLogin 和 isLogout，都是使用 useState 来创建的状态变量，他们之间没有关联性和统一性。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isLogin, setLogin] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [isLogout, setLogout] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setLogin</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">setLogout</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLogout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setLogin</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_">setLogout</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;isLogin ? (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogout&#125;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ) : (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogin&#125;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">使用useReducer优化之后</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> loginState = &#123;</span><br><span class="line">    <span class="attr">isLogin</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">isLogout</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">loginReducer</span> = (<span class="params">state: <span class="keyword">typeof</span> loginState, action: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;login&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">isLogin</span>: <span class="literal">true</span>, <span class="attr">isLogout</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;logout&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">isLogin</span>: <span class="literal">false</span>, <span class="attr">isLogout</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> [state, loginDispatch] = <span class="title function_">useReducer</span>(loginReducer, loginState);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">loginDispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;login&quot;</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLogout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">loginDispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;logout&quot;</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;state.isLogin ? (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogout&#125;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ) : (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogin&#125;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="自定义-hooks"><a href="#自定义-hooks" class="headerlink" title="自定义 hooks"></a>自定义 hooks</h2><p>自定义 hook 就是函数，相当于是一个公共的方法，自定义的 hook 可以任意使用 react 内置的 hook，像 useState、useEffect、useReducer、useTranstion 等。</p><p>但是需要遵循两个规范：</p><ol><li>命名规则必须以<code>use</code>开头</li><li>自定义 hook 和内置的 hook 一样，只能在函数组件的顶层使用，不能在循环或者 JSX 模版中使用。</li></ol><details class="toggle" ><summary class="toggle-button" style="">获取x、y轴的坐标</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">useMouseXY</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [x, setX] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [y, setY] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setAction</span> = (<span class="params">e: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setX</span>(e.<span class="property">pageX</span>);</span><br><span class="line">    <span class="title function_">setY</span>(e.<span class="property">pageY</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, setAction);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 组件卸载的时候执行</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, setAction);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x,</span><br><span class="line">    y,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><h1 id="高阶组件的使用"><a href="#高阶组件的使用" class="headerlink" title="高阶组件的使用"></a>高阶组件的使用</h1><p>高阶组件是对组件进行一层劫持，它并不是 ReactAPI 中的一部分。</p><p>高阶组件本身是一个函数，通过传入一个组件，然后 return 一个组件。</p><details class="toggle" ><summary class="toggle-button" style="">高阶组件定义和基本使用</summary><div class="toggle-content"><p><strong>高阶组件的定义</strong>：高阶组件接收一个组件作为参数，然后返回一个组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义高阶组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enhanceComponent</span>(<span class="params">WarppedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">NewComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(props);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;enhanceComponent&quot;</span>, props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WarppedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用高阶组件对某个组件进行劫持，然后再返回这个组件</strong>：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入的组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newApp = <span class="title function_">enhanceComponent</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> newApp;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">使用高阶组件，对props增强</summary><div class="toggle-content"><p>假设现在有两个组件分别是<code>&lt;Home /&gt;</code>和<code>&lt;About /&gt;</code>，两个组件需要共享 regoin 的值，使用高阶组件实现：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;`昵称：$&#123;this.props.nickName&#125; </span></span><br><span class="line"><span class="language-xml">        等级：$&#123;this.props.level&#125; </span></span><br><span class="line"><span class="language-xml">        区域：$&#123;this.props.regoin&#125;`&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// About组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">About</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;`昵称：$&#123;this.props.nickName&#125; </span></span><br><span class="line"><span class="language-xml">        等级：$&#123;this.props.level&#125; </span></span><br><span class="line"><span class="language-xml">        区域：$&#123;this.props.regoin&#125;`&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拆分三个步骤为：</p><ol><li><p>定义一个高阶组件，返回一个函数组件，在高阶组件中定义 regoin 这个 props</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">EnhanceComponent</span>(<span class="params">WarppedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WarppedComponent</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">regoin</span>=<span class="string">&quot;中国&quot;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过变量接收高阶组件的返回的组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EnhanceHome</span> = <span class="title class_">EnhanceComponent</span>(<span class="title class_">Home</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EnhanceAbout</span> = <span class="title class_">EnhanceComponent</span>(<span class="title class_">About</span>);</span><br></pre></td></tr></table></figure></li><li><p>在需要使用组件的地方，直接使用增强后的组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">EnhanceHome</span> <span class="attr">nickName</span>=<span class="string">&quot;zwd&quot;</span> <span class="attr">level</span>=<span class="string">&#123;20&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">EnhanceAbout</span> <span class="attr">nickName</span>=<span class="string">&quot;kobe&quot;</span> <span class="attr">level</span>=<span class="string">&#123;11&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2022/01/12/G95qRTMDt8o3BXh.png" alt="image-20220112141104679"></p></div></details><details class="toggle" ><summary class="toggle-button" style="">使用高阶函数进行鉴权操作</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Carpage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>购物车页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">EnhanceComponent</span>(<span class="params">WarppedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isLogin &#125; = props;</span><br><span class="line">    <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WarppedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">UserAuth</span> <span class="attr">isLogin</span>=<span class="string">&#123;false&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h1 id="React-性能优化"><a href="#React-性能优化" class="headerlink" title="React 性能优化"></a>React 性能优化</h1><h1 id="其他知识点补充"><a href="#其他知识点补充" class="headerlink" title="其他知识点补充"></a>其他知识点补充</h1><h2 id="类组件-setState-的使用"><a href="#类组件-setState-的使用" class="headerlink" title="类组件 setState 的使用"></a>类组件 setState 的使用</h2><p>在类组件中更新某个状态的值，和微信小程序一样，需要使用<strong>setState</strong>来告诉 React 数据有更新，每次 setState 会让组件重新执行 render 方法。</p><p>setState 是传入对象来更新数据，底层是通过<strong>合并对象</strong>实现数据更新</p><h3 id="setState-是异步更新"><a href="#setState-是异步更新" class="headerlink" title="setState 是异步更新?"></a>setState 是异步更新?</h3><p>众所周知，函数组件中 useState 的 set 函数是异步操作，如果想要拿到更新之后的值，需要使用<strong>useEffect</strong>钩子来获取最新的值。</p><h3 id="setState-是同步更新"><a href="#setState-是同步更新" class="headerlink" title="setState 是同步更新?"></a>setState 是同步更新?</h3><p>在某些特殊情况下，setState 的更新是同步的：</p><details class="toggle" ><summary class="toggle-button" style="">将更新放入定时器中</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">increatment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 将this.setState放入定时器中</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前计数：&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.increatment()&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">在原生addEventListener中执行</summary><div class="toggle-content"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在原生addEventListener中执行</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前计数：&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="配置路径别名"><a href="#配置路径别名" class="headerlink" title="配置路径别名"></a>配置路径别名</h2><details class="toggle" ><summary class="toggle-button" style="">create-react-app中配置路径别名</summary><div class="toggle-content"><p><strong>需要使用第三方库 craco</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @craco/craco --save</span><br></pre></td></tr></table></figure><p><strong>根目录创建 craco.config.js</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">dir</span>) =&gt; path.<span class="title function_">resolve</span>(__dirname, dir);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">vite项目中配置别名</summary><div class="toggle-content"><p>vite.config.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">react</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">//设置路径别名</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br><span class="line">      <span class="string">&quot;*&quot;</span>: path.<span class="title function_">resolve</span>(<span class="string">&quot;&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>tsconfig.json</p><p>配置<code>baseUrl</code>和<code>src</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.node.json&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></details>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React18与Vue3的异同点</title>
      <link href="/2023/04/03/React18%E4%B8%8EVue3%E7%9A%84%E5%BC%82%E5%90%8C%E7%82%B9/"/>
      <url>/2023/04/03/React18%E4%B8%8EVue3%E7%9A%84%E5%BC%82%E5%90%8C%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="React18-与-Vue3-的异同点："><a href="#React18-与-Vue3-的异同点：" class="headerlink" title="React18 与 Vue3 的异同点："></a>React18 与 Vue3 的异同点：</h1><h1 id="编程风格-视图风格"><a href="#编程风格-视图风格" class="headerlink" title="编程风格-视图风格"></a>编程风格-视图风格</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">编程风格</button><button type="button" class="tab " data-href="-2">视图风格</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>React 语法少，难度大，在 react 中是没有指令的，所有的功能都要通过原生 JavaScript 来实现，贴近于原生 JS 操作。</p><p>Vue 语法多，难度小，使用 Vue 框架的时候，真的就是在操作 Vue。</p><p>同样是操作一个表单的表现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- react --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;username&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(ev)</span>=&gt;</span> setUsername(ev.target.value)&#125; /&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>Vue 使用<strong>字符串模板</strong>，更贴近 HTML，学习成本低，但有时候不灵活。</p><p>React 采用<strong>JSX 语法</strong>，限制比较多，但是可以跟模版语法很好的结合。</p><p>所以两个框架各有优缺点。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="组件-路由-状态管理"><a href="#组件-路由-状态管理" class="headerlink" title="组件-路由-状态管理"></a>组件-路由-状态管理</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">组件风格</button><button type="button" class="tab " data-href="-2">路由</button><button type="button" class="tab " data-href="-3">状态管理</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>Vue 采用选项式 API，组合式 API。</p><p>React 采用类组件，函数组件。</p><p>对于可复用的组件都是使用 Hook 的 use 函数。</p></div><div class="tab-item-content" id="-2"><p>Vue 语法更加简练。</p><p>React 的 use 函数太多，不够统一化。</p><p>这两个框架对于常见的路由需求都是可以灵活实现的，例如：<code>路由表</code>、<code>嵌套</code>、<code>动态</code>、<code>编程式</code>、<code>守卫</code>等。</p><p>所以总结来说，Vue 的路由使用起来会更加的灵活；React 使用起来会略显复杂。并且 Vue 功能更加丰富，而 React 有些需求需要自己模拟去实现。</p></div><div class="tab-item-content" id="-3"><p>Vue 采用<code>Vuex</code>或<code>Pinia(推荐)</code>。</p><p>React 采用<code>Redux</code>或<code>Mobx。</code></p><p>Vue 中推荐使用 Pinia，因为使用更加简单，并且跟 Vue3 的组合式配合会更加的统一。</p><p>React 中推荐使用 Redux 的扩展版本，<code>Redux-toolkit(RTK)推荐</code>，使用起来跟 Vue 对比还是略显复杂一些，不过常见的功能都可以实现的很好：共享状态、同步、异步、模块化、持久化等。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="模板-样式-事件-表单"><a href="#模板-样式-事件-表单" class="headerlink" title="模板-样式-事件-表单"></a>模板-样式-事件-表单</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">模版对比</button><button type="button" class="tab " data-href="-2">样式对比</button><button type="button" class="tab " data-href="-3">事件对比</button><button type="button" class="tab " data-href="-4">表单对比</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>Vue 的视图变化，主要通过：<strong>指令 + 模板的方式</strong>。</p><p>React 的视图变化，主要通过：<strong>原生 JS + 模板的方式</strong>。</p><p>React 的模板比较强大，因为可以编写 JSX 结构，所以可以做出更加灵活的结构处理。</p></div><div class="tab-item-content" id="-2"><p>Vue 的 class 和 style 都有三种写法：字符串、数组、对象。</p><p>React 的 style 只能写对象，class 只能字符串，可借助 classnames 这个库。</p></div><div class="tab-item-content" id="-3"><p>Vue 事件功能丰富，通过<code>@</code>来绑定事件。</p><p>React 事件传参需要高阶处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in list&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- React --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123; list.map((v, i)=&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">onClick</span>=<span class="string">&quot;&#123;handleClick(i)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ) &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><p>Vue 表单双向绑定 v-model。</p><p>React 表单受控与非受控。</p><p>Vue 的表单指令 v-model 还是非常灵活的，总体对比要比 React 使用方便且灵活。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="通信-逻辑复用"><a href="#通信-逻辑复用" class="headerlink" title="通信-逻辑复用"></a>通信-逻辑复用</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">组件通信</button><button type="button" class="tab " data-href="-2">逻辑复用</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>Vue 父子 props，子父 emits。</p><p>React 父子 props，子父回调函数。</p><p>emits 自定义事件和回调函数，但实际上是一样的思想。</p><p>跨组件的通信方案也很类似，都是一种依赖注入的方式来实现的。</p></div><div class="tab-item-content" id="-2"><p>Vue 选项式采用：mixins 混入；组合式采用：use 函数。</p><p>React 类组件采用：Render Props、HOC；函数组件：use 函数。</p><p>可以发现组合式 API 和函数组件都是采用 use 函数，所以基本复用是差不多的思想，这也是两个框架推荐的用法。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="内容分发-DOM-操作"><a href="#内容分发-DOM-操作" class="headerlink" title="内容分发-DOM 操作"></a>内容分发-DOM 操作</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">内容分发</button><button type="button" class="tab " data-href="-2">DOM操作</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>Vue 通过插槽<strong>slot</strong>进行接收。</p><p>React 通过<strong>props.children</strong>进行接收。</p></div><div class="tab-item-content" id="-2"><p>Vue 和 React 都是通过 ref 属性来操作 DOM。</p><p>初始化的时候给元素绑定 ref 属性，Vue 通过 ref 来创建 ref 属性，React 通过 useRef 这个函数来创建 ref 属性。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="diff-算法的异同"><a href="#diff-算法的异同" class="headerlink" title="diff 算法的异同"></a>diff 算法的异同</h1><p>两个框架都是采用虚拟 dom 的 diff 算法来渲染页面的，采用的都是同级对比方式。</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202304031118343.png" alt="image-20230403111856287"></p><p>当两个节点进行对比的时候，要分不同的情况进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202304031120375.png" alt="image-20230403112013352"></p><h1 id="响应式-生命周期-副作用"><a href="#响应式-生命周期-副作用" class="headerlink" title="响应式-生命周期-副作用"></a>响应式-生命周期-副作用</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">响应式</button><button type="button" class="tab " data-href="-2">生命周期</button><button type="button" class="tab " data-href="-3">副作用处理</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>Vue 采用响应式数据，底层通过 new Proxy()进行监控，灵活性更高。</p><p>React 采用 state 状态，通过 setState()方法进行内部 re-render，可控性更强。</p></div><div class="tab-item-content" id="-2"><p>Vue 生命周期钩子(常见)</p><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeUnmount</li><li>unmounted</li></ul><p>React 类组件的生命周期钩子(常见)</p><ul><li>constructor</li><li>componentDidMount</li><li>componentDidUpdate</li><li>componentWillUnmount</li><li>render</li></ul><p>整体对比来看，Vue 的生命周期会更丰富一些，React 生命周期会更简约一些。</p></div><div class="tab-item-content" id="-3"><p>vue 使用，watchEffect()</p><p>react 使用，useEffect()</p><p>都是处理副作用的方法，用法上还是有很大区别的。</p><p>watchEffect 会自动根据所依赖的值进行重渲染，而 useEffect 要明确指定对应的值才能进行重渲染，React 团队已经给出在未来的版本中可能会改成根据所依赖的值自动进行重渲染的操作，但暂时还不行。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">cb</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//更新前的触发</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//更新前的触发</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React与TS的结合开发</title>
      <link href="/2023/04/03/React%E4%B8%8ETS%E7%BB%93%E5%90%88%E5%BC%80%E5%8F%91/"/>
      <url>/2023/04/03/React%E4%B8%8ETS%E7%BB%93%E5%90%88%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="props-类型限制"><a href="#props-类型限制" class="headerlink" title="props 类型限制"></a>props 类型限制</h1><p>函数组件之间的 props 的限制，可以通过<code>interface</code>或者<code>类型别名</code>对 props 进行类型限定：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ChildProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  list?: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props: ChildProps</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给Child的props添加默认值</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;hhh&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">999</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;zwd&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Parent</span>;</span><br></pre></td></tr></table></figure><p>函数表达式的情况下，通过内置的<code>React.FC</code>来对类型 props 进行限制：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">ChildProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 给Child的props添加默认值</span></span><br><span class="line">  <span class="keyword">const</span> &#123; name = <span class="string">&quot;hhh&quot;</span>, age = <span class="number">999</span> &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="children-类型限制"><a href="#children-类型限制" class="headerlink" title="children 类型限制"></a>children 类型限制</h1><p>父子组件通信的时候，子组件内容分发是通过 props.children 实现的，那么怎么对 children 进行限定呢?</p><p>通过<code>React.ReactNode</code>对 children 进行限定，我们把 children 设置为可选属性，这样是否要进行内容分发都是可以的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ChildProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  list?: <span class="built_in">string</span>[];</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">ChildProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; children &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="event-限制"><a href="#event-限制" class="headerlink" title="event 限制"></a>event 限制</h1><p>事件对象在 React 中主要通过内置的对象类型来限制，常见的 div 的点击事件对象类型是：<code>React.MouseEvent</code></p><p>父组件传递子组件一个点击事件<code>handleClick</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params">ev: React.MouseEvent</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click&quot;</span>, ev);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;zwd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">age</span>=<span class="string">&#123;18&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">handleClick</span>=<span class="string">&#123;(ev)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        handleClick;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;<span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件定义 handleClick 方法的类型，这里的事件对象 ev 的类型是<code>React.MouseEvent</code>，并且它可接收一个泛型。</p><p>如果事件对象只能通过 button 元素点击才可以，可以给 MouseEvent 传递一个泛型，<code>React.MouseEvent&lt;HTMLButtonElement&gt;</code>，此时如果将 button 替换成普通的 div，将会<mark class="hl-label red">报TS的错误</mark> </p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ChildProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  list?: <span class="built_in">string</span>[];</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">handleClick</span>: <span class="function">(<span class="params">e: React.MouseEvent&lt;HTMLButtonElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">ChildProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; children, handleClick &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">event: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>ButtonElement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="style-限制"><a href="#style-限制" class="headerlink" title="style 限制"></a>style 限制</h1><p>父子组件传递也可以传递 style 样式，style 同样也可以被<code>React.CSSProperties</code>限制，当传递的样式属性或属性值不符合 css 的属性值的时候就会产生<mark class="hl-label red">TS的类型错误提示</mark> </p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ChildProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">style</span>: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">ChildProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; style &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="component-限制"><a href="#component-限制" class="headerlink" title="component 限制"></a>component 限制</h1><p>父子通信也可以传递组件，通过定义 component 的属性，对这个 component 进行类型限制，使用<code>React.ComponentType</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">FC</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ChildProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">React</span>.<span class="property">ComponentType</span>; <span class="comment">// 组件的类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">ChildProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 这里就会渲染传递进来的Header组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">props.component</span>&gt;</span><span class="tag">&lt;/<span class="name">props.component</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Header</span>: <span class="variable constant_">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 传递一个Header组件到子组件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;zwd&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Header&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Parent</span>;</span><br></pre></td></tr></table></figure><p>通过上面的方式将<code>&lt;Header /&gt;</code>组件传递给子组件，如果<code>&lt;Header /&gt;</code>组件也需要对 props 进行限制，比如过<code>&lt;Header /&gt;</code>组件只接收一个<strong>username</strong>的值，这时候需要向子组件定义的 component 的类型传递一个泛型：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">HeaderProps</span> &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当作介质的Header组件，它的props类型是HeaderProps</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Header</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">HeaderProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ChildProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">React</span>.<span class="property">ComponentType</span>&lt;<span class="title class_">HeaderProps</span>&gt;; <span class="comment">// 组件的类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">ChildProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 如果不传username就会报TS的错误 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">props.component</span> <span class="attr">username</span>=<span class="string">&quot;yeah&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">props.component</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Hooks-函数限制"><a href="#Hooks-函数限制" class="headerlink" title="Hooks 函数限制"></a>Hooks 函数限制</h1><p>在函数组件中主要就是对 use 函数进行类型注解，常见的 hook 类型有以下几种：</p><ul><li><p>useState -&gt; 联合类型，对象字面量类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt;(<span class="number">0</span>); <span class="comment">// 联合类型，setCount的时候可以是number可以是string</span></span><br><span class="line"><span class="keyword">const</span> [info, setInfo] = useState&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125; | <span class="literal">null</span>&gt;(<span class="literal">null</span>); <span class="comment">// 对象字面量</span></span><br><span class="line"><span class="keyword">const</span> [list, setList] = useState&lt;<span class="built_in">string</span>[]&gt;([]);</span><br></pre></td></tr></table></figure></li><li><p>useRef -&gt; 泛型标签类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputRef = useRef&lt;<span class="title class_">HTMLInputElement</span>&gt;(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>如果不传递泛型标签，使用的时候会报错，也可以通过?可选链 !非空断言来阻止 TS 的报错</p><p>可选链属于类型保护，而非空断言相当于是欺骗 TS<mark class="hl-label red">(慎用)</mark> </p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputRef.<span class="property">current</span>?.<span class="property">innerHTML</span>;</span><br><span class="line">inputeRef.<span class="property">current</span>!.<span class="property">innerHTML</span>;</span><br></pre></td></tr></table></figure></li><li><p>useEffect -&gt; 自动推断类型</p></li></ul><h1 id="类组件类型限定"><a href="#类组件类型限定" class="headerlink" title="类组件类型限定"></a>类组件类型限定</h1><p>在这里只是作为拓展，也要知道怎么对类组件进行类型的限制。</p><p>主要就是给继承的类<strong>Component</strong>传递泛型，<strong>Props</strong>和<strong>State</strong>，这样可以实现父子通信的数据进行类型限制，又可以对内部的 state 进行类型限制。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WelcomeProps</span> &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WelcomeState</span> &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">WelcomeProps</span>, <span class="title class_">WelcomeState</span>&gt; &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello Welcome &#123;this.state.username&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>05_react-ts<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">count</span>=<span class="string">&#123;123&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Router-路由与-TS-结合"><a href="#Router-路由与-TS-结合" class="headerlink" title="Router 路由与 TS 结合"></a>Router 路由与 TS 结合</h1><p>React 路由与 TS 配合使用通过会使用以下几个类型限制：</p><ul><li>RouteObject 内置类型 -&gt; 用来限制路由表 routes</li><li>React.createElement() -&gt; 进行组件编写</li><li>如何对拓展的元信息进行类型限制</li></ul><p>路由表会存在于**&#x2F;src&#x2F;router&#x2F;index.ts<strong>中或者其他你想存放的位置，不过都是以</strong>ts<strong>结尾的文件，所以不能以<code>&lt;App /&gt;</code>这种方式写了，这里使用</strong>createElement**来创建组件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span>, <span class="title class_">RouteObject</span>, createBrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Parent</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Parent&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;../App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createElement &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过这种方式，对路由元信息进行拓展</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;react-router&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">NonIndexRouteObject</span> &#123;</span><br><span class="line">    <span class="comment">// 不带index的接口 是代表一级路由</span></span><br><span class="line">    meta?: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="attr">auth</span>: <span class="built_in">boolean</span>;</span><br><span class="line">      icon?: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IndexRouteObject</span> &#123;</span><br><span class="line">    <span class="comment">//带有index的接口 是用在children中的</span></span><br><span class="line">    meta?: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="attr">auth</span>: <span class="built_in">boolean</span>;</span><br><span class="line">      icon?: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteObject</span>[] = [</span><br><span class="line">  <span class="comment">// RouteObject内置类型来设置路由表包含的path、element</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="title function_">createElement</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">auth</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">index</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="title function_">createElement</span>(<span class="title class_">Navigate</span>, &#123; <span class="attr">to</span>: <span class="string">&quot;parent&quot;</span> &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;parent&quot;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;/父级首页&quot;</span>,</span><br><span class="line">          <span class="attr">auth</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">element</span>: <span class="title function_">createElement</span>(<span class="title class_">Parent</span>), <span class="comment">// 不能再使用 &lt;Parent /&gt;，而是通过createElement来创建Parent</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(routes, &#123;</span><br><span class="line">  <span class="attr">basename</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h1 id="RTK-与-TS-结合"><a href="#RTK-与-TS-结合" class="headerlink" title="RTK 与 TS 结合"></a>RTK 与 TS 结合</h1><p>RTK 状态管理与 TS 配合常见的类型操作有以下两种：</p><ul><li><p>定义全局的 state 类型 -&gt; ReturnType<typeof store.getState></p><p>对&#x2F;store&#x2F;index.ts 中的全局 store 进行类型限制，以下例子中的<code>typeof store.getState</code>是得到一个函数类型，使用内置的<code>ReturnType&lt;&gt;</code>接口可以推导出这个函数的返回值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> userSlice <span class="keyword">from</span> <span class="string">&quot;./modules/user&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: userSlice,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">RootState</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> store.<span class="property">getState</span>&gt;; <span class="comment">// 在这里定义一个全局store的类型 RootState</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li><li><p>限定 reducers 中 payload 值的类型 -&gt; PayloadAction</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PayloadAction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> userSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">changeName</span>(<span class="params">state, action: PayloadAction&lt;<span class="built_in">string</span>&gt;</span>) &#123;</span><br><span class="line">      <span class="comment">//使用reduxjs/toolkit内置的PayloadAction接口来限制action的类型。</span></span><br><span class="line">      state.<span class="property">name</span> = action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; changeName &#125; = userSlice.<span class="property">actions</span>; <span class="comment">// 通过导出changeName这个方法，可以在页面中使用，也可以做到限制传进来的payload值的类型。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><p>组件中使用 user 切片方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">RootState</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../store/index&quot;</span>; <span class="comment">// 导入定义的全局store的类型。</span></span><br><span class="line"><span class="keyword">import</span> &#123; changeName &#125; <span class="keyword">from</span> <span class="string">&quot;../store/modules/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state: RootState</span>) =&gt;</span> state.<span class="property">user</span>.<span class="property">name</span>); <span class="comment">// 这里给state定义类型后，state.就有提示了。</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeNameAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">changeName</span>(<span class="string">&quot;berniezhong&quot;</span>)); <span class="comment">// 如果这里调用changeName，传入的类型不是string，则会报TS的类型错误！。</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeNameAction&#125;</span>&gt;</span>changeName<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的this指向</title>
      <link href="/2023/01/05/JavaScript%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/"/>
      <url>/2023/01/05/JavaScript%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="理解this"><a href="#理解this" class="headerlink" title="理解this"></a>理解this</h1><div class="note primary no-icon flat"><p><code>this</code>是在函数调用时被绑定的一个对象</p></div><h1 id="为什么使用this"><a href="#为什么使用this" class="headerlink" title="为什么使用this"></a>为什么使用this</h1><p>下面通过对象字面量的形式创建出来一个对象，当我们调用对象内预置的方法时，希望将对象中的<code>name</code>属性打印出来。</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">没有使用this的对象</button><button type="button" class="tab " data-href="-2">使用this之后的对象</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>当没有<code>this</code>的情况下，为了能够获取<code>name</code>属性，必须使用<code>obj.name</code>来获取。<br>弊端：当需要更改对象名obj为info的时候，对象内方法引用的<code>obj.name</code>都需要修改为<code>info.name</code>，非常的炸裂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;bernie&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bar</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">baz</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>如果使用<code>this</code>对这个对象进行优化：修改对象名并不会影响对象内的方法，非常的紧致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;bernie&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bar</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">baz</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h1><p>this在全局作用域下永远指向<code>window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span> == <span class="variable language_">window</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>this</code>通常是在函数调用的时候去使用，函数调用时会创建一个执行上下文：</p><p><code>this</code>记录着函数的调用栈、调用方式、传入的参数信息等。</p><p>定义一个函数，采用三种不同方式对它进行调用，将产生三种不同结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式一：直接调用：window</span></span><br><span class="line"><span class="title function_">foo</span>() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：将foo放到一个对象中，再调用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>:foo </span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// obj对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三：使用call/apply改变this指向</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// String&#123;&quot;abc&quot;&#125;对象</span></span><br></pre></td></tr></table></figure><p>综上得出：</p><ul><li>函数调用时，会默认给<code>this</code>绑定一个值</li><li><code>this</code>的绑定和函数编写位置无关</li><li><code>this</code>的绑定和调用位置有关</li></ul><h1 id="this绑定规则"><a href="#this绑定规则" class="headerlink" title="this绑定规则"></a>this绑定规则</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">默认绑定</button><button type="button" class="tab " data-href="-2">隐式绑定</button><button type="button" class="tab " data-href="-3">显式绑定</button><button type="button" class="tab " data-href="-4">new绑定</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>什么情况下使用默认绑定？ 独立函数的调用。</p><p>独立函数：没有被绑定到某个对象上的函数。</p><p><strong>案例一：普通函数调用</strong></p><p><code>foo</code>函数没有在任何对象内有关联，这种函数的<code>this</code>都是指向<code>window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例二：函数调用另一个函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">  <span class="title function_">test2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">  <span class="title function_">test3</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>();</span><br></pre></td></tr></table></figure><p><strong>案例三：将函数作为参数，传入到另一个函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(bar);</span><br></pre></td></tr></table></figure><p>将上面的案例进行修改，结果依然是<code>window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="title function_">func</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(obj.<span class="property">bar</span>);</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>常见的隐式绑定：通过对象调用方法</p><p><strong>案例一：通过对象调用函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p><strong>案例二：对案例一进行修改，通过obj2引用了obj1对象，在通过obj1调用foo函数，此时遵循一个原则：<code>谁调用函数，this就指向谁</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj1对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">  <span class="attr">obj1</span>: obj1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">obj1</span>.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p><strong>案例三：隐式丢失</strong></p><p>最终bar这个函数被调用，而bar没有与任何对象进行关联，所以相当于默认绑定，所以<code>this</code>指向了<code>window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = obj1.<span class="property">foo</span>;</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// 相当于是window.bar()</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><p>显示绑定：给函数的调用指定<code>this指向</code>，可以通过<code>call</code>、<code>apply</code>、<code>bind</code>来指定this的指向</p><p><strong>call</strong></p><p>call(this指向，参数1，参数2，参数3…)</p><p>第一个参数是this即将指向的地方，后面的参数为参数列表：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args) <span class="comment">// [&#x27;echo&#x27;,&#x27;zwd&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="variable language_">window</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;zwd&#x27;</span>) <span class="comment">// window</span></span><br><span class="line">foo.<span class="title function_">call</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;bernie&#x27;</span>&#125;,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;zwd&#x27;</span>) <span class="comment">// &#123;&#123;name:&#x27;bernie&#x27;&#125;&#125;</span></span><br><span class="line">foo.<span class="title function_">cal</span>(<span class="number">123</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;zwd&#x27;</span>)<span class="comment">// Number对象 123</span></span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>假如传入的指定对象是<code>null</code>或者<code>undefined</code>，那这个显式绑定将会转为默认规则</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(obj) <span class="comment">// obj对象</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// window</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p><strong>apply</strong></p><p>apply(this指向,[参数1，参数2，参数…])</p><p>第一个参数是this即将指向的地方，后面的参数为数组</p><p><strong>bind</strong></p><p>bind的用法和call类似：bind(this指向，参数1，参数2，参数3…)</p><p>唯一不同的是：bind返回一个函数，只有主动调用才会实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// &#123; name: &#x27;bernie&#x27; &#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// [&#x27;wa&#x27;, 123]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> callback = foo.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;bernie&#x27;</span> &#125;, <span class="string">&#x27;wa&#x27;</span>, <span class="number">123</span>);</span><br><span class="line"><span class="title function_">callback</span>();</span><br></pre></td></tr></table></figure><p><strong>内置函数</strong></p><p><strong>案例一：setTimeout</strong></p><p>setTimeout内部是通过<code>apply</code>进行绑定的对象，并且绑定的是全局对象<code>window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>案例二：数组forEach</strong></p><p>forEach内置函数中，this也是指向全局<code>window</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>];</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 三次window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如何让它指向指定的对象呢？：在第二个参数传入指定对象，此时this的指向就变成传入的对象了，就很美。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;why&quot;</span>&#125;;</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 三次obj对象</span></span><br><span class="line">&#125;, obj);</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><p>JavaScript中的函数可以当做一个类的构造函数来使用，通过<code>new</code>关键字。</p><p>使用<code>new</code>关键字来调用函数时，会执行以下操作：</p><ol><li>创建一个全新的对象</li><li>这个对象会被执行<code>prototype</code>连接</li><li>这个新对象会被绑定到函数调用的this上</li><li>如果函数没有返回其他对象，表达式会返回这个新对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Person &#123;&#125;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// Person &#123;name: &quot;why&quot;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;why&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="规则优先级"><a href="#规则优先级" class="headerlink" title="规则优先级"></a>规则优先级</h1><div class="note info no-icon flat"><p>new绑定 &gt; 显示绑定bind &gt; 隐式绑定 &gt; 默认绑定</p></div><ol><li>默认规则的优先级最低</li><li>显示绑定高于隐式绑定</li><li>new绑定高于隐式绑定</li><li>new绑定高于bind</li></ol><h1 id="箭头函数的出现"><a href="#箭头函数的出现" class="headerlink" title="箭头函数的出现"></a>箭头函数的出现</h1><p>箭头函数自带的特性：<code>不绑定this，而根据外层作用来决定this</code></p><p>假设有这么一段代码：</p><p>对象object中有一个<code>getData</code>方法，在没有箭头的函数的情况下，setTimeout是内置函数，默认绑定的this是全局window对象，此时就需要在<code>getData</code>方法中定义一个this，让setTimeout中可以访问到object中的data，从而可以往data压数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">data</span>: [],</span><br><span class="line">  <span class="attr">getData</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> res = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">      _this.<span class="property">data</span> = [...res]</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">object.<span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure><p>而有了箭头函数之后，setTimeout可以直接访问到<code>object对象</code>，就非常的舒服了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">data</span>: [],</span><br><span class="line">  <span class="attr">getData</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> res = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = [...res]</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">object.<span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure><p>继续深入，继续探究…</p><p>如果<code>object</code>中的getData方法，也是一个箭头函数，结果就非常的恐怖了，此时<code>this</code>指向了全局对象window。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">data</span>: [],</span><br><span class="line">  <span class="attr">getData</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">object.<span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure><h1 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">卫士</button><button type="button" class="tab " data-href="-2">先锋</button><button type="button" class="tab " data-href="-3">中军</button><button type="button" class="tab " data-href="-4">统帅</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sss = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="title function_">sss</span>(); </span><br><span class="line">  person.<span class="title function_">sayName</span>(); </span><br><span class="line">  (person.<span class="property">sayName</span>)(); </span><br><span class="line">  (b = person.<span class="property">sayName</span>)(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>代码解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sss = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="comment">// 独立函数调用，没有和任何对象关联</span></span><br><span class="line">  <span class="title function_">sss</span>(); <span class="comment">// window</span></span><br><span class="line">  <span class="comment">// 关联</span></span><br><span class="line">  person.<span class="title function_">sayName</span>(); <span class="comment">// person</span></span><br><span class="line">  (person.<span class="property">sayName</span>)(); <span class="comment">// person</span></span><br><span class="line">  (b = person.<span class="property">sayName</span>)(); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo2</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="attr">foo3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo4</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;person2&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo1</span>(); </span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2); </span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo2</span>();</span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2);</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo3</span>()();</span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)();</span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2);</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo4</span>()();</span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)();</span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2);</span><br></pre></td></tr></table></figure><p>代码解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式绑定，肯定是person1</span></span><br><span class="line">person1.<span class="title function_">foo1</span>(); <span class="comment">// person1</span></span><br><span class="line"><span class="comment">// 隐式绑定和显示绑定的结合，显示绑定生效，所以是person2</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2); <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo2()是一个箭头函数，不适用所有的规则</span></span><br><span class="line">person1.<span class="title function_">foo2</span>() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// foo2依然是箭头函数，不适用于显示绑定的规则</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2) <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到foo3，但是调用位置是全局作用于下，所以是默认绑定window</span></span><br><span class="line">person1.<span class="title function_">foo3</span>()() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// foo3显示绑定到person2中</span></span><br><span class="line"><span class="comment">// 但是拿到的返回函数依然是在全局下调用，所以依然是window</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 拿到foo3返回的函数，通过显示绑定到person2中，所以是person2</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2) <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo4()的函数返回的是一个箭头函数</span></span><br><span class="line"><span class="comment">// 箭头函数的执行找上层作用域，是person1</span></span><br><span class="line">person1.<span class="title function_">foo4</span>()() <span class="comment">// person1</span></span><br><span class="line"><span class="comment">// foo4()显示绑定到person2中，并且返回一个箭头函数</span></span><br><span class="line"><span class="comment">// 箭头函数找上层作用域，是person2</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)() <span class="comment">// person2</span></span><br><span class="line"><span class="comment">// foo4返回的是箭头函数，箭头函数只看上层作用域</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2) <span class="comment">// person1</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo2</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo3</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo4</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo1</span>()</span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2)</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo2</span>()</span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2)</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo3</span>()()</span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)()</span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2)</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo4</span>()()</span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)()</span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2)</span><br></pre></td></tr></table></figure><p>代码解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式绑定</span></span><br><span class="line">person1.<span class="title function_">foo1</span>() <span class="comment">// peron1</span></span><br><span class="line"><span class="comment">// 显示绑定优先级大于隐式绑定</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2) <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo是一个箭头函数，会找上层作用域中的this，那么就是person1</span></span><br><span class="line">person1.<span class="title function_">foo2</span>() <span class="comment">// person1</span></span><br><span class="line"><span class="comment">// foo是一个箭头函数，使用call调用不会影响this的绑定，和上面一样向上层查找</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2) <span class="comment">// person1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用位置是全局直接调用，所以依然是window（默认绑定）</span></span><br><span class="line">person1.<span class="title function_">foo3</span>()() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 最终还是拿到了foo3返回的函数，在全局直接调用（默认绑定）</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 拿到foo3返回的函数后，通过call绑定到person2中进行了调用</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2) <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo4返回了箭头函数，和自身绑定没有关系，上层找到person1</span></span><br><span class="line">person1.<span class="title function_">foo4</span>()() <span class="comment">// person1</span></span><br><span class="line"><span class="comment">// foo4调用时绑定了person2，返回的函数是箭头函数，调用时，找到了上层绑定的person2</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)() <span class="comment">// person2</span></span><br><span class="line"><span class="comment">// foo4调用返回的箭头函数，和call调用没有关系，找到上层的person1</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2) <span class="comment">// person1</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">obj</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">foo2</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>()()</span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo1</span>.<span class="title function_">call</span>(person2)()</span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>().<span class="title function_">call</span>(person2)</span><br><span class="line"></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>()()</span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo2</span>.<span class="title function_">call</span>(person2)()</span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>().<span class="title function_">call</span>(person2)</span><br></pre></td></tr></table></figure><p>代码解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// obj.foo1()返回一个函数</span></span><br><span class="line"><span class="comment">// 这个函数在全局作用于下直接执行（默认绑定）</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>()() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 最终还是拿到一个返回的函数（虽然多了一步call的绑定）</span></span><br><span class="line"><span class="comment">// 这个函数在全局作用于下直接执行（默认绑定）</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo1</span>.<span class="title function_">call</span>(person2)() <span class="comment">// window</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>().<span class="title function_">call</span>(person2) <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到foo2()的返回值，是一个箭头函数</span></span><br><span class="line"><span class="comment">// 箭头函数在执行时找上层作用域下的this，就是obj</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>()() <span class="comment">// obj</span></span><br><span class="line"><span class="comment">// foo2()的返回值，依然是箭头函数，但是在执行foo2时绑定了person2</span></span><br><span class="line"><span class="comment">// 箭头函数在执行时找上层作用域下的this，找到的是person2</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo2</span>.<span class="title function_">call</span>(person2)() <span class="comment">// person2</span></span><br><span class="line"><span class="comment">// foo2()的返回值，依然是箭头函数</span></span><br><span class="line"><span class="comment">// 箭头函数通过call调用是不会绑定this，所以找上层作用域下的this是obj</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>().<span class="title function_">call</span>(person2) <span class="comment">// obj</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nest.js</title>
      <link href="/2022/09/03/Nestjs/"/>
      <url>/2022/09/03/Nestjs/</url>
      
        <content type="html"><![CDATA[<h1 id="Nestjs"><a href="#Nestjs" class="headerlink" title="Nestjs"></a>Nestjs</h1><h2 id="创建-Nestjs-项目"><a href="#创建-Nestjs-项目" class="headerlink" title="创建 Nestjs 项目"></a>创建 Nestjs 项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @nestjs/cli</span><br><span class="line">nest new project-name</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块是使用<code>@Module</code>装饰器的类，<code>@Module</code>装饰器提供元数据，Nest 应用是很多模块组成。一个应用至少有一个模块。</p><p><code>@Module</code>装饰器接受 4 个属性：</p><ul><li>providers：向模块注入实例化的提供者，可以在整个模块中共享数据</li><li>controllers：控制器（必须创建）</li><li>imports：导入其他模块的列表</li><li>exports：导出当前模块，供其他模块使用</li></ul><div class="note primary no-icon flat"><p>创建模块</p><p>$ nest g module cats</p></div><p>使用命令创建的模块会自动注入到<code>根模块</code>，创建模块后到目录：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├──cats</span><br><span class="line">│    ├──dto</span><br><span class="line">│    │   └──create-cat.dto.ts</span><br><span class="line">│    ├──interfaces</span><br><span class="line">│    │     └──cat.interface.ts</span><br><span class="line">│    ├─cats.service.ts</span><br><span class="line">│    ├─cats.controller.ts</span><br><span class="line">│    └──cats.module.ts</span><br><span class="line">├──app.module.ts</span><br><span class="line">└──main.ts</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><p>一个模块有对应的<code>controller</code>和<code>service</code>层，应该封装在一个功能模块下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">CatsController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">CatsService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="共享模块"><a href="#共享模块" class="headerlink" title="共享模块"></a>共享模块</h3><p>默认情况下：<code>模块是单例</code>，所以可以在多个模块中共享<code>同一个模块实例</code>。</p><img src="/Users/zwd/Library/Application Support/typora-user-images/image-20220905101537340.png" alt="image-20220905101537340" style="zoom:50%;" /><p>当模块需要被其他模块共享时，需要将模块放到当前模块的<code>exports</code>中，在应用模块中在<code>imports</code>定义。</p><p>模块共享可以在<code>controller</code>控制层相互调用<code>service</code>：</p><p>例如：在狗的模块中调用猫的模块。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DogsService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./dogs.service&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CatsService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../cats/cats.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&quot;dogs&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DogsController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> dogService: DogsService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> catService: CatsService</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">dogAskCatName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catService</span>.<span class="title function_">getCatName</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p><code>Service</code>也可以注入到<code>Module</code>中，一般用于<code>配置信息目的</code>。</p><p>相反不可以将<code>Module</code>注入到<code>Service</code>中。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">CatsController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">CatsService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsModule</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> catsService: CatsService</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局模块"><a href="#全局模块" class="headerlink" title="全局模块"></a>全局模块</h3><p>Nest 提供一种全局模块，无需每个模块都导入一遍。（<code>通常会将helper、数据库连接等全局导入，随时随地使用</code>）。</p><p>需要使用<code>@Global</code>装饰器，使其成为全局模块，在核心模块中注册，这种全局模块注册后，在别的模块中不需要使用<code>imports</code>导入。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span>, <span class="title class_">Global</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CatsController</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./cats.controller&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CatsService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./cats.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Global</span>()</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">CatsController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">CatsService</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">CatsService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><p>控制器负责处理<code>传入的请求</code>和<code>向客户端返回响应</code>。</p><p>控制器的目的是接受<code>特定请求</code>，每个控制器有多个路由，每个路由执行不同的操作。</p><p>控制器使用<code>@Controller</code>装饰器定义。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><div class="note primary no-icon flat"><p>创建路由</p><p>$ nest g controller cats</p></div><p>在<code>@Controller()</code>中使用路径前缀可以对一组相关的路由进行分组。</p><p>@Controller(‘cats’) 代表 cat 模块的路由有个前缀<code>/cats</code>，任何在 cats 模块中的路由，都需要添加<code>/cats</code>来访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CatsService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./cats.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&quot;cats&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> catService: CatsService</span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getCatName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catService</span>.<span class="title function_">getCatName</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/***</span></span><br><span class="line"><span class="comment">   * 匹配的路由是 --&gt; /cats/detail</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&quot;detail&quot;</span>)</span><br><span class="line">  <span class="title function_">getDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catService</span>.<span class="title function_">getDetail</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/***</span></span><br><span class="line"><span class="comment">   * 通配参数 --&gt; category_123 、 category_abc</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&quot;category_*&quot;</span>)</span><br><span class="line">  <span class="title function_">getCategory</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catService</span>.<span class="title function_">getCategory</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 动态参数 --&gt; color/123 、 color/abc</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&quot;color/:id&quot;</span>)</span><br><span class="line">  <span class="title function_">getColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catService</span>.<span class="title function_">getColor</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由方式还包括了<code>@Get()、@Put()、@Delete()、@Patch()</code></p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><div class="note primary no-icon flat"><p>为了在<code>express</code>中使用<code>Typescript</code>，请安装<code>@types/express</code></p></div><p>Nest 提供了对底层平台的请求对象(基于<code>Express</code>)的访问方式。</p><p>可以在处理函数签名中使用<code>@Req()</code>装饰器，指示 Nest 将请求对象注入函数中。</p><p><code>request</code>请求具有<code>查询字符串、请求参数、Http header标头、Http body</code>的属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="title function_">getCatName</span>(<span class="params"><span class="meta">@Req</span>() req:Request</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🚀🚀🚀🚀🚀🚀 --&gt;&#x27;</span>, req)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catService</span>.<span class="title function_">getCatName</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>@Request()，@Req()</code></td><td align="left"><code>req</code></td></tr><tr><td align="left"><code>@Response()，@Res()*</code></td><td align="left"><code>res</code></td></tr><tr><td align="left"><code>@Next()</code></td><td align="left"><code>next</code></td></tr><tr><td align="left"><code>@Session()</code></td><td align="left"><code>req.session</code></td></tr><tr><td align="left"><code>@Param(key?: string)</code></td><td align="left"><code>req.params</code>&#x2F;<code>req.params[key]</code></td></tr><tr><td align="left"><code>@Body(key?: string)</code></td><td align="left"><code>req.body</code>&#x2F;<code>req.body[key]</code></td></tr><tr><td align="left"><code>@Query(key?: string)</code></td><td align="left"><code>req.query</code>&#x2F;<code>req.query[key]</code></td></tr><tr><td align="left"><code>@Headers(name?: string)</code></td><td align="left"><code>req.headers</code>&#x2F;<code>req.headers[name]</code></td></tr><tr><td align="left"><code>@Ip()</code></td><td align="left"><code>req.ip</code></td></tr><tr><td align="left"><code>@HostParam()</code></td><td align="left"><code>req.hosts</code></td></tr></tbody></table><p>假设路由携带 id 参数: <code>http://localhost:3000/cats?id=123</code>，那么<code>@Query(id)</code>中的值就是<code>123</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="title function_">getCatName</span>(<span class="params"><span class="meta">@Req</span>() request:Request, <span class="meta">@Query</span>(<span class="string">&#x27;id&#x27;</span>) id</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🚀🚀🚀🚀🚀🚀 --&gt;&#x27;</span>, id)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catService</span>.<span class="title function_">getCatName</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>默认情况下接口总是返回<code>200</code>，而<code>post</code>请求默认返回<code>201</code>，也可以使用<code>@HttpCode()</code>装饰器来返回状态码，可以在<code>response</code>返回对象中，通过<code>statusCode</code>来获取：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"><span class="meta">@HttpCode</span>(<span class="number">300</span>)</span><br><span class="line"><span class="title function_">getPostStatusCode</span>(<span class="params"><span class="meta">@Res</span>() res:Response</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🚀🚀🚀🚀🚀🚀 --&gt; 300&#x27;</span>, res.<span class="property">statusCode</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catService</span>.<span class="title function_">getPostStatusCode</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>将响应重定向到特定的<code>Url</code>，使用<code>@Redirect()</code>装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;userRole&#x27;</span>)</span><br><span class="line"><span class="meta">@Redirect</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="number">301</span>)</span><br><span class="line"><span class="title function_">redirectUrl</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果想动态的决定<code>HTTP状态码</code>和<code>Url</code>，可以在方法内返回一个对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;userRole&#x27;</span>)</span><br><span class="line"><span class="meta">@Redirect</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="number">301</span>)</span><br><span class="line"><span class="title function_">redirectUrl</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;https://berniezhong.gitee.io/buttferfly-bernie/&#x27;</span>,</span><br><span class="line">    <span class="attr">statusCode</span>: <span class="number">304</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* cats.controller.ts */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Controller</span>,</span><br><span class="line">  <span class="title class_">Get</span>,</span><br><span class="line">  <span class="title class_">Query</span>,</span><br><span class="line">  <span class="title class_">Post</span>,</span><br><span class="line">  <span class="title class_">Body</span>,</span><br><span class="line">  <span class="title class_">Put</span>,</span><br><span class="line">  <span class="title class_">Param</span>,</span><br><span class="line">  <span class="title class_">Delete</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreateCatDto</span>, <span class="title class_">UpdateCatDto</span>, <span class="title class_">ListAllEntities</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./dto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&quot;cats&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsController</span> &#123;</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;This action adds a new cat&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">findAll</span>(<span class="params"><span class="meta">@Query</span>() query: ListAllEntities</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This action returns all cats (limit: <span class="subst">$&#123;query.limit&#125;</span> items)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&quot;:id&quot;</span>)</span><br><span class="line">  <span class="title function_">findOne</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&quot;id&quot;</span>) id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This action returns a #<span class="subst">$&#123;id&#125;</span> cat`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Put</span>(<span class="string">&quot;:id&quot;</span>)</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&quot;id&quot;</span>) id: <span class="built_in">string</span>, <span class="meta">@Body</span>() updateCatDto: UpdateCatDto</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This action updates a #<span class="subst">$&#123;id&#125;</span> cat`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">&quot;:id&quot;</span>)</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&quot;id&quot;</span>) id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This action removes a #<span class="subst">$&#123;id&#125;</span> cat`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>提供者是用<code>@Injectable()</code>装饰器的类，用于处理一些复杂的任务。</p><div class="note primary no-icon flat"><p>创建服务类</p><p>$ nest g service cats</p></div><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件在路由处理程序之前被调用，可以访问<code>请求对象</code>和<code>响应对象</code>，以及<code>next()</code>中间件函数，<code>Nest</code>中间件应该实现<code>NestMiddleware</code>这个接口。</p><p>实现一个简单的中间件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NestMiddleware</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggerMiddleware</span> <span class="keyword">implements</span> <span class="title class_">NestMiddleware</span> &#123;</span><br><span class="line">  <span class="title function_">use</span>(<span class="params">req: Request, res: Response, next: NextFunction</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; path, method &#125; = req;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀🚀🚀🚀🚀🚀 --&gt;&quot;</span>, <span class="string">`<span class="subst">$&#123;path&#125;</span> <span class="subst">$&#123;method&#125;</span> `</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间件执行完后需要执行<code>next()</code></p><h3 id="应用中间件"><a href="#应用中间件" class="headerlink" title="应用中间件"></a>应用中间件</h3><p>应用中间件必须使用模块类的<code>configure()</code>方法来设置，包含中间件的模块必须实现<code>NestModule</code>接口，应用中间件要应用在整个应用的模块中，即：<code>app.module.ts</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MiddlewareConsumer</span>, <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CatsModule</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./cats/cats.module&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoggerMiddleware</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./common/logger.middleware&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CatsModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="title function_">configure</span>(<span class="params">consumer: MiddlewareConsumer</span>) &#123;</span><br><span class="line">    consumer</span><br><span class="line">      .<span class="title function_">apply</span>(<span class="title class_">LoggerMiddleware</span>) <span class="comment">/** 应用中间件 */</span></span><br><span class="line">      .<span class="title function_">exclude</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="title class_">RequestMethod</span>.<span class="property">POST</span>,</span><br><span class="line">      &#125;) <span class="comment">/** 排除路径为`hello`，方法是POST的接口(中间件不走这里) */</span></span><br><span class="line">      .<span class="title function_">forRoutes</span>(</span><br><span class="line">        <span class="string">&quot;cats&quot;</span></span><br><span class="line">      ); <span class="comment">/** 监听cats这个路径，这里的路径相当于中间件中的path */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上：定义了一个<code>LoggerMiddleware</code>中间件，用于输出每个请求的请求方法和请求路径，中间件会在应用模块中被消费，模块自带一个<code>configure</code>方法。</p><div class="note primary no-icon flat"><p><code>apply()</code>可以使用单个中间件、多个中间件</p><p><code>forRoutes()</code>可接受一个字符串、多个字符串、对象、一个控制器、多个控制器(多个控制器用逗号分隔)</p><p><code>exclude()</code>可以排除某些路由，接受<code>path</code>和<code>method</code>对象，多个用逗号分隔</p></div><p>其中<code>forRoutes</code>中的<code>path</code>也支持<code>路由通配符</code>，路径包含<code>ab*cd</code>的所有<code>method</code>，都会通过这个中间件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">forRoutes</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;ab*cd&quot;</span>, <span class="attr">method</span>: <span class="title class_">RequestMethod</span>.<span class="property">ALL</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><p>一次性将中间件绑定到每个注册路由，可以使用<code>INestApplication</code>实例中的<code>use()</code>方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">app.<span class="title function_">use</span>(logger); <span class="comment">/** 全局注册中间件 */</span></span><br><span class="line"><span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="异常过滤器"><a href="#异常过滤器" class="headerlink" title="异常过滤器"></a>异常过滤器</h2><p>内置的<code>异常过滤器</code>处理整个应用程序中的所有抛出异常。</p><p>一个完整的请求应该是以下步骤：</p><p>由客户端发起请求，先经过过滤器处理，再经过管道处理，最终响应给服务。</p><img src="/Users/zwd/Library/Application Support/typora-user-images/image-20220906102202657.png" alt="image-20220906102202657" style="zoom:50%;" /><h3 id="简单的异常过滤器"><a href="#简单的异常过滤器" class="headerlink" title="简单的异常过滤器"></a>简单的异常过滤器</h3><div class="note primary no-icon flat"><p>所有异常过滤器都应该实现通用的 <code>ExceptionFilter&lt;T&gt;</code> 接口。它需要你使用有效签名提供 <code>catch(exception: T, host: ArgumentsHost)</code>方法。<code>T</code> 表示异常的类型。</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">ArgumentsHost</span>,</span><br><span class="line">  <span class="title class_">Catch</span>,</span><br><span class="line">  <span class="title class_">ExceptionFilter</span>,</span><br><span class="line">  <span class="title class_">HttpException</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Catch</span>(<span class="title class_">HttpException</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HttpExceptionFilter</span> <span class="keyword">implements</span> <span class="title class_">ExceptionFilter</span>&lt;<span class="title class_">HttpException</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">catch</span>(<span class="attr">exception</span>: <span class="title class_">HttpException</span>, <span class="attr">host</span>: <span class="title class_">ArgumentsHost</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = host.<span class="title function_">switchToHttp</span>(),</span><br><span class="line">      response = ctx.<span class="title function_">getResponse</span>() <span class="comment">/** 获取响应信息 */</span>,</span><br><span class="line">      request = ctx.<span class="title function_">getRequest</span>() <span class="comment">/** 获取请求信息 */</span>,</span><br><span class="line">      status = exception.<span class="title function_">getStatus</span>() <span class="comment">/** 获取异常状态 */</span>,</span><br><span class="line">      <span class="attr">exceptionRes</span>: <span class="built_in">any</span> = exception.<span class="title function_">getResponse</span>(); <span class="comment">/** 获取异常信息 */</span></span><br><span class="line">    <span class="keyword">const</span> &#123; error, message &#125; = exceptionRes;</span><br><span class="line"></span><br><span class="line">    response.<span class="title function_">status</span>(status).<span class="title function_">json</span>(&#123;</span><br><span class="line">      status,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">      <span class="attr">path</span>: request.<span class="property">url</span>,</span><br><span class="line">      error,</span><br><span class="line">      message,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定过滤器"><a href="#绑定过滤器" class="headerlink" title="绑定过滤器"></a>绑定过滤器</h3><p>将单个过滤器绑定到某个<code>Controller</code>的某个方法上，需要使用到<code>@UseFilters()</code>装饰器：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UseFilters</span>(<span class="keyword">new</span> <span class="title class_">HttpExceptionFilter</span>())</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ForbiddenException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局异常过滤器"><a href="#全局异常过滤器" class="headerlink" title="全局异常过滤器"></a>全局异常过滤器</h3><p>全局过滤器需要在入口文件<code>main.ts</code>中注册，使用<code>app.useGlobalFilters(过滤器)</code>方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  app.<span class="title function_">useGlobalFilters</span>(<span class="keyword">new</span> <span class="title class_">HttpExceptionFilter</span>());</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道是具有<code>@Injectable()</code>装饰器的类，管道要实现<code>PipeTransform</code>接口。</p><p>管道的两个典型应用场景：</p><ul><li>转换： 管道将输入的数据转换为所需要的数据类型（string 转换成 number）</li><li>验证：对输入数据进行验证，如果验证成功继续传递，验证失败则抛出异常</li></ul><p>在以上两种情况下，管道参数由<code>控制器Controller的路由</code>进行处理。<code>Nest</code>会在调用这个方法之前插入一个管道，管道会先拦截方法的调用参数，进行转换或是验证处理。</p><h3 id="管道示例"><a href="#管道示例" class="headerlink" title="管道示例"></a>管道示例</h3><p>以下示例使用<code>new ParseIntPipe()</code>管道，是将<code>Param</code>中的参数 id，由<code>String类型</code>转换成<code>Number类型</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Patch</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(&#123;<span class="attr">summary</span>: <span class="string">&#x27;PATCH&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">@ApiParam</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;id&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">@ApiParam</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;message&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">@ApiBody</span>(&#123;<span class="attr">description</span>:<span class="string">&#x27;请输入message&#x27;</span>&#125;)</span><br><span class="line"><span class="title function_">update</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>, <span class="keyword">new</span> ParseIntPipe()) id, <span class="meta">@Body</span>() &#123;message&#125;</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🚀🚀🚀🚀🚀🚀id&#x27;</span>, <span class="keyword">typeof</span> id)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">exceptionService</span>.<span class="title function_">update</span>(id, message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设传入的路由是<code>localhost:3000/exception/abc</code>，此时<code>Param</code>的参数 id，值为<code>abc</code>：</p><p>过滤器会直接抛出错误，防止了<code>update()</code>方法的继续执行：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;statusCode&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Validation failed (numeric string is expected)&quot;</span>,</span><br><span class="line">  <span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad Request&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自带的<code>Parse*</code>管道方法：</p><table><thead><tr><th>管道</th><th>描述</th></tr></thead><tbody><tr><td><code>ValidationPipe</code></td><td></td></tr><tr><td><code>ParseIntPipe</code></td><td></td></tr><tr><td><code>ParseFloatPipe</code></td><td></td></tr><tr><td><code>ParseBoolPipe</code></td><td></td></tr><tr><td><code>ParseArrayPipe</code></td><td></td></tr><tr><td><code>ParseUUIDPipe</code></td><td></td></tr><tr><td><code>ParseEnumPipe</code></td><td></td></tr><tr><td><code>DefaultValuePipe</code></td><td></td></tr><tr><td><code>ParseFilePipe</code></td><td></td></tr></tbody></table><h3 id="自定义管道"><a href="#自定义管道" class="headerlink" title="自定义管道"></a>自定义管道</h3><div class="note info no-icon flat"><p>validation.pipe.ts</p><p>PipeTransform&lt;T, R&gt;是每个管道必须要实现的泛型接口，泛型<code>T</code>表明输入的<code>value</code>的类型，<code>R</code>表明<code>transfrom()</code>方法的返回类型</p></div><p>每个管道必须声明<code>transfrom()</code>方法，接受两个参数：</p><ul><li><code>value</code>：是当前处理的方法参数（被路由处理程序方法接收之前）</li><li><code>metadata</code>：当前处理的方法参数的元数据。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PipeTransform</span>, <span class="title class_">Injectable</span>, <span class="title class_">ArgumentMetadata</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ValidationPipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">value: <span class="built_in">any</span>, metadata: ArgumentMetadata</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="守卫"><a href="#守卫" class="headerlink" title="守卫"></a>守卫</h2><p>守卫类似于拦截器，目的也是在请求&#x2F;响应周期的正确位置处理逻辑，例如（<code>权限</code>、<code>角色</code>、<code>访问控制列表</code>）等。</p><p>通过守卫判断是否可以继续执行路由处理程序。</p><h3 id="授权守卫"><a href="#授权守卫" class="headerlink" title="授权守卫"></a>授权守卫</h3><p>当调用者通过了身份验证后（常见的请求头添加<code>token</code>），才可以继续执行处理程序，否则处理程序会被忽略。</p><p>注意：</p><p>每个守卫必须实现<code>CanActivate</code>，且必须实现一个<code>canActive()</code>方法，此方法返回一个<code>布尔值</code>，用于指示是否允许当前请求，它可以同步或异步(<code>Promise</code>)的返回响应。</p><ul><li>true：继续处理用户调用</li><li>false：将忽略当前的请求</li></ul><p>示例：通过请求头是否有<code>token</code>判断是否继续调用接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">CanActivate</span>, <span class="title class_">ExecutionContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RolesGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="params">ctx: ExecutionContext</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> req = ctx.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();</span><br><span class="line">    <span class="keyword">return</span> req.<span class="property">headers</span>.<span class="property">token</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定守卫"><a href="#绑定守卫" class="headerlink" title="绑定守卫"></a>绑定守卫</h3><p>和管道、拦截器一样，守卫也是可以全局和局部的。</p><p>局部的守卫将使用<code>@UseGuards()</code>装饰器设置一个控制范围的守卫。这个装饰器可以使用单个参数，也可以使用逗号分隔的参数列表(多个守卫守护当前接口)。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&quot;cats&quot;</span>)</span><br><span class="line"><span class="meta">@UseGuards</span>(<span class="keyword">new</span> <span class="title class_">RolesGuard</span>()) <span class="comment">/** 或者<span class="doctag">@UseGuards</span>(RolesGuard)*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsController</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>全局的守卫将使用<code>useGlobalGuards()</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">app.<span class="title function_">useGlobalGuards</span>(<span class="keyword">new</span> <span class="title class_">RolesGuard</span>());</span><br></pre></td></tr></table></figure><h3 id="为每个处理器设置角色"><a href="#为每个处理器设置角色" class="headerlink" title="为每个处理器设置角色"></a>为每个处理器设置角色</h3><p>假设一个控制器只对<code>admin</code>开放，不对<code>local</code>普通用户开放，就需要灵活的设置处理器角色。</p><p><code>Nest</code>提供了通过<code>@SetMetadata()</code>装饰器将定制元数据附加到路由处理程序的能力。</p><p>假设现在有一个<code>guard</code>控制器：通过<code>RolesGuard</code>守卫对服务进行守护</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiTags</span>(<span class="string">&quot;guard&quot;</span>)</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&quot;guard&quot;</span>)</span><br><span class="line"><span class="meta">@UseGuards</span>(<span class="title class_">RolesGuard</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">GuardController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> guardService: GuardService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="params"><span class="meta">@Query</span>(<span class="string">&quot;id&quot;</span>) id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">guardService</span>.<span class="title function_">fetch</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="meta">@Roles</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">  <span class="title function_">postWithNoGuard</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`no token success`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>自定义装饰器<code>@Roles()</code></p><p>role.decorator.ts</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SetMetadata</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Roles</span> = (<span class="params">...roles: <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">SetMetadata</span>(<span class="string">&quot;roles&quot;</span>, roles);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上的意思是：当使用自定义装饰器的时候，注入<code>@Roles()</code>的时候，往<code>@Roles(&#39;admin&#39;)</code>传入一个参数，在<code>Roles</code>装饰器内通过<code>SetMetadata</code>设置一个元数据。使得键为<code>roles</code>，键值是传入的参数，当使用自定义装饰器的时候<code>@Roles(&#39;admin&#39;)</code>，就设置了一组数据，数据是<code>&#123;roles: [admins]&#125;</code>，设置完成后，在守卫内通过<code>reflector</code>反射器，通过相同的键名去反射对应的值。</p><div class="note info no-icon flat"><p><code>RolesGuard</code>守卫</p><p>role.guard.ts</p></div><p>守卫必须实现<code>CanActivate</code>的约束，并且实现<code>canActivate()</code>方法，<code>canActivate()</code>有唯一参数<code>ctx</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">CanActivate</span>, <span class="title class_">ExecutionContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Reflector</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RolesGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> reflector: Reflector</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="params">ctx: ExecutionContext</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> roles = <span class="variable language_">this</span>.<span class="property">reflector</span>.<span class="title function_">get</span>(</span><br><span class="line">      <span class="string">&quot;roles&quot;</span>,</span><br><span class="line">      ctx.<span class="title function_">getHandler</span>()</span><br><span class="line">    ); <span class="comment">/** 这里会自动映射在自定义装饰器内设置的元数据的键值 */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀&quot;</span>, roles);</span><br><span class="line">    <span class="keyword">if</span> (!roles) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 以下逻辑根据需求 */</span></span><br><span class="line">    <span class="keyword">const</span> req = ctx.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; user &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !!roles.<span class="title function_">find</span>(<span class="function">(<span class="params">role</span>) =&gt;</span> role == user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义装饰器"><a href="#自定义装饰器" class="headerlink" title="自定义装饰器"></a>自定义装饰器</h2><p>在 node 中，前端将需要传递的值加到请求对象，然后在每个路由处理程序中手动提取它们，就会变得非常麻烦。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> token = req.<span class="property">headers</span>.<span class="property">token</span>;</span><br></pre></td></tr></table></figure><p>为了方便，可以自定义一个装饰器，在所有的控制器中使用它，假设现在自定义一个<code>@Token()</code>装饰器：</p><div class="note info no-icon flat"><p>token.decorator.ts</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator, <span class="title class_">ExecutionContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Token</span> = <span class="title function_">createParamDecorator</span>(</span><br><span class="line">  <span class="function">(<span class="params">data: <span class="built_in">unknown</span>, ctx: ExecutionContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = ctx.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();</span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">headers</span>.<span class="property">token</span>; <span class="comment">/** 根据需求返回 */</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以在其他地方直接使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="params"><span class="meta">@Token</span>() token: TokenEntity</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h3><table><thead><tr><th align="left">装饰器</th><th>描述</th></tr></thead><tbody><tr><td align="left"><code>@Response()，@Res()</code></td><td><code>res</code></td></tr><tr><td align="left"><code>@Request()，@Req()</code></td><td><code>req</code></td></tr><tr><td align="left"><code>@Next()</code></td><td><code>next</code></td></tr><tr><td align="left"><code>@Session()</code></td><td><code>req.session</code></td></tr><tr><td align="left"><code>@Param(param?: string)</code></td><td><code>req.params / req.params[param]</code></td></tr><tr><td align="left"><code>@Body(param?: string)</code></td><td><code>req.body / req.body[param]</code></td></tr><tr><td align="left"><code>@Query(param?: string)</code></td><td><code>req.query / req.query[param]</code></td></tr><tr><td align="left"><code>@Headers(param?: string)</code></td><td><code>req.headers / req.headers[param]</code></td></tr><tr><td align="left"><code>@Ip()</code></td><td><code>req.ip</code></td></tr><tr><td align="left"><code>@HostParam()</code></td><td><code>req.hosts</code></td></tr></tbody></table><h3 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h3><p>也可以通过传递数据给自定义装饰器，通过键从请求对象中提取属性。如果存在该键，则返回<code>相关联的值</code>，如果不存在，则返回<code>undefined</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator, <span class="title class_">ExecutionContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">FirstName</span> = <span class="title function_">createParamDecorator</span>(</span><br><span class="line">  <span class="function">(<span class="params">data: <span class="built_in">string</span>, ctx: ExecutionContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = ctx.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">  假设request请求对象中有一组user数据：</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">      &quot;id&quot;: 101,</span></span><br><span class="line"><span class="comment">      &quot;firstName&quot;: &quot;Alan&quot;,</span></span><br><span class="line"><span class="comment">      &quot;lastName&quot;: &quot;Turing&quot;,</span></span><br><span class="line"><span class="comment">      &quot;email&quot;: &quot;alan@email.com&quot;,</span></span><br><span class="line"><span class="comment">      &quot;roles&quot;: [&quot;admin&quot;]</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">user</span>[data]; <span class="comment">/** 根据需求返回 */</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在调用的时候通过传入一个键，映射后返回一个值得，存在返回值，不存在返回 undefined</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="params"><span class="meta">@FirstName</span>(<span class="string">&#x27;firstName&#x27;</span>) firstName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(firstName); <span class="comment">/** Alan */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jwt-鉴权"><a href="#Jwt-鉴权" class="headerlink" title="Jwt 鉴权"></a>Jwt 鉴权</h2><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><p>客户端通过账号密码进行验证，一旦通过验证，服务器将发出<code>JWT</code>，<code>JWT</code>生成一个<code>token</code>，在后续的请求中通过<code>token</code>来验证身份，还会创建一个仅对包含有效<code>JWT</code>的保护路由。</p><p><code>Passport策略</code></p><p>passport 提供了<code>Passport-local</code>的策略，它实现了<code>用户名/密码</code>身份验证机制，将它看作是一个框架，框架内部已经帮你做了很多事情，把很多验证机制都抽象了几个基本步骤。</p><p>安装<code>passport</code>依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install --save @nestjs/passport passport passport-local</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install --save-dev @types/passport-local</span></span><br></pre></td></tr></table></figure><ol><li><p>先创建<code>auth</code>模块，<code>auth</code>这个单独的模块用来专门校验用户信息，目录如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├──auth</span><br><span class="line">│    ├──auth.controller.ts</span><br><span class="line">│    ├──auth.module.ts</span><br><span class="line">│    ├──auth.service.ts</span><br><span class="line">│    ├──jwt.strategy.ts</span><br><span class="line">│    ├──local.strategy.ts</span><br><span class="line">│    ├──constants.ts</span><br><span class="line">├──user</span><br><span class="line">│    ├──user.module.ts</span><br><span class="line">│    ├──user.service.ts</span><br><span class="line">├──app.module.ts</span><br><span class="line">└──main.ts</span><br></pre></td></tr></table></figure><p>所有接口中，分别由两个策略，一个是不需要<code>JWT</code>验证的接口，比如登录接口，一个是需要<code>JWT</code>验证的业务接口。</p><p>所以出现了两个守卫：<code>@UseGuards(AuthGuard(&#39;local&#39;))</code>、<code>@UseGuards(AuthGuard(&#39;jwt&#39;))</code>，其中<code>AuthGuard</code>需要从<code>@nestjs/passport</code>中导入。</p><div class="note warning flat"><p>auth.controller.ts</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Request</span>, <span class="title class_">UseGuards</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./auth.service&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/passport&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&quot;auth&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> authService: AuthService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&quot;local&quot;</span>))</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&quot;login&quot;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="meta">@Request</span>() req</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">login</span>(req.<span class="property">user</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&quot;jwt&quot;</span>))</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&quot;profile&quot;</span>)</span><br><span class="line">  <span class="title function_">getProfile</span>(<span class="params"><span class="meta">@Request</span>() req</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> req.<span class="property">user</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>auth.service.ts</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/jwt&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../users/users.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userService: UsersService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> jwtService: JwtService</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 校验用户是否存在 */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validateUser</span>(<span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">pwd</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findOne</span>(username);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;校验用户&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (user &amp;&amp; user.<span class="property">password</span> === pwd) &#123;</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 登录 */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">user: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> payload = &#123; <span class="attr">username</span>: user.<span class="property">username</span>, <span class="attr">sub</span>: user.<span class="property">userId</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">access_token</span>: <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(payload),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>jwt.strategy.ts</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ExtractJwt</span>, <span class="title class_">Strategy</span> &#125; <span class="keyword">from</span> <span class="string">&quot;passport-jwt&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/passport&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">UnauthorizedException</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; jwtConstants &#125; <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JwtStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PassportStrategy</span>(<span class="title class_">Strategy</span>) &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(&#123;</span><br><span class="line">      <span class="attr">jwtFromRequest</span>: <span class="title class_">ExtractJwt</span>.<span class="title function_">fromAuthHeaderAsBearerToken</span>(),</span><br><span class="line">      <span class="attr">ignoreExpiration</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">secretOrKey</span>: jwtConstants.<span class="property">secret</span> <span class="comment">/**用于生成密钥用的常量*/</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validate</span>(<span class="params">payload: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">userId</span>: payload.<span class="property">sub</span>, <span class="attr">username</span>: payload.<span class="property">username</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>local.strategy.ts</p></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Strategy</span> &#125; <span class="keyword">from</span> <span class="string">&quot;passport-local&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/passport&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">UnauthorizedException</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./auth.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LocalStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PassportStrategy</span>(<span class="title class_">Strategy</span>) &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> authService: AuthService</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validate</span>(<span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">password</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">validateUser</span>(username, password);</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>(<span class="string">&quot;🙅用户不存在🙅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>user</code>模块，<code>user</code>这个模块专门用来从数据库中检索用户列表的操作：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">User</span> = <span class="built_in">any</span>;</span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">users</span>: <span class="title class_">User</span>[];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">users</span> = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">userId</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;john&quot;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&quot;changeme&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">userId</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;chris&quot;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&quot;secret&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">userId</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;maria&quot;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&quot;guess&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="params">username: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">/** 这里的操作是通过typeorm检索用户列表的 根据需求来走*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">username</span> === username);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/Users/zwd/Library/Application Support/typora-user-images/image-20220908142230800.png" alt="image-20220908142230800" style="zoom:50%;" /></li></ol><h2 id="TypeORM"><a href="#TypeORM" class="headerlink" title="TypeORM"></a>TypeORM</h2><p><code>ORM</code>是对象关系映射器。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install --save typeorm mysql</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nestjs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nestjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2022/07/16/Mysql/"/>
      <url>/2022/07/16/Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p><strong>什么是数据库？什么是数据库管理系统？什么是SQL？他们之间的关系是什么？</strong></p><table><thead><tr><th>关键字</th><th>介绍</th></tr></thead><tbody><tr><td>数据库</td><td>DataBase简称<strong>DB</strong>，按照一定格式存储数据的一些文件的组合。</td></tr><tr><td>数据库管理系统</td><td>DataBaseManagement简称<strong>DBMS</strong>，是管理数据库中数据的，可以对数据进行增删改查的工具。</td></tr><tr><td>SQL</td><td>结构化查询语言，通过编写SQL语句，然后通过DBS负责执行SQL语句，完成对数据的增删改查操作。</td></tr><tr><td>关联</td><td>DBSM-&gt;执行SQl-&gt;操作DB</td></tr></tbody></table><p><strong>数据库中最基本的单元是：<code>表(table)</code> 用表格来表示数据，如下：</strong></p><table><thead><tr><th>name</th><th>sex</th><th>year</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>20</td></tr><tr><td>李四</td><td>女</td><td>18</td></tr><tr><td>王五</td><td>男</td><td>22</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>任何一张表都有<code>行(row)</code>和<code>列(column)</code></li><li>行：称为数据</li><li>列：称为字段</li><li>每个字段包含了：<code>字段名</code>,<code>数据类型</code>,<code>约束</code>等属性。（比如唯一性约束：姓名不能重复，id不能重复等）</li></ol><h2 id="SQL的语句分类"><a href="#SQL的语句分类" class="headerlink" title="SQL的语句分类"></a>SQL的语句分类</h2><table><thead><tr><th>分类</th><th>描述</th></tr></thead><tbody><tr><td>DQL-数据库查询语言</td><td>凡是带有<code>select</code>关键字的查询语句，都称为DQL语言。</td></tr><tr><td>DML-数据库操作语言</td><td>对数据操作的语句(<code>insert新增</code>,<code>delete删除</code>,<code>update更新</code>),都称为DML语言。</td></tr><tr><td>DDL-数据定义语言</td><td>对表结构操作的语句(<code>create新增</code>,<code>drop删除</code>,<code>alter修改</code>),都称为DDL语言。</td></tr><tr><td>TCL-事务语言</td><td>事务提交<code>commit</code>、事务回滚<code>rollback</code></td></tr><tr><td>DCl-数据控制语言</td><td>授权<code>grent</code>、撤销<code>revoke</code></td></tr></tbody></table><h2 id="常用基本命令："><a href="#常用基本命令：" class="headerlink" title="常用基本命令："></a>常用基本命令：</h2><p>sql文件中的数据导入：<code>source</code>+<code>sql文件路径</code>(路径中不要有中文、不要有空格)</p><p>查看数据库版本号？ <code>select version</code></p><p>终止当前当前命令的输入? <code>\c</code></p><p>查看表结构：<code>desc 表名</code>(包含字段名、字段类型等信息)</p><h1 id="Mac下安装-mysql"><a href="#Mac下安装-mysql" class="headerlink" title="Mac下安装 mysql"></a>Mac下安装 mysql</h1><p><strong>分为两个步骤：</strong></p><ol><li>使用安装包直接安装，下一步下一步直到安装成功就是了;</li><li>配置环境变量;</li></ol><p>打开个人盘符，找到<code>bash_profile</code>,添加以下环境变量配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mysql</span></span><br><span class="line">export PATH=$&#123;PATH&#125;:/usr/local/mysql/bin</span><br><span class="line">export PATH=$&#123;PATH&#125;:/usr/local/mysql/support-files</span><br></pre></td></tr></table></figure><ol start="3"><li>终端进入个人盘符，重新执行shell;</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/bash_profile</span><br></pre></td></tr></table></figure><ol start="4"><li>查看mysql是否安装成功;</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><h2 id="启动停止重启命令"><a href="#启动停止重启命令" class="headerlink" title="启动停止重启命令"></a>启动停止重启命令</h2><ol><li>先进入<code>mysql</code>安装路径下的<code>bin</code>目录;</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/bin/</span><br></pre></td></tr></table></figure><ol start="2"><li>登录管理员权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><ol start="3"><li>输入对应的命令;</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动MySQL服务</span></span><br><span class="line">sudo /usr/local/MySQL/support-files/mysql.server start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止MySQL服务</span></span><br><span class="line">sudo /usr/local/mysql/support-files/mysql.server stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启MySQL服务</span></span><br><span class="line">sudo /usr/local/mysql/support-files/mysql.server restart</span><br></pre></td></tr></table></figure><h2 id="使用终端连接数据库"><a href="#使用终端连接数据库" class="headerlink" title="使用终端连接数据库"></a>使用终端连接数据库</h2><p>1.打开偏好设置，找到<code>mysql</code>,关闭<code>Mysql服务</code>,<code>Stop Mysql Srever</code></p><p>2.进入<code>mysql</code>安装目录下的<code>bin</code>目录;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/bin/</span><br></pre></td></tr></table></figure><p>3.登录管理员权限;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>4.禁用<code>mysql</code>验证密码功能(回车后会自动重启<code>mysql</code>，可以在偏好设置里看到<code>mysql</code>是<code>running</code>状态);</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure><p>5.当前终端不关闭，新建一个终端窗口，进入<code>mysql</code>安装目录下的<code>bin</code>目录;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/bin/</span><br></pre></td></tr></table></figure><p>6.启动mysql数据库z;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysql</span><br></pre></td></tr></table></figure><p>7.如看到以下界面，代表数据库启动并且连接成功;</p><p><img src="https://s2.loli.net/2022/02/03/aOtcKjCFXR2Hwqh.png" alt="image-20220203143417267"></p><p><strong>如果需要修改密码:</strong></p><p>8.冲刷特权,注意要加上分号;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>9.设置新的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user ‘root’@‘localhost’ identified with mysql_native_password by ‘你的新密码’;</span><br></pre></td></tr></table></figure><p>10.再次冲刷特权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>11.断开<code>mysql</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>12.再次打开终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/bin</span><br></pre></td></tr></table></figure><p>13.开启无密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p shutdown</span><br></pre></td></tr></table></figure><p>14.然后重启<code>mysql</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysql</span><br></pre></td></tr></table></figure><h1 id="库的基本操作"><a href="#库的基本操作" class="headerlink" title="库的基本操作"></a>库的基本操作</h1><div class="note primary no-icon flat"><p>1.操作数据库必须带分号<code>;</code>,否则不执行该命令；</p><p>2.不区分大小写；</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建数据库</span></span><br><span class="line">create database test;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除数据库</span></span><br><span class="line">drop database test;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示当前数据库</span></span><br><span class="line">show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定数据库</span></span><br><span class="line">use test;</span><br></pre></td></tr></table></figure><h1 id="表的基本操作"><a href="#表的基本操作" class="headerlink" title="表的基本操作"></a>表的基本操作</h1><div class="note primary no-icon flat"><p>表操作的语句被称为DDl语句，包括<code>create</code>、<code>drop</code>、<code>alter</code></p><p>表的命名建议： <code>t_</code>或者<code>tab_</code>开始</p></div><h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>varchar</td><td>可变长度的字符串，根据字段长度动态分配空间（<code>缺点：效率低</code>）。</td></tr><tr><td>char</td><td>定长字符串，分配固定长度的空间去存储数据。（<code>使用不恰当，会导致空间的浪费</code>）</td></tr><tr><td>int</td><td>数字中的整数型。</td></tr><tr><td>bigint</td><td>数字中的长整型。</td></tr><tr><td>float</td><td>单精度浮点型数据。</td></tr><tr><td>double</td><td>双精度浮点型数据。</td></tr><tr><td>datetime</td><td>长日期（<code>包括时分秒 YYYY-MM-DD HH:mm:ss</code>）。</td></tr><tr><td>date</td><td>短日期（<code>YYYY-MM-DD</code>）。</td></tr><tr><td>text</td><td>字符大对象，最多4个g的字符串。</td></tr><tr><td>blob</td><td>二进制大对象，图片，视频等媒体数据（<code>插入数据的时候要用io流</code>）。</td></tr></tbody></table><div class="note danger no-icon flat"><p>varchar和char怎么选？</p><p>例如<code>性别字段</code>，固定长度的，所以选择char。</p><p>例如<code>姓名字段</code>，不固定长度，所以选择varchar。</p></div><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><div class="note success no-icon flat"><p>create table 表名（</p><p>​字段名1，数据类型，</p><p>​字段名2，数据类型 default ‘默认值’，</p><p>​字段名3，数据类型 comment ‘字段注释’</p><p>）</p></div><p>模拟建表：<code>t_movie</code> （要求包含的字段名：电影编号、电影名字、描述信息、上映时间、时长、海报图片）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table t_movie (</span><br><span class="line">  id int,</span><br><span class="line">  m_name varchar(255),</span><br><span class="line">  m_desc text,</span><br><span class="line">  m_onTime date,</span><br><span class="line">  m_long double</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note info disabled"><p>字段类型为<code>date</code>的时候，插入数据要使用<code>str_to_date</code>转换格式：str_to_date(‘字符串日期’, ‘日期格式’)</p></div><div class="note info disabled"><p>mysql对应的日期格式： <code>%Y-%m-%d %h:%i:%s</code></p></div><h2 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看t_movie表;</span></span><br><span class="line">desc t_movie;</span><br><span class="line"></span><br><span class="line">+----------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type         | Null | Key | Default | Extra |</span><br><span class="line">+----------+--------------+------+-----+---------+-------+</span><br><span class="line">| id       | int(11)      | YES  |     | NULL    |       |</span><br><span class="line">| m_name   | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| m_desc   | text         | YES  |     | NULL    |       |</span><br><span class="line">| m_onTime | date         | YES  |     | NULL    |       |</span><br><span class="line">| m_long   | double       | YES  |     | NULL    |       |</span><br><span class="line">+----------+--------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除t_movie张表（如果存在）；</span></span><br><span class="line">drop table if exists t_movie;</span><br></pre></td></tr></table></figure><h2 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h2><p><strong>实现表的复制，表的数据也会同时存在。</strong></p><p>create table t_user2 as select * from t_user;</p><p>将<code>select * from t_user</code>查询结果作为一张表来新建一个叫<code>t_user2</code>的表。</p><p><strong>如果只想复制某一列、两列的数据：</strong></p><p><code>create table t_user2 as select name,birth from t_user;</code></p><h1 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h1><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">查 select</button><button type="button" class="tab " data-href="-2">增 insert</button><button type="button" class="tab " data-href="-3">删 delete</button><button type="button" class="tab " data-href="-4">改 update</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div class="note primary no-icon flat"><p>select 字段1,字段2 from 表；</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询表中所有信息 （可读性差、效率低、先将*转换为所有字段名）</span></span><br><span class="line">select * from t_user;</span><br><span class="line"></span><br><span class="line">+------+--------+------------+</span><br><span class="line">| id   | name   | birth      |</span><br><span class="line">+------+--------+------------+</span><br><span class="line">|    1 | bernie | 1998-10-16 |</span><br><span class="line">|    3 | Eho11  | 2000-12-12 |</span><br><span class="line">+------+--------+------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">带条件的查询</span></span><br><span class="line">select id,name from t_user where id=3;</span><br><span class="line"></span><br><span class="line">+------+-------+</span><br><span class="line">| id   | name  |</span><br><span class="line">+------+-------+</span><br><span class="line">|    3 | Eho11 |</span><br><span class="line">+------+-------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字段取别名（只是将查询结果显示为别名，不影响表结构）</span></span><br><span class="line">select id, name as nick_name from t_user;</span><br><span class="line"></span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | nick_name |</span><br><span class="line">+------+-----------+</span><br><span class="line">|    1 | bernie    |</span><br><span class="line">|    3 | Eho11     |</span><br><span class="line">|    4 | zwd       |</span><br><span class="line">+------+-----------+</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上nick_name只是查询的时候是这个别名，数据库中还是name</span></span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><table><thead><tr><th>描述</th><th>符号</th></tr></thead><tbody><tr><td>等于</td><td>&#x3D;</td></tr><tr><td>不等于</td><td>&lt;&gt; 或者 !&#x3D;</td></tr><tr><td>小于</td><td>&lt;</td></tr><tr><td>小于等于</td><td>&lt;&#x3D;</td></tr><tr><td>大于</td><td>&gt;</td></tr><tr><td>大于等于</td><td>&gt;&#x3D;</td></tr><tr><td>两者之间</td><td>between … and …</td></tr><tr><td>为null</td><td>is null</td></tr><tr><td>不为null</td><td>is not null</td></tr><tr><td>并且</td><td>and</td></tr><tr><td>或者</td><td>or</td></tr><tr><td>and和or同时出现</td><td>有优先级问题 and的优先级比or高</td></tr><tr><td>包含</td><td>in</td></tr><tr><td>模糊查询</td><td>like</td></tr></tbody></table><p>现在有一张员工表，包含了员工编号、姓名、岗位、部门、上级领导编号、创建日期、薪资、部门编号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+-----------+------+---------------------+------+---------+--------+</span><br><span class="line">| empno | ename  | job       | mgr  | hiredata            | sal  | comm    | deptno |</span><br><span class="line">+-------+--------+-----------+------+---------------------+------+---------+--------+</span><br><span class="line">|  7369 | SMITH  | CLEAR     | 7902 | 1980-12-17 00:00:00 |  800 | NULL    |     20 |</span><br><span class="line">|  7499 | ALLEN  | SALEMAN   | 7698 | 1981-02-20 00:00:00 | 1600 | 300.00  |     30 |</span><br><span class="line">|  7521 | WARD   | SALEMAN   | 7696 | 1981-02-22 00:00:00 | 1250 | 500.00  |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-22 00:00:00 | 2975 | NULL    |     20 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-06-09 00:00:00 | 2850 | NULL    |     30 |</span><br><span class="line">|  7564 | MARTIN | SALEMAN   | 7698 | 1981-05-22 00:00:00 | 1425 | 1400.00 |     30 |</span><br><span class="line">|  7934 | FORD   | CLERK     | 7782 | 1982-10-22 00:00:00 | 1300 | NULL    |     10 |</span><br><span class="line">|  7902 | JAMES  | PRESIDENT | NULL | 1987-12-02 00:00:00 | 5000 | NULL    |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1981-11-17 00:00:00 | 3000 | NULL    |     20 |</span><br><span class="line">+-------+--------+-----------+------+---------------------+------+---------+--------+</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p><strong>几个select查询例子：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询名字中带有 S 的员工信息 -------模糊查询</span></span><br><span class="line">select * from emp where ename like &#x27;%S%&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">%匹配任意个字符，_一个字符（一个下划线只匹配一个字符）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">%t   ------ 以t结尾</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">%k   ------ 以k开头</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">_a%  ------ 名字第二个是a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">__r% ------ 名字第三个是r</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 薪资等于800的 员工的姓名和编号 -------等于</span></span><br><span class="line">select empno,ename from emp where sal = 800;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 薪资不等于800 的员工的姓名和编号 -------不等于</span></span><br><span class="line">select empno,ename from emp where sal != 800;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者 &lt;&gt;语法</span></span><br><span class="line">select empno,ename from emp where sal &lt;&gt; 800;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 薪资在1250到2850 之间的员工姓名和编号 -------区间</span></span><br><span class="line">select empno, ename from emp where sal between 1250 and 2850;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 <span class="built_in">comm</span>字段为null 的员工姓名和编号 ------- 为null</span></span><br><span class="line">select empno, ename from emp where comm is null;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在数据库中，null不代表一个值，而是一种状态，表示啥都没有</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 岗位是MANAGER 并且薪资大于2500 的员工姓名和编号 -------并且</span></span><br><span class="line">select empno, ename from emp where job=&#x27;MANAGER&#x27; and sal&gt;2500;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 岗位是经理或者销售 的员工姓名和编号 -------或者</span></span><br><span class="line">select empno,ename from emp where job = &#x27;manage&#x27; or job = &#x27;saleman&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 岗位是经理和销售 的员工姓名和编号 -------包含</span></span><br><span class="line">select empno, ename from emp where job in(&#x27;manage&#x27;,&#x27;saleman&#x27;);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里<span class="keyword">in</span>(<span class="string">&#x27;manage&#x27;</span>,<span class="string">&#x27;saleman&#x27;</span>)代表只能是manage或者saleman</span></span><br></pre></td></tr></table></figure></div><h2 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h2><div class="note info disabled"><p>特点：一个输入，对应一个输出</p></div><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>lower</td><td>转换小写</td></tr><tr><td>upper</td><td>转换大写</td></tr><tr><td>substr</td><td>取子串 <code>substring(被截取字符串， 开始截取位置, 截取长度)</code></td></tr><tr><td>length</td><td>取长度</td></tr><tr><td>trim</td><td>去除首尾空格</td></tr><tr><td>str_to_date</td><td>将字符串转换成日期，将varchar类型转换成date类型</td></tr><tr><td>date_format</td><td>将日期转换为指定日期的字符串 将date类型转换成varchar类型</td></tr><tr><td>format</td><td>设置千分位</td></tr><tr><td>round</td><td>四舍五入<code>select round(数据，保留几位小数) from 表名;</code></td></tr><tr><td>rand</td><td>生成随机数<code>select rand()*100 from emp</code></td></tr><tr><td>ifnull</td><td>可以将null转换成一个具体值 <code>ifnull(数据，初始化默认值)</code></td></tr><tr><td>concat</td><td>字符串拼接<code>select concat(数据,&#39;拼接内容&#39;) from 表名;</code></td></tr></tbody></table><div class="note info no-icon flat"><p><strong>几个例子</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将查询员工名字 转换为小写--------lower</span></span><br><span class="line">select lower(ename) as name from emp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将查询员工名字的 前2位截取掉--------substr</span></span><br><span class="line">select substr(ename, 2) from emp;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截取员工姓名的前2位--------substr</span></span><br><span class="line">select substr(ename, 1, 2) from emp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询员工名字长度--------length</span></span><br><span class="line">select length(ename) from emp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将员工薪资四舍五入保留2位小数--------round</span></span><br><span class="line">select round(sal，2) from 表名;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将查询员工名字 都拼接上 <span class="string">&#x27;-tounick&#x27;</span> --------concat</span></span><br><span class="line">select concat(ename, &#x27;-tounick&#x27;) as name from emp;</span><br></pre></td></tr></table></figure><p>在所有数据库中，所有的NULL和数学运算结果都为NULL，避免这种情况需要使用<code>ifnull</code></p><p><code>ifnull(数据，被当做哪个值)</code>：如果数据为NULL的时候，把这个数据当做哪个值</p><p><code>select ename,(sal+ifnull(comm, 0))*12 as yearsal from emp;</code></p></div><h2 id="分组函数（多行处理）"><a href="#分组函数（多行处理）" class="headerlink" title="分组函数（多行处理）"></a>分组函数（多行处理）</h2><div class="note success no-icon flat"><p>特点：多个输入，对应一个输出</p><p>select … from … group by …</p></div><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>count</td><td>取得记录数</td></tr><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>取平均值</td></tr><tr><td>max</td><td>取最大的数</td></tr><tr><td>min</td><td>取最小的数</td></tr></tbody></table><div class="note danger no-icon flat"><p><code>注意</code>: </p><p>1.在使用的时候，<code>必须先进行分组，然后才可以使用</code>(如果没有对数据进行分组，整张表默认为一组)。</p><p>2.会自动忽略<code>NULL</code>(如果计算求和，不需要提前使用ifnull做处理)。</p><p>3.不能直接使用在<code>where</code>语句中：（因为分组函数在使用的时候必须先分组）</p><p>4.多个分组函数可以组合一起使用</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">薪资最高是多少--------max</span></span><br><span class="line">select max(sal) from emp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有薪资总和--------<span class="built_in">sum</span></span></span><br><span class="line">select sum(sal) from emp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出比最低工资还要高的员工信息 --------错误示例</span></span><br><span class="line">select ename from emp where sal &gt; min(sal); # Error!!!!!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多个分组函数一起使用</span></span><br><span class="line">select sum(sal) as total,min(sal) as minSal,max(sal) as maxSal from emp;</span><br><span class="line">+-------+--------+--------+</span><br><span class="line">| total | minSal | maxSal |</span><br><span class="line">+-------+--------+--------+</span><br><span class="line">| 20200 |    800 |   5000 |</span><br><span class="line">+-------+--------+--------+</span><br></pre></td></tr></table></figure><p>分组函数案例：</p><p>在select关键字后面，只能跟参与分组的字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个岗位的和？（按照岗位分组，然后对工资求和）</span></span><br><span class="line">select job,sum(sal) from emp group by job;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上执行顺序：先从emp表中查询数据，根据job字段分组，然后对每一组的数据进行<span class="built_in">sum</span>求和。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个部门的最高薪资？(按照部门编号分组)</span></span><br><span class="line">select deptno,max(sal) from emp group by deptno;</span><br><span class="line">+--------+----------+</span><br><span class="line">| deptno | max(sal) |</span><br><span class="line">+--------+----------+</span><br><span class="line">|     10 |     5000 |</span><br><span class="line">|     20 |     3000 |</span><br><span class="line">|     30 |     2850 |</span><br><span class="line">+--------+----------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个部门、不同岗位的最高薪资？(两个字段联合成一个字段看，两个字段联合分组)</span></span><br><span class="line">select deptno,job,max(sal) from emp group by deptno,job;</span><br></pre></td></tr></table></figure><p><code>having</code>可以对分组后的数据，进一步过滤。(只能和group by联合使用)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个部门最高薪资大于3000的？</span></span><br><span class="line">select deptno，max(sal) from emp group by deptno having sal &gt; 3000;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上分组函数的使用，效率低。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不如先过滤掉薪资大于3000的，在进行分组，再查询。</span></span><br><span class="line">select deptno, max(sal) from emp where sal &gt; 3000 group by deptno;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还有一种情况是<span class="built_in">where</span>实现不了的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出平均薪资大于2500的部门的平均薪资？</span></span><br><span class="line">select deptno,avg(sal) as avgSal from emp group by deptno having avg(sal) &gt; 2500;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><div class="note info no-icon flat"><p>默认排序是升序: <code>asc</code></p><p>指定降序：<code>desc</code></p></div><p>单个字段排序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询工资，指定降序</span></span><br><span class="line">select ename,sal from emp order by sal desc;</span><br></pre></td></tr></table></figure><p>多个字段排序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询员工和薪资，要求薪资升序，如果薪资一样，再按照名字升序排列？</span></span><br><span class="line">select empno, ename from emp order by sal asc, ename asc;</span><br></pre></td></tr></table></figure><p>综合案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出工资在1250到3000之间的员工，要求按照薪资降序排列？</span></span><br><span class="line">select ename from emp where sal between 1250 and 3000 order by sal desc;</span><br></pre></td></tr></table></figure><h2 id="查询顺序总结"><a href="#查询顺序总结" class="headerlink" title="查询顺序总结"></a>查询顺序总结</h2><div class="note info no-icon flat"><p>语句：select … from … where … group by … having … order … limit …</p><p>执行顺序：from –&gt; where –&gt; group by –&gt; having –&gt; select –&gt; order by –&gt; limit</p><p>从某张表中查询数据：</p><p>1.先经过where条件筛选出有价值的数据</p><p>2.对这些有价值的数据进行分组</p><p>3.分组之后使用having进行过滤</p><p>4.通过select查询出来</p><p>5.通过排序输出数据</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">大综合案例</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除了job是MANAGER之外的，要求按照平均薪资降序排？</span></span><br><span class="line">select job,avg(sal) as avgSal from emp where job&lt;&gt;&quot;MANAGER&quot; group by job having avg(sal) &gt; 1500  order by avgSal desc;</span><br></pre></td></tr></table></figure><h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><div class="note info no-icon flat"><p>limit是将查询结果分一部分出来，用于分页处理。</p><p><code>完整用法</code>：limit(起始下标0， length长度)</p><p><code>注意</code>:limit 5代表取前5</p><p><code>注意</code>:limit在order by之后使用</p><p><code>通用分页规律</code>:limit((pageNo - 1)*pageSize, pageSize)</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按照薪资降序，取出排名在前5名的员工？</span></span><br><span class="line">select ename from emp order by sal desc limit 5;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取出工资排名在[3-5]名的员工？</span></span><br><span class="line">select ename from emp order by sal desc limit(2, 3);</span><br></pre></td></tr></table></figure><h2 id="union合并集合"><a href="#union合并集合" class="headerlink" title="union合并集合"></a>union合并集合</h2><div class="note info no-icon flat"><p>将查询结果进行合并</p><p>union在进行结果集合并的时候，要求两个结果集列数相同。</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询工作岗位是<span class="string">&#x27;MANAGE&#x27;</span>和<span class="string">&#x27;SALEMAN&#x27;</span>的员工？</span></span><br><span class="line">select ename,job from emp where job = &#x27;MANAGE&#x27; union select ename,job from emp where job = &#x27;SALEMAN&#x27;;</span><br></pre></td></tr></table></figure><h2 id="distinct去除重复"><a href="#distinct去除重复" class="headerlink" title="distinct去除重复"></a>distinct去除重复</h2><div class="note info no-icon flat"><p>把查询结果去除重复记录，不会修改数据库数据。</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从员工表中查询去重后的岗位名称</span></span><br><span class="line">select distinct job from emp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">联合去重</span></span><br><span class="line">select distinct ename,job from emp; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上表示：distinect出现在ename，job两个字段之前，表示两个字段联合起来去重；</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计岗位的数量？</span></span><br><span class="line">select count(distinct job) as jobNum from emp;</span><br></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><div class="note info no-icon flat"><p>从一张表中单独查询，称为单表查询。</p><p>从多张表联合起来查数据，称为连接查询。</p></div><p>表连接查询的分类：</p><ol><li>内连接<ol><li>等值连接</li><li>非等值连接</li><li>自连接</li></ol></li><li>外连接<ol><li>左连接</li><li>右连接</li></ol></li><li>全连接</li></ol><div class="note danger no-icon flat"><p>当两张表进行连接查询时，没有任何条件的限制会发生什么现象？（被称为<code>笛卡尔积现象</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询每个员工所在部门名称？</span></span><br><span class="line">select ename, dname from emp, dept;</span><br></pre></td></tr></table></figure><p>以上 没有使用条件限制，最终查询的结果是两张表数据的乘积。</p><p>如何避免<code>笛卡尔积现象</code></p><p>连接时添加条件限制，满足这个条件的记录才被筛选出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename, dname from emp,dept where emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure><p>以上 虽然查询的结果正确，但是并没有减少匹配次数，依然是笛卡尔积现象。</p><p>一个很关键的写法，给表取别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.ename, d.dname from emp e, dept d where e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><p>结论：表的连接次数越多，效率越低，尽量避免表的连接次数。</p></div><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">内连接-等值连接</button><button type="button" class="tab " data-href="-2">内连接-非等值连接</button><button type="button" class="tab " data-href="-3">内连接-自连接</button><button type="button" class="tab " data-href="-4">外连接</button><button type="button" class="tab " data-href="-5">多表连接查询</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>99语法使用<code>join on</code></p><p><code>on</code>后面添加的是：e表和d表连接的条件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询每个员工所在部门名称，显示员工名和部门名？</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">92语法</span></span><br><span class="line">select e.ename, d.dname from emp e, dept d where e.deptno = d.deptno;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">99语法</span></span><br><span class="line">select e.ename, d.dname from emp e join dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">薪资等级表salgrade</span></span><br><span class="line">+-------+-------+-------+</span><br><span class="line">| grade | losal | hisal |</span><br><span class="line">+-------+-------+-------+</span><br><span class="line">| 1     | 700   | 1200  |</span><br><span class="line">| 2     | 1201  | 1400  |</span><br><span class="line">| 5     | 3001  | 9999  |</span><br><span class="line">| 3     | 1401  | 2000  |</span><br><span class="line">| 4     | 2001  | 3001  |</span><br><span class="line">+-------+-------+-------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个员工的薪资等级，要求显示员工名，薪资，薪资等级？</span></span><br><span class="line">select </span><br><span class="line">  e.ename,</span><br><span class="line">  e.sal,</span><br><span class="line">  s.grade </span><br><span class="line">from </span><br><span class="line">  emp e </span><br><span class="line">join </span><br><span class="line">  salgrade s </span><br><span class="line">on </span><br><span class="line">  e.sal between s.local and s.hisal;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><div class="note info no-icon flat"><p><code>技巧</code>：一张表看成两张表</p><p>将查询结果看成一张表，自己连接自己。</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一张表包含员工信息和上级信息</span></span><br><span class="line">select empno,ename,mgr from emp;</span><br><span class="line">+-------+--------+------+</span><br><span class="line">| empno | ename  | mgr  |</span><br><span class="line">+-------+--------+------+</span><br><span class="line">|  7369 | SMITH  | 7902 |</span><br><span class="line">|  7499 | ALLEN  | 7698 |</span><br><span class="line">|  7521 | WARD   | 7696 |</span><br><span class="line">|  7698 | BLAKE  | 7839 |</span><br><span class="line">|  7566 | JONES  | 7839 |</span><br><span class="line">|  7698 | BLAKE  | 7839 |</span><br><span class="line">|  7564 | MARTIN | 7698 |</span><br><span class="line">|  7934 | FORD   | 7782 |</span><br><span class="line">|  7902 | JAMES  | NULL |</span><br><span class="line">|  7788 | SCOTT  | 7566 |</span><br><span class="line">+-------+--------+------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将查询结果作为一张表</span></span><br><span class="line">select a.ename as &#x27;员工名&#x27;, b.ename as &#x27;上级领导&#x27; from emp a join emp b on a.mgr = b.empno;</span><br><span class="line">+-----------+--------------+</span><br><span class="line">| 员工名    | 上级领导       |</span><br><span class="line">+-----------+--------------+</span><br><span class="line">| SCOTT     | JONES        |</span><br><span class="line">| ALLEN     | BLAKE        |</span><br><span class="line">| MARTIN    | BLAKE        |</span><br><span class="line">| SMITH     | JAMES        |</span><br><span class="line">+-----------+--------------+</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><div class="note info no-icon flat"><p><code>技巧</code>：两张表使用外连接，产生了主次关系。</p><p>外连接是找出两张表之间不符合条件的数据。</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">员工表 emp</span></span><br><span class="line">+-------+--------+-----------+------+---------------------+---------+---------+--------+</span><br><span class="line">| empno | ename  | job       | mgr  | hiredata            | sal     | comm    | deptno |</span><br><span class="line">+-------+--------+-----------+------+---------------------+---------+---------+--------+</span><br><span class="line">|  7369 | SMITH  | CLEAR     | 7902 | 1980-12-17 00:00:00 | 800.00  | NULL    |     20 |</span><br><span class="line">|  7499 | ALLEN  | SALEMAN   | 7698 | 1981-02-20 00:00:00 | 1600.00 | 300.00  |     30 |</span><br><span class="line">|  7521 | WARD   | SALEMAN   | 7696 | 1981-02-22 00:00:00 | 1250.00 | 500.00  |     30 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-06-09 00:00:00 | 2850.00 | NULL    |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-22 00:00:00 | 2975.00 | NULL    |     20 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-06-09 00:00:00 | 2850.00 | NULL    |     30 |</span><br><span class="line">|  7564 | MARTIN | SALEMAN   | 7698 | 1981-05-22 00:00:00 | 1425.00 | 1400.00 |     30 |</span><br><span class="line">|  7934 | FORD   | CLERK     | 7782 | 1982-10-22 00:00:00 | 1300.00 | NULL    |     10 |</span><br><span class="line">|  7902 | JAMES  | PRESIDENT | NULL | 1987-12-02 00:00:00 | 5000.00 | NULL    |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1981-11-17 00:00:00 | 3000.00 | NULL    |     20 |</span><br><span class="line">+-------+--------+-----------+------+---------------------+---------+---------+--------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部门表 dept</span></span><br><span class="line">+--------+------------+----------+</span><br><span class="line">| deptno | dname      | loc      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><p>以上两张表，没有一个员工是对应部门编号40：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select e.ename,d.dname from emp e right jion dept d on e.deptno = d.deptno;</span><br><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| FORD   | ACCOUNTING |</span><br><span class="line">| JAMES  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| NULL   | OPERATIONS |</span><br><span class="line">+--------+------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">右连接：将员工表和部门表中符合on条件的数据筛选后，在查询剩下的数据。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">right: 将右边的表看成是主表，主要为了将这张表的数据全部查询，顺便查询左边的表。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">left：将左边的表看成是主表，捎带右边的表进行条件筛选。</span></span><br></pre></td></tr></table></figure><p>外连接的查询结果条数 &gt;&#x3D; 内连接的查询结果条数？ ：正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询每个员工的上级领导，要求显示所有员工的名字和领导名？</span></span><br><span class="line">select a.ename as &#x27;员工&#x27;, b.ename as &#x27;上级领导&#x27; from emp a left join emp b on a.mgr = b.empno;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-5"><div class="note info no-icon flat"><p><code>语法</code>：select … from a join b on a和b的连接条件 join c on 前一结果和c的条件 join d on 前一结果和c的条件</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个员工的部门名称以及工资等级，要求显示员工名，部门名，薪资，薪资等级？</span></span><br><span class="line">select </span><br><span class="line">  e.ename as &#x27;员工名&#x27;,</span><br><span class="line">  d.dname as &#x27;部门名&#x27;,</span><br><span class="line">  e.sal as &#x27;薪资&#x27;,</span><br><span class="line">  s.grade as &#x27;薪资等级&#x27;</span><br><span class="line">from </span><br><span class="line">  emp e</span><br><span class="line">left join</span><br><span class="line">  dept d</span><br><span class="line">on</span><br><span class="line">  e.deptno = d.deptno</span><br><span class="line">left join</span><br><span class="line">  salgrade s</span><br><span class="line">on</span><br><span class="line">  e.sal between s.losal and s.hisal;</span><br><span class="line">+-----------+------------+--------+--------------+</span><br><span class="line">| 员工名    | 部门名     | 薪资   | 薪资等级     |</span><br><span class="line">+-----------+------------+--------+--------------+</span><br><span class="line">| SMITH     | RESEARCH   |    800 | 1            |</span><br><span class="line">| WARD      | SALES      |   1250 | 2            |</span><br><span class="line">| FORD      | ACCOUNTING |   1300 | 2            |</span><br><span class="line">| JAMES     | ACCOUNTING |   5000 | 5            |</span><br><span class="line">| ALLEN     | SALES      |   1600 | 3            |</span><br><span class="line">| MARTIN    | SALES      |   1425 | 3            |</span><br><span class="line">| JONES     | RESEARCH   |   2975 | 4            |</span><br><span class="line">| SCOTT     | RESEARCH   |   3000 | 4            |</span><br><span class="line">| BLAKE     | SALES      |   2850 | 4            |</span><br><span class="line">+-----------+------------+--------+--------------+</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><div class="note primary no-icon flat"><p>select语句中嵌套select语句，被嵌套的语句称为子查询。</p><p><code>语法</code>：select …(select) from …(select) where …(select)</p></div><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">where子句中出现子查询</button><button type="button" class="tab " data-href="-2">from子句中出现子查询</button><button type="button" class="tab " data-href="-3">select子句中出现子查询</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>where子句不可以出现分组函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">错误</span></span><br><span class="line">select e.ename,e.sal from emp where sal &gt; min(sal)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正确</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.找出最低工资</span></span><br><span class="line">select min(sal) from emp;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.排除最低工资的 其他所有显示</span></span><br><span class="line">select e.ename,e.sal from emp e where e.sal &gt; (select min(sal) from emp);</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><div class="note primary no-icon flat"><p><code>注意</code>：from后面的子查询，可以将子查询的查询结果当做一张临时表。</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个岗位的平均工资的薪资等级</span></span><br><span class="line">select </span><br><span class="line">  t.*,</span><br><span class="line">  s.grade </span><br><span class="line">from </span><br><span class="line">  (select job,avg(sal) as avgsal from emp group by job) t </span><br><span class="line">join </span><br><span class="line">  salgrade s </span><br><span class="line">on </span><br><span class="line">  t.avgsal between s.losal and s.hisal;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出每个员工的部门名称，要求显示员工名，部门名？</span></span><br><span class="line">select </span><br><span class="line">  e.ename,</span><br><span class="line">  (select d.dname from dept as d where e.deptno = d.deptno) as dname </span><br><span class="line">from </span><br><span class="line">  emp e;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="-2"><div class="note primary no-icon flat"><p>插入一条记录：insert into 表(字段1，字段2，字段3…) values (值1，值2，值3…);</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert into t_user(id, name, birth) values(1, &#x27;bernie&#x27;, &#x27;1998-10-16&#x27;);</span><br><span class="line"></span><br><span class="line">+------+--------+------------+</span><br><span class="line">| id   | name   | birth      |</span><br><span class="line">+------+--------+------------+</span><br><span class="line">|    1 | bernie | 1998-10-16 |</span><br><span class="line">+------+--------+------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表名的后面也可以省略字段名，但是values对应的地方要默认写全，自动递增的字段需要用 NULL 来占位</span></span><br></pre></td></tr></table></figure><div class="note primary no-icon flat"><p>插入多条记录：insert into 表 values(),(),(),()…；</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert into t_user values(2, &#x27;Jack&#x27;, &#x27;2000--01-12&#x27;),(3, &#x27;Echo&#x27;, &#x27;1993--05-12&#x27;);</span><br><span class="line"></span><br><span class="line">+------+--------+------------+</span><br><span class="line">| id   | name   | birth      |</span><br><span class="line">+------+--------+------------+</span><br><span class="line">|    1 | bernie | 1998-10-16 |</span><br><span class="line">|    2 | Jack   | 2000-01-12 |</span><br><span class="line">|    3 | Echo   | 1993-05-12 |</span><br><span class="line">+------+--------+------------+</span><br></pre></td></tr></table></figure><p>mysql短日期默认格式：%Y-%m-%d；长日期默认格式 %Y-%m-%d %h-%i-%s</p><p>在mysql中获取当前系统时间用<code>now()</code>，并且获取的时间是长日期，带有时分秒的时间。</p><p><code>insert into t_user(id, name, birth) values(4, &#39;zwd&#39;, now());</code></p></div><div class="tab-item-content" id="-3"><div class="note primary no-icon flat"><p>delete from 表名 where 条件;</p><p><code>注意</code>：没有where条件限制会导致 所有数据被删除；</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delete from t_user where id = 2;</span><br><span class="line"></span><br><span class="line">+------+--------+------------+</span><br><span class="line">| id   | name   | birth      |</span><br><span class="line">+------+--------+------------+</span><br><span class="line">|    1 | bernie | 1998-10-16 |</span><br><span class="line">|    3 | Echo   | 1993-05-12 |</span><br><span class="line">+------+--------+------------+</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><div class="note primary no-icon flat"><p>update 表名 set 字段1&#x3D;值,字段2&#x3D;值,字段3&#x3D;值 where条件;</p><p><code>注意</code>：没有where条件限制会导致 所有数据被更新；</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">update t_user set name=&#x27;Eho11&#x27;,birth=&#x27;2000-12-12&#x27; where id=3;</span><br><span class="line"></span><br><span class="line">+------+--------+------------+</span><br><span class="line">| id   | name   | birth      |</span><br><span class="line">+------+--------+------------+</span><br><span class="line">|    1 | bernie | 1998-10-16 |</span><br><span class="line">|    3 | Eho11  | 2000-12-12 |</span><br><span class="line">+------+--------+------------+</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>非空约束 not null</li><li>唯一性约束 unique</li><li>主键约束 primary key</li><li>外键约束 foreign key</li></ul><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">非空约束</button><button type="button" class="tab " data-href="-2">唯一性约束</button><button type="button" class="tab " data-href="-3">主键约束</button><button type="button" class="tab " data-href="-4">外键约束</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>非空约束的字段不能为NULL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table t_vip (</span><br><span class="line">  id int,</span><br><span class="line">  name varchar(255) not null</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>约束的字段不能重复，可以为NULL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table t_vip(</span><br><span class="line">  id int,</span><br><span class="line">  name varchar(255) unique</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>联合唯一性：名字和邮箱联合起来唯一性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table t_vip(</span><br><span class="line">id int,</span><br><span class="line">name varchar(255),</span><br><span class="line">email varchar(255),</span><br><span class="line">unique(name, email)</span><br><span class="line">)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用场景 密码可以一样，但是密码和账号需要使用unique</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><p>如果一个字段被<code>no null</code>和<code>unique</code>约束的话，该字段自动变成主键字段。</p><p>主键值是每一行数据的唯一标识，相当于每一行数据的身份证号。</p><p>建议：主键值建议使用 int bigint char等类型，一般都是定长的</p><p>自然主键自动递增： auto_increment</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table t_vip(</span><br><span class="line">  id int primary key auto_increment,</span><br><span class="line">  name varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><p>业务背景：设计数据库表，来描述班级和学生的信息？</p><p>第一种方式：班级和学生放在同一张表</p><table><thead><tr><th>no</th><th>student_name</th><th>Class_name</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>武平县岩前镇岩前小学六年级1班</td></tr><tr><td>2</td><td>李四</td><td>武平县岩前镇岩前小学六年级1班</td></tr><tr><td>3</td><td>王五</td><td>武平县岩前镇岩前小学六年级2班</td></tr><tr><td>4</td><td>赵六</td><td>武平县岩前镇岩前小学六年级2班</td></tr></tbody></table><p>分析：虽然能满足需求，但是<code>class_name</code>中重复数据太多，占用太多空间。</p><p>第二种方式：设计成两张表，一张班级表<code>t_class</code>、一张学生表<code>t_student</code></p><p>t_class</p><table><thead><tr><th>cno(pk)</th><th>class_name</th></tr></thead><tbody><tr><td>100</td><td>武平县岩前镇岩前小学六年级1班</td></tr><tr><td>1001</td><td>武平县岩前镇岩前小学六年级2班</td></tr></tbody></table><p>t_student</p><table><thead><tr><th>no(pk)</th><th>Student_name</th><th>cno(fk)</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>100</td></tr><tr><td>2</td><td>李四</td><td>100</td></tr><tr><td>3</td><td>王五</td><td>101</td></tr><tr><td>4</td><td>赵六</td><td>101</td></tr></tbody></table><p>通过学生表中的外键cno就可以从班级表中找到对应的班级。</p><p><code>注意：</code>一旦有外键，就形成了父子关系，有外键的那张表是子表。</p><p><code>注意：</code>外键值在父表中一定是主键值。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>什么是事务？</p><p>一个事务是完整的业务逻辑。也可以理解为批量的DML语句的同时成功或同时失败</p><p>例如：</p><p>A向B转账1w</p><p>A账户的钱扣去1w（update）</p><p>B账户的钱加上1w（update）</p><p>以上操作是最小的工作单元，要么同时成功，要么同时失败，不可再分。</p><div class="note primary no-icon flat"><p>只有DML语句才有事务的说法，<code>insert</code>、<code>update</code>、<code>delete</code></p></div><h2 id="提交事务："><a href="#提交事务：" class="headerlink" title="提交事务："></a>提交事务：</h2><p>执行命令：<code>commit;</code></p><p>清空事务性活动日志文件，将数据全部彻底持久化到数据库中。</p><p>提交事务标志着事务的全部结束，并且是一种全部成功的结束。</p><p>mysql是默认自动提交事务，并且数据持久化,不可以执行回滚事务。</p><p>如果要关闭默认的自动提交事务，需要在执行DML语句前先执行<code>start transaction</code></p><h2 id="回滚事务："><a href="#回滚事务：" class="headerlink" title="回滚事务："></a>回滚事务：</h2><p>执行命令：<code>rollback;</code></p><p>将之前所有DML操作全部撤销，并且清空事务性活动的日志文件。</p><p>回滚事务标志着事务的全部结束，并且是一种全部失败的结束。</p><h2 id="事务特性："><a href="#事务特性：" class="headerlink" title="事务特性："></a>事务特性：</h2><p>原子性：说明事务是最小的工作单元，不可再分。</p><p>一致性：所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败，以保证数据的一致性。</p><p>隔离性：A事务和B事务之间具有一定的隔离。A事务在操作一张表的时候，另外一个事务B也在操作这个表的时候，是怎么样的？多线程访问同一张表。</p><p>持久性：事务提交，相当于将没有保存到数据库中的数据保存进去。</p><h2 id="事务隔离："><a href="#事务隔离：" class="headerlink" title="事务隔离："></a>事务隔离：</h2><p>查看当前隔离级别：<code>select @@tx_isolation;</code></p><p>设置隔离级别：<code>set global transaction isolation level read uncommitted;</code></p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">读未提交</button><button type="button" class="tab " data-href="-2">可重复读</button><button type="button" class="tab " data-href="-3">读已提交</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>read uncommitted（最低隔离级别）</p><p>事务A可以读取到事务B提交的数据，存在脏读现象，意思是指数据是不真实的。</p><p>模拟两个事务的操作，先设置隔离级别为<code>read uncommitted</code></p><p>有一个空数据的表<code>t_user</code></p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>start transaction;</td><td>start transaction;</td></tr><tr><td>select * from t_user;（<code>没有数据</code>）</td><td>select * from t_user;（<code>没有数据</code>）</td></tr><tr><td></td><td>Insert into t_user values(‘bernie’)(<code>插入但未提交</code>)</td></tr><tr><td>select * from t_user;（<code>有一条数据</code>）</td><td></td></tr><tr><td></td><td>rollback;</td></tr><tr><td>select * from t_user;（<code>没有数据</code>）</td><td></td></tr></tbody></table></div><div class="tab-item-content" id="-2"><p>repeatable read</p><p>事务A开启后，不管是多久，在事务A读取的数据都是一致的，即使事务B将数据已修改，并且提交了，事务A读取到的数据还是没有发生改变，这就是可重复读。</p><p>例如：早上9点开启了事务，只要事务不结束，到晚上9点读取的数据还是没变化。</p><p>例如：查询银行总账，执行DML语句，需要从下午1点到下午3点，中间有人存取的钱不会影响数据。</p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>start transaction;</td><td>start transaction;</td></tr><tr><td>select * from t_user;<code>(这里查询是空数据) </code></td><td>insert into t_user values(‘bernie’);</td></tr><tr><td>select * from t_user;<code>(这里查询是空数据) </code></td><td></td></tr><tr><td></td><td>commit;</td></tr><tr><td>select * from t_user;（有数据）</td><td></td></tr></tbody></table></div><div class="tab-item-content" id="-3"><p>事务A读取到了事务B提交之后的数据，解决了脏读现象。</p><p>这种隔离级别是比较真实的数据，每一次读到的数据是绝对的真实。</p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>start transaction;</td><td>start transaction;</td></tr><tr><td>select * from t_user;<code>(这里查询是空数据) </code></td><td>insert into t_user values(‘bernie’);</td></tr><tr><td>select * from t_user;<code>(这里查询是空数据) </code></td><td></td></tr><tr><td></td><td>commit;</td></tr><tr><td>select * from t_user;（有数据）</td><td></td></tr></tbody></table></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h1><ol><li>第一范式：要求任何一张表都有主键，每一个字段原子性不可再分。</li><li>第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖。</li><li>第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖。</li><li>一对多：两张表，多的表加外键</li><li>多对多：三张表，关系表两个外键</li><li>一对一：外键唯一(foreign + unique)</li></ol><h2 id="Koa中使用mysql"><a href="#Koa中使用mysql" class="headerlink" title="Koa中使用mysql"></a>Koa中使用mysql</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql;"></a>安装mysql;</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql</span><br></pre></td></tr></table></figure><p>单独创建一个utils工具方法文件;</p><ol><li>引入mysql</li><li>创建连接池</li><li>对数据库进行增删改查操作的基础方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接池</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">hose</span>: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">// 连接服务器的(代码部署后，需要改为内网IP，而非外网)</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,        <span class="comment">// mysql运行的端口</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;cms&#x27;</span>,   <span class="comment">// 某个数据库</span></span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,      <span class="comment">// 数据库用户名</span></span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span> <span class="comment">// 数据库密码</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作数据库方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">query</span> = (<span class="params">sql, callback</span>) =&gt; &#123;</span><br><span class="line">  pool.<span class="title function_">getConnection</span>(<span class="keyword">function</span>(<span class="params">err, connection</span>) &#123;</span><br><span class="line">    connection.<span class="title function_">query</span>(sql, <span class="keyword">function</span>(<span class="params">err, rows</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(err, rows)</span><br><span class="line">      connection.<span class="title function_">release</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  query</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用mysql"><a href="#调用mysql" class="headerlink" title="调用mysql"></a>调用mysql</h3><p>上面的<code>query</code>主要方法：</p><blockquote><p>query接收两个参数：</p><p>1.sql语句</p><p>2.回调函数(err,rows) rows就是查询到的数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取到数据(需要使用到同步，等待获取到数据再返回)</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">queryData</span>(<span class="string">&#x27;select * from user &#x27;</span>, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;<span class="title function_">reject</span>(err)&#125;</span><br><span class="line">      <span class="title function_">resolve</span>(rows)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 返回数据给前端</span></span><br><span class="line">  ctx.<span class="property">body</span> = result</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一小时Nginx学习</title>
      <link href="/2022/07/16/%E4%B8%80%E5%B0%8F%E6%97%B6%E6%8B%BF%E6%8D%8FNginx/"/>
      <url>/2022/07/16/%E4%B8%80%E5%B0%8F%E6%97%B6%E6%8B%BF%E6%8D%8FNginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Nginx是一个高性能的反向代理和Web服务器软件，因为它<code>系统资源消耗低</code>、<code>运行稳定</code>、<code>高性能并发处理能力</code>等特性，在互联网企业中得到广泛应用。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>高性能、高并发</li><li>扩展性好</li><li>异步非阻塞的事件驱动模型（一个进程处理多个请求）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记不住的CSS</title>
      <link href="/2022/07/16/%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84CSS/"/>
      <url>/2022/07/16/%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><h2 id="文本溢出省略号（单行）"><a href="#文本溢出省略号（单行）" class="headerlink" title="文本溢出省略号（单行）"></a>文本溢出省略号（单行）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">10em</span>; <span class="comment">/*每行显示10个字*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden; <span class="comment">/*超出部分隐藏*/</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/*行尾显示省略号*/</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap; <span class="comment">/*不换行*/</span></span><br></pre></td></tr></table></figure><h2 id="文本溢出省略号（多行）"><a href="#文本溢出省略号（多行）" class="headerlink" title="文本溢出省略号（多行）"></a>文本溢出省略号（多行）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">10em</span>; <span class="comment">/*每行显示10个字*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden; <span class="comment">/*超出部分隐藏*/</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>; <span class="comment">/*显示3行*/</span></span><br></pre></td></tr></table></figure><h2 id="文字不换行"><a href="#文字不换行" class="headerlink" title="文字不换行"></a>文字不换行</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">word-break</span>:break-all;只对英文起作用，以字母作为换行依据</span><br><span class="line"><span class="attribute">word-wrap</span>:break-word; 只对英文起作用，以单词作为换行依据</span><br><span class="line"><span class="attribute">white-space</span>:pre-wrap; 只对中文起作用，强制换行</span><br><span class="line"><span class="attribute">white-space</span>:nowrap; 强制不换行，都起作用</span><br></pre></td></tr></table></figure><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><img src="https://raw.githubusercontent.com/berniezhong/picture-bed/master/202301071606695.jpg" width="150px"/><p>三角形盒子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>替换<code>边框宽度大小</code>，<code>边框颜色transparent</code>即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="comment">/* 替换成 transparent  */</span></span><br><span class="line">  <span class="attribute">border-top-color</span>: red;</span><br><span class="line">  <span class="attribute">border-right-color</span>: green;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-left-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="原生Input"><a href="#原生Input" class="headerlink" title="原生Input"></a>原生Input</h1><h2 id="修改placeholder样式"><a href="#修改placeholder样式" class="headerlink" title="修改placeholder样式"></a>修改placeholder样式</h2><p>input添加class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;inputClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>通过伪元素<code>-webkit-input-placeholder</code>修改默认的placeholder样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inputClass</span>::-webkit-input-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去除number上下箭头"><a href="#去除number上下箭头" class="headerlink" title="去除number上下箭头"></a>去除number上下箭头</h2><p>原生input，type为<code>number</code>时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>使用伪元素修改</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-outer-spin-button,</span><br><span class="line">input::-webkit-inner-spin-button &#123;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h1><h2 id="网页灰白色（悼念色）"><a href="#网页灰白色（悼念色）" class="headerlink" title="网页灰白色（悼念色）"></a>网页灰白色（悼念色）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>:<span class="built_in">grayscale</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试这件事儿</title>
      <link href="/2022/07/16/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/07/16/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前端性能优化："><a href="#前端性能优化：" class="headerlink" title="前端性能优化："></a>前端性能优化：</h1><h2 id="首屏加载速度："><a href="#首屏加载速度：" class="headerlink" title="首屏加载速度："></a>首屏加载速度：</h2><p>1.关于首屏加载速度慢的问题</p><p>做法：排查是否第三方的插件包引起的项目体积大的问题</p><p>解决思路：通过引入插件包的外链cdn的形式来引入，并且在入口文件index.html中给script标签添加<code>rel=preload</code>或者<code>rel=prefetch</code>，来实现首页不必要加载，进行低优加载。</p><p>2.路由的懒加载</p><p>做法：将路由使用<code>import</code>的方式导入，只有使用到这个组件的时候，才去执行加载。</p><p>解决思路：一个页面里面如果某些功能使用频率比较低的组件也可以拆分出来作为异步组件，然后去动态加载。</p><h2 id="图片打包优化："><a href="#图片打包优化：" class="headerlink" title="图片打包优化："></a>图片打包优化：</h2><p>背景：在项目中引入本地图片文件打包的时候会请求成base64的格式，而且图片文件默认会被打包进js文件里，导致没有很好的解耦文件类型。</p><p>优化：在<code>webpack</code>中使用<code>url-loader</code>对图片进行打包配置，当图片小于1024*7的时候就会打包到images目录下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chainWebpack</span>:<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">  config.<span class="property">resolve</span>.<span class="property">alias</span>.<span class="title function_">set</span>(<span class="string">&#x27;@&#x27;</span>,<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>)),</span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">  .<span class="title function_">rule</span>(<span class="string">&#x27;images&#x27;</span>)</span><br><span class="line">  .<span class="title function_">use</span>(<span class="string">&#x27;url-loader&#x27;</span>)</span><br><span class="line">  .<span class="title function_">tap</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;./images/[name].[ext]&#x27;</span>,</span><br><span class="line">      <span class="attr">limit</span>: <span class="number">1024</span> * <span class="number">7</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目难点："><a href="#项目难点：" class="headerlink" title="项目难点："></a>项目难点：</h1><h2 id="适配iphone的底部安全区域的问题"><a href="#适配iphone的底部安全区域的问题" class="headerlink" title="适配iphone的底部安全区域的问题"></a>适配iphone的底部安全区域的问题</h2><p>某些h5页面的底部操作栏，会藏在安全区域的底部</p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202308111442912.png" alt="image-20230811144234865" style="zoom: 40%;" /><p>解决这个问题之前，需要先了解iphone的安全区域都有哪些？<strong>顶部的齐刘海</strong>，<strong>底部的安全条</strong></p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202308111443120.png" alt="image-20230811144313097" style="zoom:33%;" /><ul><li>env(safe-area-inset-left) 安全区域距离左边边界的距离</li><li>env(safe-area-inset-right) 安全区域距离右边边界的距离</li><li>env(safe-area-inset-top) 安全区域距离顶部边界的距离</li><li>env(safe-area-inset-bottom) 安全区域距离底部边界的距离</li></ul><p>解决方案：</p><ol><li>在全局入口的<code>index.html</code>文件中，添加新的适配方案<code>viewport-fil=cover</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=0, maximum-scale=1.0, minimum-scale=1.0, viewport-fil=cover&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>全局的样式文件中添加</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@supports</span>(bottom:env(safe-area-inset-bottom))&#123;</span><br><span class="line">  <span class="selector-id">#app</span>&#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>:<span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">    <span class="attribute">padding-bottom</span>:<span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202308111448251.png" alt="image-20230811144828210" style="zoom:40%;" /><h2 id="H5移动端遮挡键盘的问题"><a href="#H5移动端遮挡键盘的问题" class="headerlink" title="H5移动端遮挡键盘的问题"></a>H5移动端遮挡键盘的问题</h2><p>诸如聊天的应用、评论的功能，一半文本输入框会放在页面的底部，聚焦文本框的时候，很容易产生移动键盘会遮挡住文本框的问题，不同的手机也会不同的表现形式：</p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202308111453823.png" alt="image-20230811145334794" style="zoom:33%;" /><p>解决方案：</p><p>监听文本框的聚焦<code>focus</code>事件，在聚焦的时候，通过文本框的原生api功能，让文本输入框出现在可视区域的最底部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;focus&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    input.<span class="title function_">scrollIntoView</span>(<span class="literal">false</span>)</span><br><span class="line">  &#125;,<span class="number">300</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="框架内容"><a href="#框架内容" class="headerlink" title="框架内容"></a>框架内容</h1><h2 id="vue3为何比vue2块："><a href="#vue3为何比vue2块：" class="headerlink" title="vue3为何比vue2块："></a>vue3为何比vue2块：</h2><p>很大一部分原因是proxy响应式：</p><p>vue3的响应式原理简单代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;奈文摩尔&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target,key,receiver</span>)&#123;</span><br><span class="line">    <span class="comment">// 递归创建代理响应式属性并返回</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> target[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; target[key] !== <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target[key],handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target,key,value,receiver</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,receiver)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj,handler)</span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;berniehzong&#x27;</span> <span class="comment">// 修改name属性，会触发set方法</span></span><br><span class="line">proxy.<span class="property">age</span>= <span class="number">28</span></span><br></pre></td></tr></table></figure><p>vue2的响应式原理简单代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateView</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视图更新&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重新定义属性，监听起来（双向绑定核心）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">target,key,value</span>)&#123;</span><br><span class="line">  <span class="comment">// 深度监听</span></span><br><span class="line">  <span class="title function_">observer</span>(value)</span><br><span class="line">  <span class="comment">// 核心API</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target,key,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(newValue!==value)&#123;</span><br><span class="line">        <span class="comment">// 深度监听</span></span><br><span class="line">        <span class="title function_">observer</span>(newValue)</span><br><span class="line">        <span class="comment">// 设置新值，注意，value一直在闭包中，此处设置完之后，使用get方法也是可以获取</span></span><br><span class="line">        value = newValue</span><br><span class="line">        <span class="comment">// 触发视图更新</span></span><br><span class="line">        <span class="title function_">updateView</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度监听</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observer</span>(<span class="params">target</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || target === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">// 不是对象或数组</span></span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重新定义各个属性 （for in 也可以遍历数组）</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> target)&#123;</span><br><span class="line">    <span class="title function_">defineReactive</span>(target,key,target[key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;奈文摩尔&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始监听</span></span><br><span class="line"><span class="title function_">observer</span>(data)</span><br></pre></td></tr></table></figure><p>如果vue2传入的data中的属性，不是一个对象，则立即返回，如果是一个引用类型的数据，则遍历每个属性，给每个属性都进行<code>Object.defineProperty</code>的绑定操作</p><p>比如数据中有data对象，对这个data进行监听，来到<code>observer</code>的 方法时候，将data的属性传入，发现name不是一个对象，则立即返回这个name，如果data中某个属性是对象，又对对象中的每个属性进行一层<code>Object.defineProperty</code></p><h2 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h2><p>生命周期：</p><p>onLoad：页面首次进入加载时触发，可以在这个生命周期去获取页面参数</p><p>onShow：页面重新进入时触发</p><p>onReady：页面首次渲染完成时触发</p><p>onHide：页面每次被隐藏的时候触发</p><p>onUnload:页面卸载时被触发</p><p>onPullDownRefresh：监听用户下拉动作</p><p>onReachBottom:页面上拉触底事件的回调</p><p>onShareAppMessage：用户点击右上角转发</p><h2 id="uniapp分包："><a href="#uniapp分包：" class="headerlink" title="uniapp分包："></a>uniapp分包：</h2><p>在manifest.json中添加<code>&quot;optimization&quot;:&#123;&quot;subPackages&quot;:true&#125;</code></p><p>在page.json中进行分包：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;subPackages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;login&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;login&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p>base：配置打包公共路径</p><p>alias：配置路径别名</p><p>生产环境移除console.log：</p><p>打包文件分类（根据正则匹配文件后缀，进行归类）</p><p>proxy前端配置跨域</p><p>env环境变量（开发环境、生产环境）</p><p>cdn的配置</p><p>gzip代码压缩</p><p>图片压缩打包</p><h2 id="为什么说vite比webpack速度更快？"><a href="#为什么说vite比webpack速度更快？" class="headerlink" title="为什么说vite比webpack速度更快？"></a>为什么说vite比webpack速度更快？</h2><p>他们的编译启动方式不同：</p><p>webpack从<code>yarn start</code>命令启动，到最后页面展示，需要经历的过程：</p><p>以<code>entry</code>配置项为起点，做一个全量的打包，产物是一个<code>index.html</code>文件，启动一个node服务，监听启动的端口，然后去访问<code>index.html</code>，再依次加载打包好的文件。（整个过程中，最重要的点在于全量打包，中间涉及到构建chunk操作，需要消耗大量的时间，虽然在热更新和二次启动中，会先找到缓存做处理，但是项目的规模变大后，开发体验和速度也会变得很慢）</p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202308121218117.png" alt="image-20230812121813022" style="zoom:33%;" /><p>反观vite的表现就不同：</p><ol><li>启用esbuild预构建依赖，提前将项目的第三方依赖格式化为ESM模块</li><li>启动node服务，监听启动端口，访问<code>index.html</code>，基于浏览器原生的<code>ESM</code>模块，逐步去加载入口文件以及入口文件的依赖模块，然后监听中间件，对比源文件的改变，再将转换后的html发送给浏览器</li></ol><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202308121231371.png" alt="image-20230812123132346" style="zoom:33%;" /><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack是静态模块打包工具，对于webpack来说，所有的资源都属于模块，通过分析模块间的依赖关系，在内部构建出一个依赖图，最终编译打包产物是html、javascript、css和其他静态资源等。</p><img src="https://cdn.jsdelivr.net/gh/berniezhong/picture-bed/github/202308121129890.png" alt="image-20230812112911840" style="zoom:33%;" /><p>默认情况下，webpack只支持对js和json文件进行打包，诸如css、html、png等其他类型的文件，需要配合loader进行文件解析进行转换。</p><p>常见的<code>loader</code>如下：</p><ul><li>image-loader：加载并且压缩图片文件</li><li>less-loader：加载并编译less文件</li><li>sass-loader：加载并编译sass、less文件</li><li>babel-loader：将ES6语法转换为ES5</li><li>file-loader：把文件输出到一个文件夹中</li><li>url-loader：用户设置一个阈值，大于阈值会交给file-loader处理，小于阈值时返回文件base64形式的编码（处理图片和字体）</li></ul><p>常见的<code>plugin</code>如下：</p><p>plugin赋予了很多功能，比如打包优化，资源管理，环境变量注入等，他们会运行在webpack的不同阶段钩子、生命周期中，贯穿了整个webpack编译周期，在于解决loader无法实现的功能。</p><ul><li>HtmlwebpackPlugin：简化html文件创建，依赖于html-loader</li></ul><p>webpack层面的优化：</p><ul><li>对图片进行压缩</li><li>减少ES6转为ES5的冗余代码</li><li>提取公共代码</li><li>模版预编译</li><li>优化sourceMap</li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>初始化一个仓库：git init</p><p>查看分支：git branch</p><p>将已修改或未跟踪的文件添加到暂存区： git add .</p><p>提交至本地仓库：git commit -m “提及记录xxxx”</p><p>本地分支推送至远程分支：git push</p><p>查看当前工作目录和暂存区的状态: git status</p><p>查看提交的日志记录： git log</p><p>从远程分支拉取代码：git pull</p><p>合并某分支(xxx)到当前分支： git merge xxx</p><p>切换到分支xxx：git checkout xxx</p><p>创建分支xxx并切换到该分支：git checkout -b xxx</p><p>删除分支xxx：git branch -d xxx</p><p>将当前分支到改动保存到堆栈中：git stash</p><p>恢复堆栈中缓存的改动内容：git stash pop</p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>多个组件共享同个状态</p><p>核心属性包括：state、getters、mutations(同步修改state)、actions、modules</p><p>vuex的状态存储在state中，改变vuex中存储的状态，通过显示的提交commit mutation</p><p>修改某个值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="attr">number</span>:<span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="title function_">SET_NUMBER</span>(<span class="params">state,newNumber</span>)&#123;</span><br><span class="line">      state.<span class="property">number</span> = newNumber</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;SET_NUMBER&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>组件中多次提交同一个<code>mutation</code>方便的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  ...<span class="title function_">mapMutations</span>(&#123;</span><br><span class="line">    <span class="attr">setNumber</span>:<span class="string">&#x27;SET_NUMBER&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中的使用 相当于 ==&gt; this.$store.commit(&#x27;SET_NUMBER&#x27;,10)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setNumber</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>因为对象是引用类型，如果需要修改vuex中一个对象状态，需要深拷贝一份对象，再进行修改。</p><p>怎么在组件中批量使用vuex的state的状态？</p><p>使用mapState函数，利用对象展开运算符将state混入computed对象中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;number&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>state中的getter怎么用？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">number</span>:<span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="attr">total</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">price</span> * state.<span class="property">number</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件中使用vuex中的getters状态：<code>this.$store.getters.total</code></p><p>action和mutation的区别？</p><p>action是提交mutation，不可以直接更改状态</p><p>action可以放异步操作，mutation是同步修改状态</p><p>action的调用是：<code>this.$store.dispatch(&#39;ACTION_NAME&#39;,data)</code></p><p>mutation的调用：<code>this.$store.commit(&#39;SET_NUMBER&#39;,10)</code></p><p>action的第一个参数包含了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  state<span class="punctuation">,</span>rootState<span class="punctuation">,</span>commit<span class="punctuation">,</span>dispatch<span class="punctuation">,</span>getters</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>vuex中模块的使用？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"><span class="keyword">import</span> moduleA <span class="keyword">from</span> <span class="string">&#x27;./module/moduleA&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moduleB <span class="keyword">from</span> <span class="string">&#x27;./module/moduleB&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        moduleA,</span><br><span class="line">        moduleB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h1 id="必备知识点"><a href="#必备知识点" class="headerlink" title="必备知识点"></a>必备知识点</h1><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;private&quot;</span>： <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 不可对外发布，比如npm</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/index.js&quot;</span> <span class="comment">// 指定入口文件</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="老生常谈"><a href="#老生常谈" class="headerlink" title="老生常谈"></a>老生常谈</h1><h2 id="MVVM的理解？"><a href="#MVVM的理解？" class="headerlink" title="MVVM的理解？"></a>MVVM的理解？</h2><p>MVVM 是一种设计思想，model是指数据层，view是视图层，通过viewmodel的双向绑定把它们连接到一起，实现数据驱动视图的功能，这样一来开发人员就只需要关注数据层，不用太注重视图层的更新，提高开发效率。</p><h2 id="Vue的优点？"><a href="#Vue的优点？" class="headerlink" title="Vue的优点？"></a>Vue的优点？</h2><p>vue是一个构建数据驱动的web渐进式框架，尽可能通过简单的api实现响应的数据绑定和组合视图组件，核心在于响应式系统，主要优势在响应式编程，组件化开发，虚拟DOM等</p><h2 id="Vue双向绑定原理？"><a href="#Vue双向绑定原理？" class="headerlink" title="Vue双向绑定原理？"></a>Vue双向绑定原理？</h2><p>Vue2使用<code>Object.defineProperty</code>来劫持各个属性的setter、getter，在数据变动的时候发布消息给订阅者，触发相应的监听回调。（Vue将data当做一个选项时，Vue会遍历每个属性，把每个属性都使用<code>Object.defineProperty</code>转换为setter、getter，在内部进行依赖跟踪，在属性被访问和被操作的时候通知变化，整合了<code>Observer</code>、<code>Compile</code>，<code>Watcher</code>三个函数，通过<code>Observer</code>来监听数据的变化，通过<code>Compile</code>来解析编译模版指令，最终利用<code>Watcher</code>搭建两者的桥梁，达到数据驱动视图的效果）</p><p>Vue3使用了Es6的<code>Proxy</code>代理对象的方式，将对象转换成代理对象，Proxy可以捕获响应式对象的修改，并且触发视图的更新。</p><p>vue2的<code>Object.defineProperty</code>缺点：</p><ul><li>只能监测属性，不能监测对象</li><li>不能监测数组的length和索引</li><li>对于数组的方法，底层是进行了原型方法的重写</li></ul><h2 id="vue的生命周期？"><a href="#vue的生命周期？" class="headerlink" title="vue的生命周期？"></a>vue的生命周期？</h2><p>vue2生命周期：</p><p>beforeCreate：new Vue之后触发的第一个钩子，此时data和methods还没有创建，不可以访问这些api</p><p>created：实例创建完后发生，当前已经进入数据的观测，可以操作数据，但是这里操作数据不会触发updated函数，可以做一些初始化数据的获取，无法与DOM进行交互</p><p>beforeMount：发生在挂载之前，虚拟dom已经创建完成，即将开始渲染，此时对更改数据不会触发updated</p><p>mounted：真实dom已经挂载完毕，数据完成双向绑定，可以访问到dom节点</p><p>beforeUpdate：发生在数据更新之前，也就是响应式数据发生了更新，虚拟DOM重新渲染之前被触发</p><p>updated：发生在更新之后，真实DOM已经更新完成，要主要避免在这时候进行数据更改，因为可能导致无限循环的更新</p><p>第一次页面加载触发的钩子：beforeCreated、created、beforeMount、mounted</p><p>多组件中生命周期的调用顺序：</p><p>组件的调用顺序都是先父后子，渲染完成的顺序是先子后父</p><p>组件的销毁操作是先父后子，销毁完成的顺序是先子后父</p><p>加载渲染过程：父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount- &gt;子mounted-&gt;父mounted</p><h2 id="vue2和vue3的diff算法"><a href="#vue2和vue3的diff算法" class="headerlink" title="vue2和vue3的diff算法"></a>vue2和vue3的diff算法</h2><p>diff算法有以下过程：</p><ul><li>同级比较，再比较子节点</li><li>先判断一方有子节点和没有子节点的情况</li><li>比较都有子节点的情况（核心diff）</li><li>递归比较子节点</li></ul><p>vue2的diff算法采用了双端比较算法：</p><p>​同时从新旧的children的两端开始进行比较，借助key值找到可复用的节点，在进行相关操作。相比React的diff算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加优雅</p><p>vue3的采用ivi和inferno算法：</p><p>​在创建虚拟dom的时候，就确定它的类型，使用动态规划的思想求解最长递归子序列</p><h2 id="vue组件传值"><a href="#vue组件传值" class="headerlink" title="vue组件传值"></a>vue组件传值</h2><p>父传子：通过向下传递<code>props</code>的方式，子组件接受数据</p><p>子传父：通过自定义事件<code>emits</code>来发射一个回调，在回调中拿到值</p><p>兄弟组件：使用vuex、pinia、或者创建一个响应式对象，暴露在全局可用</p><p>其他方式：</p><p>ref，通过创建代理ref，然后子组件通过暴露方法和属性，让父组件直接访问子组件的内容</p><p>在vue2中，通过<code>$parent</code>和<code>$children</code>来访问父实例和子实例</p><h2 id="vue路由"><a href="#vue路由" class="headerlink" title="vue路由"></a>vue路由</h2><p>路由模式分为：hash模式和history模式</p><p>hash模式下，hash值变化，不会导致浏览器向服务器发出请求，浏览器不发出请求，就不会刷新页面，可以通过hashchange事件知道hash发生了变化，来实现页面部分内容的操作</p><p>history模式，主要是html5中的pushState、replaceState这两个API，但是不会发生请求，这样就可以监听url变化，来实现页面部分内容的操作</p><h2 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h2><p>v-if动态向dom添加或删除DOM元素</p><p>v-show是通过设置dom元素的display样式属性控制显隐</p><h2 id="v-if和v-for"><a href="#v-if和v-for" class="headerlink" title="v-if和v-for"></a>v-if和v-for</h2><p>在vue2中，v-for的优先级是高于v-if的，把他们放在一起，遍历的时候，会将那些v-if为false的也一起做遍历，极大影响效率。</p><p>在vue3中，v-if的优先级高于v-for，所以在调用v-if的时，它调用的变量还不存在，就会导致异常。</p><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>vue更新dom是异步更新，数据变化的时候Dom不会立即完成更新，<code>nextTick</code>是在下次DOM更新循环结束之后执行的延迟回调</p><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>1xx：表示请求已被接受，需要继续处理</p><p>2xx：请求成功</p><p>3xx：重定向</p><p>​301：网页永久移动到新位置</p><p>​304：本次获取到的内容是读取缓存中的数据，会每次去服务器校验</p><p>4xx：客户端错误</p><p>​401：请求需要身份验证，无权限</p><p>​403：禁止访问</p><p>​404：请求参数，或者资源不存在</p><p>5xx：服务端错误</p><h2 id="从输入url到看到页面的过程，发生了什么？"><a href="#从输入url到看到页面的过程，发生了什么？" class="headerlink" title="从输入url到看到页面的过程，发生了什么？"></a>从输入url到看到页面的过程，发生了什么？</h2><ol><li>url解析：判断url是否是合法的url</li><li>查找缓存：浏览器判断请求的资源是否在缓存中</li><li>dns解析：获取url中对应的ip地址，找到对应的服务器</li><li>建立TCP连接：根据ip地址，与服务器三次握手：第一次握手告诉服务器我准备好了syn报文，第二次握手服务器回应我也准备好了ack报文，第三次握手那我开始向你发送服务请求了ack报文</li><li>发送请求：浏览器向服务器发送资源请求</li><li>响应请求：服务器将响应返回给浏览器</li><li>tcp四次握手：关闭tcp连接</li><li>渲染页面：构建dom树，构建css规则树，渲染dom，布局，绘制</li></ol><h2 id="GET、POST区别"><a href="#GET、POST区别" class="headerlink" title="GET、POST区别"></a>GET、POST区别</h2><p>get</p><p>请求参数暴露在url地址上</p><p>post</p><p>请求参数放在请求体body中</p><h1 id="JS篇"><a href="#JS篇" class="headerlink" title="JS篇"></a>JS篇</h1><h2 id="JS的数据类型"><a href="#JS的数据类型" class="headerlink" title="JS的数据类型"></a>JS的数据类型</h2><p>基本数据类型：number、string、boolean、null、undefined、symbol、bigint，保存在栈内中，可以直接访问它的值。</p><p>复杂数据类型：object、function、array、regexp、date，保存在堆当中，栈内中保存的是地址，通过栈里面的地址去访问堆当中的值。</p><h2 id="如何判断js的数据类型"><a href="#如何判断js的数据类型" class="headerlink" title="如何判断js的数据类型"></a>如何判断js的数据类型</h2><ol><li>typeof可以区分除了null以外的其他基本数据类型，以及对象类型中识别出function</li></ol><p>​typeof null &#x3D;&#x3D;&gt; ‘object’</p><ol start="2"><li>instanceof一般用来判断引用数据类型，不能判断基本数据类型，它根据原型对象中是否存在来返回布尔值</li></ol><h2 id="遍历对象属性"><a href="#遍历对象属性" class="headerlink" title="遍历对象属性"></a>遍历对象属性</h2><p>Object.keys(obj)</p><p>Object.getOwnPropertyNames(obj)</p><p>for…in…</p><h2 id="判断两个对象是否相等"><a href="#判断两个对象是否相等" class="headerlink" title="判断两个对象是否相等"></a>判断两个对象是否相等</h2><p>Object.is(obj1,obj2)判断两个对象都引用同一个地址，返回布尔值</p><h2 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h2><p>作用都是改变this指向，</p><p>call接受2个参数，第一个是要指向的对象，第二个是需要传递的参数</p><p>apply接受2个参数，第一个是要指向的对象，第二个是数组，数组项是需要传递的参数，apply会立即执行</p><p>bind接受2个参数，第一个是要指向的对象，第二个是参数列表，bind返回一个函数</p><h2 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h2><p>防抖：多次触发事件，事件处理函数只执行一次</p><p>​应用场景：搜索框输入，手机号和邮箱验证的输入检测</p><p>节流：事件触发后，规定时间内，事件处理函数不会被调用</p><p>​应用场景：高频点击，防止表单提交的多次点击</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 防抖函数 n 秒后再执行该事件，若在 n 秒内被重复触发，则重新计时</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> func 要被防抖的函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wait 规定的时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func,wait</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span> <span class="comment">// 保存this指向</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span> <span class="comment">// 拿到event对象</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      func.<span class="title function_">call</span>(context,args)</span><br><span class="line">    &#125;,wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 节流函数 n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> fn 要被节流的函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wait 规定的时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttled</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EventLoop事件循环？"><a href="#EventLoop事件循环？" class="headerlink" title="EventLoop事件循环？"></a>EventLoop事件循环？</h2><p>js是单线程运行的，当遇到一个异步事件后，js会将异步事件进行挂起，继续执行其他同步事件。</p><p>异步任务包含了：微任务和宏任务</p><p>微任务：promise回调、node中process.nextTick</p><p>宏任务：setTimeout、setInterval等定时事件</p><p>在一个事件循环中，异步事件返回结果后会被放入<code>事件队列</code>中，根据这个异步事件的类型，放入不同的宏微任务队列中，当前执行栈为空的时候，会先去找微任务，如果没有微任务才会去找宏任务，一次类推进行事件循环。</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>promise异步编程是一种解决方案，包含了三个状态<code>pending</code>、<code>fulfilled</code>、<code>rejected</code>，并且一旦产生了结果，是不可逆行为，比如这个promise进入了rejected状态，不会再回到pending状态，状态的改变是由内置的api<code>resolve</code>和<code>reject</code>来实现的，then回调属于微任务。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs</title>
      <link href="/2022/05/28/Node/"/>
      <url>/2022/05/28/Node/</url>
      
        <content type="html"><![CDATA[<h1 id="Node的程序输入输出"><a href="#Node的程序输入输出" class="headerlink" title="Node的程序输入输出"></a>Node的程序输入输出</h1><h2 id="常见的全局对象"><a href="#常见的全局对象" class="headerlink" title="常见的全局对象"></a>常见的全局对象</h2><p><a href="http://nodejs.cn/api/globals.html">常见的全局对象官网参考</a></p><p>常见的特殊全局对象，不能在命令行交互中使用，包括：<code>__dirname</code>、<code>__filename</code>、<code>exports</code>、<code>module</code>、<code>require</code>等。</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">文件路径</button><button type="button" class="tab " data-href="-2">process进程信息</button><button type="button" class="tab " data-href="-3">console</button><button type="button" class="tab " data-href="-4">计时器</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ol><li><strong>__dirname</strong>：当前目录的路径</li><li><strong>__filename</strong>：当前文件的路径</li></ol><p><img src="https://s2.loli.net/2022/07/03/tgicqQhnpCdl3T6.png"></p></div><div class="tab-item-content" id="-2"><p><strong>process提供了进程相关的信息</strong></p><p>比如Node运行环境、参数信息、传递给node的参数等。</p><p>比如：在运行某个脚本<mark class="hl-label orange">index.js</mark> 中，终端运行命令<code>node index.js zwd nickname=bernie</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在process中的argv数组中，可以获取传入的参数</span></span><br><span class="line">process.<span class="property">argv</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 依次输出输出结果 zwd nickName=berniezhong</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><ol><li><p><code>console.log()</code> node输出信息</p></li><li><p><code>console.clear()</code>清除打印台输出的信息</p></li><li><p><code>console.trace()</code>打印函数调用栈（看函数在哪些地方被调用）</p></li><li><p><code>console.table(object)</code>以table形式打印对象，左边是键名，右边是键值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">nickname</span>: <span class="string">&#x27;bernie&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(obj);</span><br></pre></td></tr></table></figure></li></ol></div><div class="tab-item-content" id="-4"><p><strong>setTimeout</strong>：延迟器</p><p><strong>setInterval</strong>：定时器</p><p><strong>setImmediate</strong>：立即执行</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="CommonJs模块化"><a href="#CommonJs模块化" class="headerlink" title="CommonJs模块化"></a>CommonJs模块化</h1><p>Node是CommonJs在服务器一个具有代表性的实现；</p><p>在Node中每一个js文件都是一个单独的模块；</p><p>CommonJs规范的核心变量：<code>exports</code>、<code>module.exports</code>、<code>require</code></p><p>exports和module.exports可以负责对模块中的内容进行导出；</p><p>require函数可以导入其他模块(自定义模块、系统模块、第三方库模块)中的内容；</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">exports</button><button type="button" class="tab " data-href="-2">module.exports</button><button type="button" class="tab " data-href="-3">require</button><button type="button" class="tab " data-href="-4">ES Module的导出</button><button type="button" class="tab " data-href="-5">ES Module的导入</button><button type="button" class="tab " data-href="-6">导入和导出同时用</button><button type="button" class="tab " data-href="-7">默认导出和导入</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>exports是一个对象; 本质是对象的引用赋值；</p><p><code>exports.name = name 等价于 exports对象中的name属性的值是name值</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;bernizhong&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello, &#x27;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">age</span> = age</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHello</span> = sayHello</span><br></pre></td></tr></table></figure><p>在对应的文件中，使用<code>require()</code>函数导入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="built_in">require</span>(<span class="string">&#x27;./baz.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar) <span class="comment">// ==&gt; &#123;name: &#x27;bernizhong&#x27;, age: 18, sayHello: Function&#125;</span></span><br></pre></td></tr></table></figure><p>或者使用解构的方式导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, age, sayHello &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./baz.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// ==&gt; bernizhong</span></span><br></pre></td></tr></table></figure><p>补充知识：（对象的赋值，实际是内存地址的赋值）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;bernie&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的赋值，内存中的表现为：</p><ul><li>在堆内存中分配空间，用于保存<code>{ name:&#39;bernie&#39;, age: 18 }</code>这个对象的键值对，这个空间对应有一个内存地址，假设为<code>0x100</code>，obj实际保存的是对象的内存地址<code>const obj = 0x100</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = obj;</span><br></pre></td></tr></table></figure><ul><li>而以上的赋值操作，实际上是对obj内存地址的引用<code>info = 0x100</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info.<span class="property">name</span> = <span class="string">&#x27;hhh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// =&gt; hhh</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>exports的导出能力，实际上是通过<code>module.exports</code>来实现的；</p><p><code>exports == module.exports</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zwd&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上会在堆空间重新分配一个新空间，会有一个新的内存地址;</li><li>在修改引用类型的值 ，并不会影响到导出源的对象的值；</li></ul><p><strong>exports和module.exports的区别？</strong></p><p>exports导出的对象，无论在哪一个地方修改了值，都会互相影响；</p><p>module.exports导出的对象，无论在哪里修改值，都不会互相影响；</p></div><div class="tab-item-content" id="-3"><p>require函数，可以引入一个文件（模块）中的导出对象；</p><p>require的查找规则：</p><ol><li>优先查找核心模块：<code>fs</code>、<code>path</code>等核心模块，一旦查找到，将会停止往后查找；</li><li><code>require(X)</code>：<code>./</code> 、 <code>../</code> 、<code>/（根目录）</code>；</li><li>如果有后缀名，按照后缀名的格式查找</li><li>如果没有后缀名，会按照以下顺序查找：<ol><li>直接查找文件X</li><li>查找X.js文件</li><li>查找X.json文件</li><li>查找X.node文件</li></ol></li><li>如果没有对应的文件，将X作为一个目录</li></ol></div><div class="tab-item-content" id="-4"><p>ESModule的导出三种导出方式：</p><p>一、常规导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;zwd&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sayHello</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、通过引用列表<code>{}</code>导出：（<code>{}</code>并不是对象，不能写成<code>{name: &#39;xxx&#39;}</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  sayHello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、取别名，关键字<code>as</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line"> name <span class="keyword">as</span> _name,</span><br><span class="line">  age <span class="keyword">as</span> _age,</span><br><span class="line">  sayHello <span class="keyword">as</span> _sayHello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-5"><p>一、正常导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; _name, _age, _sayHello &#125; <span class="keyword">from</span> <span class="string">&#x27;./modules/foo.js&#x27;</span></span><br></pre></td></tr></table></figure><p>二、取别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; </span><br><span class="line">  _name <span class="keyword">as</span> nickname, </span><br><span class="line">  _age <span class="keyword">as</span> myage, </span><br><span class="line">  _sayHello <span class="keyword">as</span> myway </span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./modules/foo.js&#x27;</span></span><br></pre></td></tr></table></figure><p>三、统一放置对象内，关键字<code>* as</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">&#x27;./modules/foo.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">_name</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-6"><p>假设现在<code>foo.js</code>和<code>baz.js</code>里面同时都内容导出，可以新建一个<code>index.js</code>同时对他们的模块所有导出；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; _name, _age, _sayHello&#125; <span class="keyword">from</span> <span class="string">&#x27;./baz.js&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-7"><p><strong>导出</strong></p><p>使用默认导出关键字是：<code>export default</code>；</p><p>默认一个模块只能导出一个，<code>export default</code>只能出现一次；</p><p><strong>导入import</strong></p><p>以下写法会在js解析的时候报错；因为<code>if(flag)</code>相当于已经在运行阶段，这时候去导入模块是会报错的；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="keyword">import</span> format <span class="keyword">from</span> <span class="string">&#x27;./baz.js&#x27;</span> <span class="comment">// -&gt; 报错，无法解析</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是使用<code>require()</code>是可以执行的：（因为<code>require</code>本质是一个函数，<code>if(flag)</code>运行中，相当于是在执行调用<code>require</code>函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="keyword">const</span> format = <span class="built_in">require</span>(<span class="string">&#x27;./baz.js&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最好的推荐办法</strong></p><p>方法一：（执行函数）</p><p>有时候真的需要根据条件或者动态导入模块，可以使用<code>require()</code></p><p>方法二：（import函数，本质是被<code>webpack</code>调用）</p><p><code>webpack</code>在遇到<code>import()</code>函数的时候，它会将它打包成好几个js文件，当页面有使用到该js文件的时候，才加载对应的模块；</p><p>import函数是异步加载，并且有返回值，返回<code>Promise</code>；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (<span class="string">&#x27;./baz.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(_name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(_age)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(_sayHello)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="模块的加载过程"><a href="#模块的加载过程" class="headerlink" title="模块的加载过程"></a>模块的加载过程</h2><ul><li><p>模块在被第一次引入时，js代码会被运行一次。</p></li><li><p>模块中的代码执行是同步的</p><p><img src="https://s2.loli.net/2022/07/03/cRJOPEGUihyfuVL.png"></p></li><li><p>模块多次被引入，会缓存，最终只会加载运行一次。</p></li></ul><h1 id="Node常用的内置模块"><a href="#Node常用的内置模块" class="headerlink" title="Node常用的内置模块"></a>Node常用的内置模块</h1><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p><code>path模块</code>提供了用于处理文件和目录的路径的实用工具，用于拼接地址；<a href="http://nodejs.cn/api/path.html#pathbasenamepath-ext">path官网直通车</a></p><p><strong>自动拼接传入的两个路径</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> basePath = <span class="string">&#x27;/user/zhong&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fileName = <span class="string">&#x27;abc.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式一： resolve（会自动添加开头的&#x27;/&#x27;）</span></span><br><span class="line"><span class="keyword">const</span> filePath = path.<span class="title function_">resolve</span>(basePath, fileName)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath) <span class="comment">// =&gt; &#x27;/user/zhong/abc.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：join (不会自动添加开头的&#x27;/&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> filePath2 = path.<span class="title function_">join</span>(basePath, fileName)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath) <span class="comment">// =&gt; &#x27;/user/zhong/abc.txt&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>根据路径获取信息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filepath = <span class="string">&#x27;/User/zhong/abc.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--&gt;1&#x27;</span>,path.<span class="title function_">dirname</span>(filepath)) <span class="comment">// =&gt; /User/zhong</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--&gt;2&#x27;</span>,path.<span class="title function_">basename</span>(filepath))<span class="comment">// =&gt; abc.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--&gt;3&#x27;</span>,path.<span class="title function_">extname</span>(filepath)) <span class="comment">// =&gt; .txt</span></span><br></pre></td></tr></table></figure><p><strong>webpack最常用场景</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reaolve</span> = dir =&gt; path.<span class="title function_">resolve</span>(__dirname, dir)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">webpack</span>:&#123;</span><br><span class="line">    <span class="attr">alias</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fs模块-文件系统"><a href="#fs模块-文件系统" class="headerlink" title="fs模块-文件系统"></a>fs模块-文件系统</h2><p>借助于Node的fs模块，我们可以在任何操作系统里直接操作文件；<a href="http://nodejs.cn/api/fs.html">fs官网模块直通车</a></p><p><strong>读取文件信息的三种方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件地址</span></span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">&#x27;./abc.txt&#x27;</span></span><br></pre></td></tr></table></figure><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">同步方式获取</button><button type="button" class="tab " data-href="-2">异步的方式获取</button><button type="button" class="tab " data-href="-3">Promise方式异步获取</button><button type="button" class="tab " data-href="-4">通过文件描述符获取</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileInfo = fs.<span class="title function_">statSync</span>(filePath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fileInfo);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行后续代码&#x27;</span>)</span><br><span class="line"><span class="comment">// =&gt; 1.States &#123; ... &#125;  2.执行后续代码</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">stat</span>(filePath, <span class="function">(<span class="params">err, info</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(info) <span class="comment">// =&gt; 1.执行后续代码  2. States &#123; ... &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行后续代码&#x27;</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="property">promises</span>.<span class="title function_">stat</span>(filePath).<span class="title function_">then</span>(<span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行后续代码&#x27;</span>)</span><br><span class="line"><span class="comment">// =&gt; 1.执行后续代码 2. States &#123; ... &#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><p>通过<code>fs中的open</code>方法获取文件的描述符（类似于id），然后通过文件描述符获取文件信息；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">open</span>(<span class="string">&quot;./abc.txt&quot;</span>, <span class="function">(<span class="params">err, fd</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--&gt;&#x27;</span>, fd)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过描述符获取文件信息</span></span><br><span class="line">  fs.<span class="title function_">fstat</span>(fd, <span class="function">(<span class="params">err, info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过描述符来获取文件信息&#x27;</span>,info)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><p><strong>写入内容</strong></p><p><code>&#123;flag: &#39;a&#39;&#125;</code>代表往文件里面追加内容，并不会覆盖文件原来的内容；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> content = <span class="string">`你好啊，李银河`</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./abc.txt&#x27;</span>, content, &#123;<span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>&#125;,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>文件读取内容</strong></p><p>通过<code>readFile</code>读取的内容，会返回<code>Buffer</code>类型的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./abc.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;buffer---&gt;&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fs模块-文件夹的操作"><a href="#fs模块-文件夹的操作" class="headerlink" title="fs模块-文件夹的操作"></a>fs模块-文件夹的操作</h2><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">创建文件夹</button><button type="button" class="tab " data-href="-2">读取文件夹内的文件</button><button type="button" class="tab " data-href="-3">文件夹重命名</button><button type="button" class="tab " data-href="-4">递归读取文件夹内的文件</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>使用fs模块中<code>mkdir</code>方法创建一个文件夹。</p><p>创建文件夹之前可以先判断是否有文件夹的存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dirName = <span class="string">&#x27;./zhong&#x27;</span> <span class="comment">// 文件夹路径</span></span><br><span class="line"><span class="keyword">if</span>(!fs.<span class="title function_">existsSync</span>(dirName))&#123;</span><br><span class="line">  fs.<span class="title function_">mkdir</span>(dirName, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>读取文件夹内的文件，返回的文件名字会是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> dirName = <span class="string">&#x27;./zhong&#x27;</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readdir</span>(dirName, <span class="function">(<span class="params">err, files</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(files) <span class="comment">// [ &#x27;weidong.txt&#x27;, &#x27;zwd.txt&#x27; ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><p>使用fs模块的<code>rename</code>方法，参数一：要重命名文件夹路径，参数二：修改后的文件夹路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./zhong&#x27;</span>, <span class="string">&#x27;./bernie&#x27;</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><p>封装一个方法，通过递归这个方法，读取文件夹下的所有文件。</p><p>传入文件夹所在的路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFiles</span>(<span class="params">dirname</span>)&#123;</span><br><span class="line">  fs.<span class="title function_">readdir</span>(dirName, &#123; <span class="attr">withFileTypes</span>: <span class="literal">true</span> &#125;,<span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---&gt;&#x27;</span>, files)</span><br><span class="line">    files.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断是否是文件夹</span></span><br><span class="line">      <span class="keyword">if</span>(file.<span class="title function_">isDirectory</span>())&#123;</span><br><span class="line">        <span class="keyword">const</span> filepath = path.<span class="title function_">resolve</span>(dirname, file.<span class="property">name</span>)</span><br><span class="line">        <span class="title function_">getFiles</span>(filepath)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(file.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getFiles</span>(<span class="string">&#x27;./zhong&#x27;</span>)</span><br></pre></td></tr></table></figure><p>读取的文件夹<code>files</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123; name: &#x27;aaa&#x27;, [Symbol(type)]: 2 &#125;,&#123; name: &#x27;weidong.txt&#x27;, [Symbol(type)]: 1 &#125;, &#123; name: &#x27;zwd.txt&#x27;, [Symbol(type)]: 1 &#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="events模块"><a href="#events模块" class="headerlink" title="events模块"></a>events模块</h2><p><code>events</code>的延伸就是vue中的事件巴士，通过<code>events</code>模块，监听某个事件，发射某个事件。</p><p>在<code>events</code>模块中导入一个类，通过实例化这个类，可以得到<code>on</code>、<code>off</code>、<code>emit</code>等方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听事件 写法一：</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;click1&#x27;</span>, <span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听到click1事件&#x27;</span>, <span class="string">&#x27;传入的参数是&#x27;</span>, args);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听事件 写法二：</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">listener</span> = (<span class="params">args</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听到click2事件&#x27;</span>, <span class="string">&#x27;传入的参数是&#x27;</span>, args);</span><br><span class="line">&#125;</span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;click2&#x27;</span>, listener)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步后发射一个事件</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  emitter.<span class="title function_">emit</span>(<span class="string">&#x27;click1&#x27;</span>, <span class="string">&#x27;click2&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若要终止发射事件</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  emitter.<span class="title function_">off</span>(<span class="string">&#x27;click2&#x27;</span>, listener)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h1 id="Package-json"><a href="#Package-json" class="headerlink" title="Package.json"></a>Package.json</h1><p>必填项目：项目名称<code>name</code>、项目版本<code>version</code></p><h2 id="入口文件”main”"><a href="#入口文件”main”" class="headerlink" title="入口文件”main”"></a>入口文件”main”</h2><p>对于前端项目来说没什么意义，所有入口的文件都由<code>webpack</code>处理，无需这里的入口文件。</p><p>真正使用的场景，是将此项目作为工具包发布出去之后，别人想引用你这个包，那入口文件就是这里声明的位置，例如axios是这么声明入口位置的：</p><p><img src="https://s2.loli.net/2022/07/10/g75uDhw4bZBRGHV.png"></p><h2 id="“script”"><a href="#“script”" class="headerlink" title="“script”"></a>“script”</h2><p>配置脚本名称功能。</p><p>在内置运行命令中，有几个关键字的命令run是可以省略的：<code>start</code>、<code>stop</code>、<code>test</code>、<code>restart</code></p><p>本来是需要执行<code>npm run start</code> ，可以直接省略为 <code>npm start</code></p><h2 id="“dependencies”"><a href="#“dependencies”" class="headerlink" title="“dependencies”"></a>“dependencies”</h2><p>指定无论<strong>开发环境</strong>还是<strong>生产环境</strong>都需要依赖的包</p><p>例如<code>npm install axios</code></p><h2 id="“devDependencies”"><a href="#“devDependencies”" class="headerlink" title="“devDependencies”"></a>“devDependencies”</h2><p>一些包在<strong>生产环境</strong>是不需要的，比如<code>webpack</code>、<code>babel</code></p><p>通过命令<code>--save-dev</code>来讲依赖包安装在开发环境</p><p>例如<code>npm isntall axios --sava-dev</code>、<code>npm install axios -D</code></p><h2 id="“version”"><a href="#“version”" class="headerlink" title="“version”"></a>“version”</h2><table><thead><tr><th>版本号</th><th>版本说明</th></tr></thead><tbody><tr><td>2.0.3</td><td>遵循（X，Y，Z）原则，X主版本号、Y次版本号、Z修订号</td></tr><tr><td>^x.y.z</td><td>表示x是保持不变的，y和z永远安装最新版本</td></tr><tr><td>~x.y.z</td><td>表示x和y保持不变，z永远安装最新的版本</td></tr></tbody></table><h2 id="npm-install原理"><a href="#npm-install原理" class="headerlink" title="npm install原理"></a>npm install原理</h2><p><img src="https://s2.loli.net/2022/07/10/pkv5PqilIMRt9NO.png"></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2022/05/28/Vue3%E5%88%B7%E6%96%87%E6%A1%A3/"/>
      <url>/2022/05/28/Vue3%E5%88%B7%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="关于-Vue3"><a href="#关于-Vue3" class="headerlink" title="关于 Vue3"></a>关于 Vue3</h1><h2 id="Vue两个核心"><a href="#Vue两个核心" class="headerlink" title="Vue两个核心?"></a>Vue两个核心?</h2><ol><li>声明式渲染：Vue基于标准HTML拓展了一套模板语法，声明式地描述基于JavaScript和Html状态之间的关系。</li><li>响应式：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM。</li></ol><details class="toggle" ><summary class="toggle-button" style="">什么是渐进式框架</summary><div class="toggle-content"><p><strong>官网</strong>：Vue 的设计非常注重灵活性和”可以被逐步集成”这个特点，根据你的需求场景，你可以用不同的方式使用 Vue<br><strong>理解</strong>：除了遵守特定语法之外，不需要考虑其他职责之外的事（你可以只用我的一部分，而不需要了解我职责之外的事情，拿 react 对比，你使用之前还必须要知道什么是副作用，什么是纯函数等等）。</p></div></details><h2 id="单文件组件？"><a href="#单文件组件？" class="headerlink" title="单文件组件？"></a>单文件组件？</h2><p>类似 HTML 格式的文件来书写 vue 组件，它被称为<strong>单文件组件</strong>（也被称为<code>*.vue</code>文件），Vue 的单文件组件会将一个组件的逻辑 js、html、css 封装在同一个文件里。</p><h2 id="选项式和组合式的特点？"><a href="#选项式和组合式的特点？" class="headerlink" title="选项式和组合式的特点？"></a>选项式和组合式的特点？</h2><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">选项式API</button><button type="button" class="tab " data-href="-2">组合式API</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ol><li>选项式 API 用多个选项的对象来描述组件的逻辑，例如data、methods、mounted。选项所定义的属性都会暴露在函数内部的this上，最终都指向当前的组件实例。</li><li>选项式 API 以组件实例的概念为中心，它将响应性相关的细节抽象出来，并强制按照选择来组织代码</li></ol></div><div class="tab-item-content" id="-2"><ol><li>组合式 API 的核心思想是直接在<strong>函数作用域内定义响应式状态变量</strong>，并将多个函数中得到的状态组合起来，处理复杂的问题，这种形式更加自由，灵活性和重用逻辑模式更加强大</li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="vite-创建项目命令："><a href="#vite-创建项目命令：" class="headerlink" title="vite 创建项目命令："></a>vite 创建项目命令：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><h3 id="vite-中使用-less"><a href="#vite-中使用-less" class="headerlink" title="vite 中使用 less"></a>vite 中使用 less</h3><p>安装命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader less --save-dev</span><br></pre></td></tr></table></figure><p>在 vite.config.ts 中引入全局的 less 样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">less</span>: &#123;</span><br><span class="line">        <span class="attr">modifyVars</span>: &#123;</span><br><span class="line">          <span class="attr">hack</span>: <span class="string">`true; @import (reference) &quot;<span class="subst">$&#123;resolve(</span></span></span><br><span class="line"><span class="subst"><span class="string">            <span class="string">&quot;src/assets/css/base.less&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">          )&#125;</span>&quot;;`</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="创建-vue-应用："><a href="#创建-vue-应用：" class="headerlink" title="创建 vue 应用："></a>创建 vue 应用：</h2><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>每个 vue 都通过<strong>createApp</strong>函数创建一个应用实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从一个单文件组件中导入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><h3 id="挂载应用"><a href="#挂载应用" class="headerlink" title="挂载应用"></a>挂载应用</h3><p>应用实例<strong>app</strong>必须在调用了 .mount() 后才会被渲染出来，mount()方法接受一个容器，接收的参数可以是一个实际的 DOM 元素或是一个 CSS 选择器字符串：</p><p> mount() 方法应始终在整个应用配置和资源注册完成后才被调用。返回值是挂载组件的实例而不是非应用实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><p>应用实例<strong>app</strong>会暴露一个.config对象，它允许我们配置一些应用级的选项，例如：全局的错误捕捉，注册全局组件等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;TodoDeleteButton&quot;</span>, <span class="title class_">Component</span>);</span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><p>应用配置必须在挂载应用实例之前完成！</p></div><h3 id="挂载多个应用"><a href="#挂载多个应用" class="headerlink" title="挂载多个应用"></a>挂载多个应用</h3><p>应用实例并不只限于一个，可以创建多个共存的应用，通过挂载多个应用来实现，每个应用都有自己的全局配置和全局资源作用域（比如#app和#content是两个应用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app1 = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line">app1.<span class="title function_">mount</span>(<span class="string">&#x27;#container-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app2 = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line">app2.<span class="title function_">mount</span>(<span class="string">&#x27;#container-2&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础:"></a>响应式基础:</h1><h3 id="声明响应式状态"><a href="#声明响应式状态" class="headerlink" title="声明响应式状态"></a>声明响应式状态</h3><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">ref</button><button type="button" class="tab " data-href="-2">reactive</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><strong>官方推荐：</strong> 使用ref()来声明响应式状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span>; <span class="comment">// 获取值为2（默认值）</span></span><br><span class="line">count.<span class="property">value</span>++; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>ref 被传递给函数、或者从一般对象上被解构时，不会丢失响应式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="title function_">ref</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="attr">bar</span>: <span class="title function_">ref</span>(<span class="number">2</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readValue</span>(<span class="params">query</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(query.<span class="property">value</span>); <span class="comment">// 需要通过.value取值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">readValue</span>(obj.<span class="property">foo</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; foo, bar &#125; = obj; <span class="comment">// 不会丢失响应式</span></span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">为什么使用ref</summary><div class="toggle-content"><p>Vue会追踪在渲染过程中使用的每一个ref，当某个ref被修改时，都会触发追踪它的组件的一次重新渲染。</p><p>内部是通过getter和setter方法来拦截对象属性的get和set操作，**.value**属性允许vue检测ref何时被访问或修改，通过getter来追踪，通过setter来执行触发。</p><p>另一个ref好处是，与普通变量不同，ref允许被传递给函数，同时保留对最新值和响应式的连接的访问，有利于复杂逻辑的复用。</p></div></details></div><div class="tab-item-content" id="-2"><p>使用<code>reactive()</code>函数创建一个响应式对象或者数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>仅对<strong>对象类型</strong>有效(对象、数组等集合类型)，而对基础类型 <strong>String</strong>、<strong>Number</strong>、<strong>Boolean</strong>这样的无效。</li><li>响应式对象不支持解构。</li><li>要保持响应式对象的相同引用，不可以随意替换一个响应式对象，如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下行为将丢失响应性</span></span><br><span class="line">state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="DOM-更新时机"><a href="#DOM-更新时机" class="headerlink" title="DOM 更新时机"></a>DOM 更新时机</h3><p>修改一个响应式状态时，DOM也会被自动更新，但是更新并不是同步的（是因为vue要确保无论更新多少次响应式数据，组件只会更新一次）。</p><p>如果要等待DOM更新完成后再执行额外的代码，可以使用<strong>nextTick</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  state.<span class="property">count</span>++;</span><br><span class="line">  <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 访问更新后的 DOM</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  state.<span class="property">count</span>++;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">nextTick</span>()</span><br><span class="line">  <span class="comment">// dom更新后再执行的代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深层响应性"><a href="#深层响应性" class="headerlink" title="深层响应性"></a>深层响应性</h3><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">深层响应性</button><button type="button" class="tab " data-href="-2">浅层响应性</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>Vue 中默认是<strong>深层响应式</strong>的，在更改深层<strong>对象</strong>和<strong>数组</strong>时也是能被检测到的，所以是响应式的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">nested</span>:&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> operateObj &#123;</span><br><span class="line">  obj.<span class="property">nested</span>.<span class="property">count</span> ++</span><br><span class="line">  obj.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="string">&#x27;baz&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>使用<strong>shallowReactive</strong>可以实现只有根级别的数据是响应的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowReactive, isReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">  <span class="attr">foo</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">nested</span>: &#123;</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是响应式的</span></span><br><span class="line">state.<span class="property">foo</span> ++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不是响应式的</span></span><br><span class="line">state.<span class="property">nested</span>.<span class="property">bar</span> ++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会被转为响应式</span></span><br><span class="line"><span class="title function_">isReactive</span>(state.<span class="property">nested</span>)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="响应式代理-vs-原始对象"><a href="#响应式代理-vs-原始对象" class="headerlink" title="响应式代理 vs 原始对象"></a>响应式代理 vs 原始对象</h3><p>通过reactive创建的响应式对象，是原始对象的代理对象，它和原始对象不相等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> raw = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="title function_">reactive</span>(raw);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理和原始对象不是全等的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy === raw); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol><li>只有代理对象是响应的，更改原始对象不会触发更新，所以仅使用声明对象的代理版本。</li><li>对同一个对象调用<strong>reactive</strong>总是返回同样的代理，而对已存在代理调用<strong>reactive</strong>也是返回同样的代理。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在同一个对象上调用 reactive() 会返回相同的代理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reactive</span>(raw) === proxy) <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个代理上调用 reactive() 会返回他自己</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reactive</span>(proxy) === proxy) <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>以上规则同样适用于<code>嵌套对象</code></p><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h4 id="基础使用："><a href="#基础使用：" class="headerlink" title="基础使用："></a>基础使用：</h4><p>计算属性通过 getter 函数，返回一个<strong>ref对象</strong>，读取值的时候使用**.value**。</p><ol><li>在Template模版中使用不需要解包，直接使用函数名。</li><li>在Js中使用需要**.value**</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;computed, reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zwd&#x27;</span>,</span><br><span class="line">  <span class="attr">books</span>:[]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  author.<span class="property">books</span> = [<span class="string">&#x27;vue2&#x27;</span>,<span class="string">&#x27;vue3&#x27;</span>,<span class="string">&#x27;vue4&#x27;</span>]</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasbook = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasbook.<span class="property">value</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;hasbook&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="可修改的计算属性"><a href="#可修改的计算属性" class="headerlink" title="可修改的计算属性"></a>可修改的计算属性</h4><p>当尝试修改一个计算属性时，可以通过<code>getter</code>和<code>setter</code>来创建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstName = <span class="title function_">ref</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> lastName = <span class="title function_">ref</span>(<span class="string">&quot;Doe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="property">lastName</span> + data.<span class="property">firstName</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    data.<span class="property">firstName</span> = newValue.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;hhh&quot;</span>;</span><br><span class="line">    data.<span class="property">lastName</span> = newValue.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过某个按钮修改计算属性的值：set(newValue)中newValue会变成&#x27;John Doe&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleEditLastName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  fullName.<span class="property">value</span> = <span class="string">&quot;John Doe&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h4><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">计算属性</button><button type="button" class="tab " data-href="-2">普通方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><strong>计算属性值会基于其响应式依赖被缓存</strong>，一个计算属性仅会在其<strong>响应式依赖更新时</strong>才重新计算。也就是说，只要依赖不改变，无论多少次访问，都会返回先前的计算结果，而不会重复执行 getter 函数。</p><p>以下意味着计算属性永远不会更新，因为 Date.now()并不是一个响应式依赖，它没有依赖任何其他，是一个固定值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> now = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p><strong>方法总是在每次渲染时都会再次执行</strong>，模板中也使用方法直接调用来获取对应的依赖结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculateBooksMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; calculateBooksMessage() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h4 id="计算属性使用注意点："><a href="#计算属性使用注意点：" class="headerlink" title="计算属性使用注意点："></a>计算属性使用注意点：</h4><ol><li>计算函数不应该有副作用（不要在计算函数中做<strong>异步请求</strong>或者<strong>更改 DOM</strong>）</li><li>避免直接修改计算属性值（计算属性返回值是只读的，更新计算值应该由它所依赖的源状态触发）</li></ol><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>watch 监听某个属性，每次响应式状态发生变化时触发回调函数</p><h3 id="基础侦听"><a href="#基础侦听" class="headerlink" title="基础侦听"></a>基础侦听</h3><p>watch 的第一个参数： 可以是 ref（包括计算属性）、响应式对象、一个 getter 函数，或者多个来源组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个ref</span></span><br><span class="line"><span class="title function_">watch</span>(x, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`newValue == <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> x.<span class="property">value</span> + y.<span class="property">value</span>,</span><br><span class="line">  <span class="function">(<span class="params">sum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sum of x + y is: <span class="subst">$&#123;sum&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个来源组成的数组</span></span><br><span class="line"><span class="title function_">watch</span>([x, <span class="function">() =&gt;</span> y.<span class="property">value</span>], <span class="function">(<span class="params">[newX, newY]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span> and y is <span class="subst">$&#123;newY&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意，不能侦听响应式对象的属性，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这不起作用，因为你向 watch() 传入了一个 number</span></span><br><span class="line"><span class="title function_">watch</span>(obj.<span class="property">count</span>, <span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正确的使用方式：提供一个<code>getter</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提供一个 getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="深层侦听"><a href="#深层侦听" class="headerlink" title="深层侦听"></a>深层侦听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="title function_">watch</span>(obj, <span class="function">(<span class="params">newObj, oldObj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// newObj 和 oldObj 相等 引用类型 同一个对象</span></span><br><span class="line">&#125;);</span><br><span class="line">obj.<span class="property">count</span>++;</span><br></pre></td></tr></table></figure><p>不同于 getter 函数，只有 getter 函数的 count 更新，才会触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>将 getter 函数侦听，隐式转换深层侦听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><p>watchEffect 在创建侦听器时，会立即执行一遍回调</p><p>正常监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="title function_">ref</span>(<span class="string">&quot;https://...&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url.<span class="property">value</span>);</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即获取</span></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br><span class="line"><span class="comment">// ...再侦听 url 变化</span></span><br><span class="line"><span class="title function_">watch</span>(url, fetchData);</span><br></pre></td></tr></table></figure><p>改成 watchEffect</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url.<span class="property">value</span>);</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的例子中，会先执行一次回调，自动追踪<code>url.value</code>（相当于计算属性）,每当<code>url.value</code>变化，会再次触发回调。</p><p>不同之处：</p><table><thead><tr><th>watch</th><th>watchEffect</th></tr></thead><tbody><tr><td>只追踪明确的侦听源，不追踪回调内访问的属性</td><td>在副作用发生时追踪依赖</td></tr><tr><td>只有在响应源改变时才会触发回调</td><td>自动追踪所有能访问到的响应式属性</td></tr><tr><td>更好的控制回调的触发时机</td><td>代码简洁，但其响应依赖关系不明确</td></tr></tbody></table><h3 id="回调的刷新时机"><a href="#回调的刷新时机" class="headerlink" title="回调的刷新时机"></a>回调的刷新时机</h3><p>默认情况，侦听器内访问 DOM 是<code>Vue更新之前的DOM</code>，若想在回调中访问 Vue 更新后的 DOM，可以添加属性<code>flush: post</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(sourse, callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">watchEffect</span>(callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>watchEffect 的回调刷新别名: <code>watchPostEffect()</code>，而不需要<code>flush:post</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watchPostEffect &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="title function_">watchPostEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 在 Vue 更新后执行 */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="取消监听"><a href="#取消监听" class="headerlink" title="取消监听"></a>取消监听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unwatch = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...当该侦听器不再需要时</span></span><br><span class="line"><span class="title function_">unwatch</span>();</span><br></pre></td></tr></table></figure><p>需要异步创建侦听器的情况很少，请尽可能选择同步创建。如果需要等待一些异步数据，你可以使用条件式的侦听逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要异步请求得到的数据</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 数据加载后执行某些操作...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="类与样式的绑定"><a href="#类与样式的绑定" class="headerlink" title="类与样式的绑定"></a>类与样式的绑定</h2><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">HTML绑定class</button><button type="button" class="tab " data-href="-2">绑定内联样式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>绑定对象</p><p>两个类<code>active和text-danger</code>的显示取决于布尔值<code>isActive</code>和<code>hasError</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过计算属性来绑定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isActive = <span class="title function_">ref</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> classObject = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">active</span>: isActive.<span class="property">value</span> &amp;&amp; !error.<span class="property">value</span>,</span><br><span class="line">  <span class="string">&quot;text-danger&quot;</span>: error.<span class="property">value</span> &amp;&amp; error.<span class="property">value</span>.<span class="property">type</span> === <span class="string">&quot;fatal&quot;</span>,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 转换后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">divdiv</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> activeClass = <span class="title function_">ref</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> errorClass = <span class="title function_">ref</span>(<span class="string">&quot;text-danger&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用三元判断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用isActive真假动态添加active--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件绑定 class</p><p>普通绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件内 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若想组件内某个元素接收这个 class，可以通过组件的<code>$attrs</code>来实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- my-component 模板使用 $attrs 时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;$attrs.class&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a child component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最终渲染成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a child component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>普通绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> activeColor = <span class="title function_">ref</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fontSize = <span class="title function_">ref</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> styleObject = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="string">&quot;13px&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><strong>指令：</strong></p><ol><li><code>v-if</code>:是真实的按条件渲染，是一种懒加载的渲染，若初次渲染为 fasle，则不会做任何事，直到条件改变为 true 的时候才会渲染</li><li><code>v-show</code>元素无论初始条件为真假，始终存在于 DOM 中。</li></ol><p><strong>优化：</strong></p><p>频繁切换使用 v-show，运行时不经常改变用 v-if：</p><p><strong>v-if 和 v-for 不同时使用：</strong></p><p>v-if 和 v-for 不能同时使用，因为<code>v-if的优先级比较高</code>，执行的时候会<code>先执行v-if</code>，而<code>增加内存消耗</code></p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">循环数组</button><button type="button" class="tab " data-href="-2">循环对象</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;How to do lists in Vue&quot;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&quot;Jane Doe&quot;</span>,</span><br><span class="line">  <span class="attr">publishedAt</span>: <span class="string">&quot;2016-04-10&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in myObject&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><p>可以在<code>template</code>上使用<code>v-for</code>,小程序的<code>block</code>也是一样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有时候希望展示经过过滤或排序后的内容，可以使用已过滤或已排序数组的计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = <span class="title function_">ref</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evenNumbers = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h3 id="基础修饰符："><a href="#基础修饰符：" class="headerlink" title="基础修饰符："></a>基础修饰符：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单击事件将停止传递 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件将不再重新加载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰语可以使用链式书写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 也可以只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当 event.target 是元素本身时才会触发事件处理器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如：事件处理器不来自子元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 &quot;change&quot; 事件后同步更新而不是 &quot;input&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用户输入自动转换为数字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认自动去除用户输入内容中两端的空格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按键修饰符："><a href="#按键修饰符：" class="headerlink" title="按键修饰符："></a>按键修饰符：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 仅在 <span class="string">`key`</span> 为 <span class="string">`Enter`</span> 时调用 <span class="string">`vm.submit()`</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><table><thead><tr><th>生命周期</th><th>描述</th></tr></thead><tbody><tr><td>onMounted</td><td>在<code>组件挂载完成后执行</code>（包含了所有同步组件的加载、DOM 树创建并挂载到父容器中、不包含异步组件<Suspense>）</td></tr><tr><td>onUpdated</td><td>在组件因为响应式状态变更而更新其 DOM 树之后调用，如果需特定的状态改变后才调用，使用<code>nextTick</code></td></tr><tr><td>onUnmounted</td><td>在组件实例被卸载之后调用（清除定时器、取消监听、销毁 socket）</td></tr><tr><td>onBeforeMount</td><td>在组件被挂载之前被调用，当这个钩子被调用时，组件已经完成了其响应式状态的设置，但还没有创建 DOM 节点。它即将首次执行 DOM 渲染过程</td></tr><tr><td>onBeforeUpdate</td><td>在组件即将因为响应式状态变更而更新其 DOM 树之前调用</td></tr><tr><td>onBeforeUnmount</td><td>在组件实例被卸载之前调用</td></tr><tr><td>onErrorCaptured</td><td>在捕获了后代组件传递的错误时调用</td></tr><tr><td>onRenderTracked</td><td>当响应式依赖被组件的渲染作用追踪后调用（<strong>这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用</strong>）</td></tr><tr><td>onRenderTriggered</td><td>当响应式依赖触发了组件渲染作用的运行之后调用（<strong>这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用</strong>）</td></tr><tr><td>onActivated</td><td>若组件实例是<code>&lt;keepAlive&gt;</code>缓存树的一部分，当组件被插入到 DOM 中时调用</td></tr><tr><td>onDeactivated</td><td>若组件实例是<code>&lt;keepAlive&gt;</code>缓存树的一部分，当组件从 DOM 中被移除时调用</td></tr></tbody></table><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>提供一个值，供后代组件使用</p><p>与注册生命周期钩子的 API 类似，<code>provide()</code> 必须在组件的 <code>setup()</code> 阶段同步调用</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">provide</button><button type="button" class="tab " data-href="-2">inject</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>为组件后代供给数据，一个组件可以多次调用<code>provide()</code>，使用不同的注入名，注入不同的依赖值。</p><p>参数一： <code>key</code></p><p>参数二：<code>value</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// provide静态值</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// provide响应式的值</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">5</span>);</span><br><span class="line"><span class="title function_">provide</span>(<span class="string">&quot;count&quot;</span>, count);</span><br></pre></td></tr></table></figure><p>若不使用<code>setup</code>，确保<code>provide()</code> 是在 <code>setup()</code> 同步调用的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">provide</span>(<span class="comment">/* 注入名 */</span> <span class="string">&quot;message&quot;</span>, <span class="comment">/* 值 */</span> <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>应用层 Provide</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">provide</span>(<span class="comment">/* 注入名 */</span> <span class="string">&quot;message&quot;</span>, <span class="comment">/* 值 */</span> <span class="string">&quot;hello!&quot;</span>);</span><br></pre></td></tr></table></figure><p>应用级的供给在应用的所有组件中都可以注入。</p><p>编写<code>插件</code>时会特别有用，因为<code>插件一般都不会使用组件形式来供给值</code>。</p><p><strong>只读</strong></p><p>若想确保从祖先传递的值不被组件更改，你可以使用<code>readonly()</code>来包装提供的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, provide, readonly &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">provide</span>(<span class="string">&quot;read-only-count&quot;</span>, <span class="title function_">readonly</span>(count));</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p><strong>注入供给的值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="keyword">import</span> &#123;fooSymbol&#125; <span class="keyword">from</span> <span class="string">&#x27;./injectionSymbols&#x27;</span> <span class="comment">//</span></span><br><span class="line">  注入值的默认方式 <span class="keyword">const</span> foo = <span class="title function_">inject</span>(<span class="string">&#x27;foo&#x27;</span>) <span class="comment">// 注入响应式的值 const count =</span></span><br><span class="line">  <span class="title function_">inject</span>(<span class="string">&#x27;count&#x27;</span>) <span class="comment">// 通过 Symbol 类型的 key 注入 const foo2 = inject(fooSymbol)</span></span><br><span class="line">  <span class="comment">// 注入一个值，若为空则使用提供的默认值 const bar = inject(&#x27;foo&#x27;, &#x27;default</span></span><br><span class="line">  value<span class="string">&#x27;) // 注入一个值，若为空则使用提供的工厂函数 const baz = inject(&#x27;</span>foo<span class="string">&#x27;, ()</span></span><br><span class="line"><span class="string">  =&gt; new Map()) // 注入时为了表明提供的默认值是个函数，需要传入第三个参数 const</span></span><br><span class="line"><span class="string">  fn = inject(&#x27;</span><span class="keyword">function</span><span class="string">&#x27;, () =&gt; &#123;&#125;, false)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><p>内置组件无需注册可以直接在模板中使用，只有使用时才会包含在构建中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Transtion</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Transtion"><a href="#Transtion" class="headerlink" title="Transtion"></a>Transtion</h3><p>仅支持为单个元素或组件提供动画过度效果，如果内容是一个组件，这个组件必须仅有一个根元素</p><p>动画的触发条件是：</p><ol><li>由<code>v-if</code></li><li>由<code>v-show</code></li><li>由特殊元素<code>&lt;component&gt;</code>切换的动态组件</li></ol><h4 id="为过渡命名"><a href="#为过渡命名" class="headerlink" title="为过渡命名"></a>为过渡命名</h4><p>通过一个<code>name</code>prop 声明一种过渡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于已命名的过渡，它的过渡相关 class 会以其名字而不是 v 作为前缀。</p><p>比如上方的例子，相关 class 会是<code>fade-enter-active</code>而不是<code>v-enter-active</code></p><p>这个<code>fade</code>的 class 应该是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-from</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义过渡-class"><a href="#自定义过渡-class" class="headerlink" title="自定义过渡 class"></a>自定义过渡 class</h4><p>可以使用第三方库 Animate.css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;custom-classes&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__tada&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__bounceOutRight&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="出现时过渡"><a href="#出现时过渡" class="headerlink" title="出现时过渡"></a>出现时过渡</h4><p>想要初次渲染就有过渡动画，添加<code>apper</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transition</span> <span class="attr">appear</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件间过渡"><a href="#组件间过渡" class="headerlink" title="组件间过渡"></a>组件间过渡</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="监听过渡事件"><a href="#监听过渡事件" class="headerlink" title="监听过渡事件"></a>监听过渡事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transition</span> @<span class="attr">after-enter</span>=<span class="string">&quot;onTransitionComplete&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="TransitionGroup"><a href="#TransitionGroup" class="headerlink" title="TransitionGroup"></a>TransitionGroup</h4><p>为列表中的<strong>多个</strong>元素或组件提供过渡效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TransitionGroup</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slide&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TransitionGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="KeepAlive"><a href="#KeepAlive" class="headerlink" title="KeepAlive"></a>KeepAlive</h3><p>缓存包裹在其中的动态切换组件。keepAlive 包裹动态组件时，会缓存不活跃的组件实例，而不是销毁它们。</p><p>当一个组件在 <code>&lt;KeepAlive&gt;</code> 中被切换时，它的 <code>activated</code> 和 <code>deactivated</code> 生命周期钩子将被调用，用来替代 <code>mounted</code> 和 <code>unmounted</code>。这适用于 <code>&lt;KeepAlive&gt;</code> 的直接子节点及其所有子孙节点。</p><p>基本用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与 Transition 一起使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 include、exclude</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用逗号分隔的字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">include</span>=<span class="string">&quot;a,b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><p>将插槽内容渲染到 DOM 的另一个部分。</p><p>指定目标容器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;#some-id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;.some-class&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;[data-teleport]&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>有条件的禁用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;#popup&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;displayVideoInline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./my-movie.mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h3><p>用于在组件树中编排嵌套的异步依赖项。</p><p><img src="https://s2.loli.net/2022/06/15/NtCT5Heumj9wfhD.png"></p><p>假设组件树中有多个嵌套组件，要渲染出它们，首先得解析一些异步资源。</p><p>它们每个都需要处理自己的加载、报错和完成状态。</p><p>在最坏的情况下，我们可能会在页面上看到三个旋转的加载态，在不同的时间显示出内容。</p><p>有了<code>Suspense</code>之后，就可以在等待整个多层级组件树中的各个<code>异步依赖获取结果时</code>，才展示出加载中或加载失败的状态。</p><p><code>Suspense</code>可以等待的异步依赖有两种：</p><ol><li>带有异步 <code>setup()</code> 钩子的组件。这也包含了使用 <code>&lt;script setup&gt;</code> 时有顶层 <code>await</code> 表达式的组件。</li><li>异步组件。</li></ol><h4 id="async-setup（）"><a href="#async-setup（）" class="headerlink" title="async setup（）"></a>async setup（）</h4><p>在组合式 API 中的<code>setup()</code>可以是异步的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(...)</span><br><span class="line">    <span class="keyword">const</span> posts = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      posts</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setup</code>语法糖中，顶层 <code>await</code> 表达式会自动让该组件成为一个异步依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(...) <span class="keyword">const</span> posts = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="加载中状态"><a href="#加载中状态" class="headerlink" title="加载中状态"></a>加载中状态</h4><p><code>&lt;Suspense&gt;</code>接受两个插槽： <code>#default</code>和<code>#fallback</code>它将在内存中<code>渲染默认插槽</code>的<code>同时展示后备插槽内容</code>。</p><p>如果在渲染时遇到异步依赖项（<code>异步组件</code>和具有<code>async setup()</code>的组件），它会<code>等所有异步依赖项解析完成时再显示默认插槽</code>。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 具有深层异步依赖的组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DashboardCom</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在 #fallback 插槽中显示 “正在加载中” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span> Loading ... <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在默认组件<code>&lt;DashboardCom /&gt;</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> tips = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">a</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;具有深层异步依赖的组件&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">a</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">ret</span>) =&gt;</span> &#123;</span><br><span class="line">  tips.<span class="property">value</span> = ret;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以<code>&lt;DashboardCom /&gt;</code>组件将会在 2 秒后才进行渲染</p><h3 id="内置组件结合使用："><a href="#内置组件结合使用：" class="headerlink" title="内置组件结合使用："></a>内置组件结合使用：</h3><p>要保证这些组件都能正常使用，嵌套顺序非常重要。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RouterView</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;Component&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 主要内容 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 加载中状态 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span> 正在加载... <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RouterView</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模板-ref"><a href="#模板-ref" class="headerlink" title="模板 ref"></a>模板 ref</h2><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">模板ref</button><button type="button" class="tab " data-href="-2">函数ref</button><button type="button" class="tab " data-href="-3">组件上的ref</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>需要操作 DOM 元素的时候，给元素绑定 ref</p><p>在 Vue3 中绑定 ref，需要先声明一个同名的 ref</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 ref 来存放该元素的引用</span></span><br><span class="line"><span class="comment">// 必须和模板 ref 同名</span></span><br><span class="line"><span class="keyword">const</span> input1 = ref&lt;&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  input1.<span class="property">value</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>除了给<code>ref</code>绑定字符串之外，还可以绑定一个函数，在每次组件更新时函数都被调用。函数接受该元素引用作为第一个参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:ref</span>=<span class="string">&quot;(el) =&gt; &#123; /* 将 el 分配给 property 或 ref */ &#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><p>当 ref 被应用到组件上时，ref 将引用的是组件实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// child.value 是 &lt;Child /&gt; 组件的实例</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时父组件可以通过<code>child</code>访问子组件中的任何属性和方法</p><p>有一种特殊情况，如果子组件使用<code>&lt;script setup&gt;</code>语法糖，父组件将访问不到子组件的属性和方法，可以通过<code>defineExpose</code>宏函数暴露子组件的属性和方法，让父组件能完全访问到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件Child中：</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="title function_">ref</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">  a,</span><br><span class="line">  b,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件中 (ref 都会自动解包，和一般的实例一样)</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">child.<span class="property">value</span>; <span class="comment">// =&gt; &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="组件定义"><a href="#组件定义" class="headerlink" title="组件定义"></a>组件定义</h3><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">单文件组件</button><button type="button" class="tab " data-href="-2">不用setup语法糖</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>vue 文件方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>You clicked me &#123;&#123; count &#125;&#125; times.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p><code>template</code>方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;button @click=&quot;count++&quot;&gt;</span></span><br><span class="line"><span class="string">     You clicked me &#123;&#123; count &#125;&#125; times.</span></span><br><span class="line"><span class="string">   &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><p>若使用 setup 语法糖，在<code>子组件</code>中需要通过：</p><ol><li><code>defineProps</code>定义<code>可接受的props的属性</code>，并且声明的 props 会自动暴露给模板。</li><li><code>defineProps</code>会返回一个对象。</li><li><code>defineProps</code>的参数和父组件提供的 props 的值是相同的</li></ol><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">setup语法</button><button type="button" class="tab " data-href="-2">不使用setup语法糖</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><strong>接收字符串形式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&quot;title&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>);</span><br></pre></td></tr></table></figure><p><strong>接收对象形式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">likes</span>: <span class="title class_">Number</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>传递多个 props 时的可以使用 v-bind</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">const</span> post = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;this is title&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">v-bind</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:id</span>=<span class="string">&quot;post.id&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span>&gt;</span>&lt;/BlogPost</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">BlogPost</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>循环组件可以使用<code>v-for</code>的形式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = <span class="title function_">ref</span>([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&quot;My journey with Vue&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&quot;Blogging with Vue&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&quot;Why Vue is so fun&quot;</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;My journey with Vue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;Blogging with Vue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>数据单向流</strong></p><p>所有 prop 都遵循<code>单向绑定原则</code>,prop 因父组件的更新而变化，自然会将新的状态向下传递，是不可逆的。</p><p>子组件修改父组件 prop：</p><ol><li><p><code>在子组件中新定义一个局部属性，从prop中获取初始值</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&quot;initalCount&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> couter = <span class="title function_">ref</span>(props.<span class="property">initalCount</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>prop以原始的形式传入，使用计算属性转换</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&quot;initalCount&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> normalize = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> props.<span class="property">initalCount</span>.<span class="title function_">tirm</span>().<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p><strong>自定义事件</strong></p><p>通过<code>defineEmits</code>定义自定义事件名</p><p>子组件定义<code>emit发射事件</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;custom&quot;</span>]);</span><br><span class="line"><span class="title function_">emit</span>(<span class="string">&quot;custom&quot;</span>);</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">custom</span>=<span class="string">&quot;custom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p><code>props</code>对象会作为 setup 函数的第一个参数</p><p><strong>接收字符串形式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> defalut &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收对象形式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">likes</span>: <span class="title class_">Number</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义事件</strong></p><p>通过<code>emits:[]</code>自定义发射事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&quot;custom&quot;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">&quot;custom&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h4 id="props-的校验"><a href="#props-的校验" class="headerlink" title="props 的校验"></a>props 的校验</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 基础类型检查</span></span><br><span class="line">  <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="comment">// 多种可能的类型</span></span><br><span class="line">  <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">  <span class="comment">// 必传</span></span><br><span class="line">  <span class="attr">propC</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 默认值</span></span><br><span class="line">  <span class="attr">propD</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对象类型</span></span><br><span class="line">  <span class="attr">propE</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="comment">// rawProps所有接收到的prop参数</span></span><br><span class="line">    <span class="title function_">default</span>(<span class="params">rawProps</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&quot;hello&quot;</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义类型函数</span></span><br><span class="line">  <span class="attr">propF</span>: &#123;</span><br><span class="line">    <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 传入的prop必须符合以下表达式</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&quot;success&quot;</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;danger&quot;</span>].<span class="title function_">includes</span>(value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="emit-传值校验"><a href="#emit-传值校验" class="headerlink" title="emit 传值校验"></a>emit 传值校验</h4><p>自定义事件传值也可以做校验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>(&#123;</span><br><span class="line">  <span class="title function_">submit</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// value验证是否通过</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Boolean</span>(value);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="modelValue的使用"><a href="#modelValue的使用" class="headerlink" title="modelValue的使用"></a><code>modelValue</code>的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--等价于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在父组件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 等价于 在组件中这么使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CustomInput</span> <span class="attr">:modelValue</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">update:modelValue</span>=<span class="string">&quot;newValue =&gt; searchText = newValue&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">CustomInput</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上为了子组件能正常运行，在<code>&lt;CustomInput /&gt;</code>中使用<code>definedProps</code>和<code>defineEmits</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="title function_">defineProps</span>([<span class="string">&#x27;modelValue&#x27;</span>]) <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">&quot;modelValue&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="update：modelValue"><a href="#update：modelValue" class="headerlink" title="update：modelValue"></a>update：modelValue</h4><p>父组件提供的 prop 默认是<code>modelValue</code>形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">:title</span>=<span class="string">&quot;bookTitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子组件<code>&lt;MyComponent&gt;</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;<span class="title function_">defineProps</span>([<span class="string">&#x27;title&#x27;</span>]) <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:title&#x27;</span>])&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>多个 v-model 绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserName</span> <span class="attr">v-model:first-name</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">v-model:last-name</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineEmits</span>([<span class="string">&#x27;update:firstName&#x27;</span>, <span class="string">&#x27;update:lastName&#x27;</span>])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><p><code>&lt;slot&gt;</code> 元素是一个<code>插槽的插口</code>，标示了父元素提供的<code>插槽内容</code>将在哪里被渲染。</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">渲染作用域</button><button type="button" class="tab " data-href="-2">默认内容</button><button type="button" class="tab " data-href="-3">具名插槽</button><button type="button" class="tab " data-href="-4">动态插槽名</button><button type="button" class="tab " data-href="-5">作用域插槽</button><button type="button" class="tab " data-href="-6">具名作用域插槽</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ChilComp</span>&gt;</span> &#123;&#123;message&#125;&#125; <span class="tag">&lt;/<span class="name">ChilComp</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>message</code>都是父组件中的渲染内容，内容一样。</p><p>但是插槽内容<code>无法访问子组件内容</code></p><ol><li>任何父组件模板中的东西都只被编译到父组件的作用域中；</li><li>而任何子组件模板中的东西都只被编译到子组件的作用域中。</li></ol></div><div class="tab-item-content" id="-2"><p><strong>默认内容</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    Submit</span><br><span class="line">    <span class="comment">&lt;!-- 默认内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><p>给<code>&lt;slot /&gt;</code>提供一个 name 属性，用来给各个插槽分配唯一的 ID</p><p><code>没有提供name属性的插槽隐式的命名为default</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件插入内容时，要提供一个<code>v-slot</code>的指令给<code>template</code>元素（<code>v-slot</code>的缩写是<code>#</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BaseLayout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- header 插槽的内容放这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">dynamicSlotName</span>]&gt;</span> ... <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 缩写为 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #[<span class="attr">dynamicSlotName</span>]&gt;</span> ... <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-5"><p>有些场景需要在<code>插槽内使用父组件及子组件内的数据</code>，要做到这一点，可以通过<code>渲染插槽时将一部分数据提供给插槽</code>。</p><p>子组件<code>&lt;MyComponent&gt;</code>内：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;MyComponent&gt; 的模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:text</span>=<span class="string">&quot;greetingMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当需要接收 prop 时，默认插槽和具名插槽使用方式有区别，父组件内的插槽接收 props：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.text &#125;&#125; &#123;&#123; slotProps.count &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--也可以使用解构--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123;text, count&#125;&quot;</span>&gt;</span> &#123;&#123; text &#125;&#125; &#123;&#123; count &#125;&#125; <span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-6"><p><code>父组件访问不同的具名插槽的数据</code>，通过具名作用域插槽实现：</p><p>子组件中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span> <span class="attr">message</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">message</span>=<span class="string">&quot;默认值&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">message</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>=<span class="string">&quot;headerProps&quot;</span>&gt;</span> &#123;&#123; headerProps &#125;&#125; <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;defaultProps&quot;</span>&gt;</span> &#123;&#123; defaultProps &#125;&#125; <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>=<span class="string">&quot;footerProps&quot;</span>&gt;</span> &#123;&#123; footerProps &#125;&#125; <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="透传-Attribute"><a href="#透传-Attribute" class="headerlink" title="透传 Attribute"></a>透传 Attribute</h3><h4 id="属性继承"><a href="#属性继承" class="headerlink" title="属性继承"></a>属性继承</h4><p>父组件传递子组件的 props、或者事件是透传属性，但是像<code>class</code>、<code>style</code>、<code>id</code>这种属性没有显式的在子组件中声明，子组件也会继承来自父组件的属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">class</span>=<span class="string">&quot;large&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当子组件已经有<code>style</code>、<code>class</code>，属性会自动合并</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">class</span>=<span class="string">&quot;large&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;large selfClass&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件继承"><a href="#事件继承" class="headerlink" title="事件继承"></a>事件继承</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyButton</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>监听器<code>click</code>会添加到<code>&lt;MyButton /&gt;</code>的根元素上，当根元素的事件触发后，也会触发父组件中的<code>onClick</code>方法。</p><p>如果子组件中同样有绑定事件，两个事件都会被触发。</p><h4 id="禁用-Attribute"><a href="#禁用-Attribute" class="headerlink" title="禁用 Attribute"></a>禁用 Attribute</h4><p>禁止属性的继承，在组件选项中设置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">inheritAttrs</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>若是使用<code>setup</code>语法糖，需要额外一个<code>script</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// ...setup 部分逻辑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>最常见的需要禁用 attribute 继承的场景就是 attribute 需要应用在根节点以外的其他元素上，你可以完全控制透传进来的 attribute 如何应用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Fallthrough attribute: &#123;&#123; $attrs &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>几个注意点：</p><ol><li>像<code>foo-bar</code> 这样的属性，需要通过 <code>$attrs[&#39;foo-bar&#39;]</code> 来访问。</li><li>像 <code>@click</code> 这样事件监听器将在此对象下被暴露为一个函数 <code>$attrs.onClick</code>。</li></ol><p>举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假设父组件传递过来的 props 只应用到<code>button</code>上，而不是外层的<code>div</code>上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多节点继承"><a href="#多节点继承" class="headerlink" title="多节点继承"></a>多节点继承</h4><p>有多个节点的子组件，没有自动属性的透传行为，如果<code>$attrs</code>没有被显示绑定，将会抛出警告。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CustomLayout</span> <span class="attr">id</span>=<span class="string">&quot;custom-layout&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeValue&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>子组件内部是这样的：（因为不知道透传到哪一个节点）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果有显式绑定，则不会有警告--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-JS-中访问透传属性"><a href="#在-JS-中访问透传属性" class="headerlink" title="在 JS 中访问透传属性"></a>在 JS 中访问透传属性</h4><p>在<code>setup</code>语法糖中，可以使用<code>useAttrs()</code>来访问一个组件所有的透传属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;<span class="keyword">import</span> &#123;useAttrs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>不使用 setup&#96;语法糖中：将在上下文对象中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">    <span class="comment">// 透传 attribute 被暴露为 ctx.attrs</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">attrs</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最为重要的一点！！！！ 透传的<code>attrs</code>，并不是响应式的。</p><ol><li>可以通过<code>props</code>来解决响应的问题</li><li>使用 <code>onUpdated()</code> 使得在每次更新时结合最新的 <code>attrs</code> 执行副作用。</li></ol><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>当多个组件来回切换的时候，可以使用动态组件<code>&lt;component&gt;</code>的<code>is</code>属性实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;&#x27;tab&#x27; + currentTab&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>is</code>的值：</p><ol><li>被注册的组件名</li><li>导入的组件对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设现在有两个组件 分别是 tabLogin  tabRegister</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当上面的例子currentTab 为 Login 时就会渲染 tabLogin组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相反，当currentTab 为 Register 时就会渲染 tabRegister组件</span></span><br></pre></td></tr></table></figure><p>组件切换后会自动卸载，可以通过<code>&lt;KeepAlive&gt;</code>组件强制不活跃的子组件仍然保持状态。</p><h3 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;组件名&quot;</span>, 组件);</span><br></pre></td></tr></table></figure><p>链式全局注册：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">  .component(&#x27;ComponentA&#x27;, ComponentA)</span><br><span class="line">  .component(&#x27;ComponentB&#x27;, ComponentB)</span><br><span class="line">  .component(&#x27;ComponentC&#x27;, ComponentC)</span><br></pre></td></tr></table></figure><h3 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h3><p>若使用 setup 语法糖，导入的组件可以在本地直接使用，无需注册</p><p>若不使用 setup 语法糖，需要在<code>components</code>中注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><p>组件的按需引入，即<code>仅在需要时才从服务器加载相关组件</code>，使用<code>defineAsyncComponent()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="comment">/* 获取到的组件 */</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>defineAsyncComponent()</code>方法接收一个<code>返回Promise的加载函数</code>, <code>Promise</code>的<code>resolve</code>回调方法应该在服务器获得组件定义时调用，也可以用<code>reject()</code>表明加载失败。</p><h3 id="ES-模块动态导入"><a href="#ES-模块动态导入" class="headerlink" title="ES 模块动态导入"></a>ES 模块动态导入</h3><p>使用<code>ES模块动态导入</code>也会返回<code>Promise</code>，可以和<code>defineAsyncComponent()</code>联合使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&quot;./components/MyComponent.vue&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>AsyncComp</code>是一个包装器组件，仅在页面需要它时才调用加载函数，可以使用异步的包装器组件实现延迟加载。</p><h2 id="可复用性"><a href="#可复用性" class="headerlink" title="可复用性"></a>可复用性</h2><h3 id="组合式函数-Hook"><a href="#组合式函数-Hook" class="headerlink" title="组合式函数 Hook"></a>组合式函数 Hook</h3><p>封装公共任务的逻辑，使它变成一个可复用的函数，这个格式化封装了<code>无状态的逻辑</code>，它在接收到一些值后立刻返回所期望的输出。</p><p>其实就是 Hook 函数！</p><p>下面是简单的<code>鼠标位置的useMouse()</code>Hook:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouse.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照惯例，组合式函数名以“use”开头</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMouse</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 被组合式函数封装和管理的状态</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组合式函数可以随时更改其状态。</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    x.<span class="property">value</span> = event.<span class="property">pageX</span>;</span><br><span class="line">    y.<span class="property">value</span> = event.<span class="property">pageY</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个组合式函数也可以挂靠在所属组件的生命周期上</span></span><br><span class="line">  <span class="comment">// 来启动和卸载副作用</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, update));</span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, update));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过返回值暴露所管理的状态</span></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件使用的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMouse &#125; <span class="keyword">from</span> <span class="string">&quot;./mouse.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMouse</span>();</span><br></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>一个自定义指令被定义为一个包含类似于组件的生命周期钩子的对象。</p><p>在<code>setup</code>语法糖中，任何以<code>v</code>开头的驼峰命名都可以被用作一个自定义指令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 在模板中启用 v-focus</span></span><br><span class="line"><span class="keyword">const</span> vFocus = &#123;</span><br><span class="line">  <span class="attr">mounted</span>: <span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>上面自动聚焦指令：可以在页面完成加载后运行，也可以在 Vue 动态插入元素后运行</p><p><strong>全局注册指令：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;focus&quot;</span>, &#123;&#125;);</span><br></pre></td></tr></table></figure><p><strong>指令钩子：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDirective = &#123;</span><br><span class="line">  <span class="comment">// 在绑定元素的 attribute 前</span></span><br><span class="line">  <span class="comment">// 或事件监听器应用前调用</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面会介绍各个参数的细节</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在元素被插入到 DOM 前调用</span></span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都挂载完成后调用</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件更新前调用</span></span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都更新后调用</span></span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载前调用</span></span><br><span class="line">  <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载后调用</span></span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>钩子参数：</strong></p><ol><li><code>el</code>: 指令绑定到元素，可以直接操作 DOM</li><li><code>binding</code>: 一个对象，包含<ol><li><code>value</code>：传递给指令的值，例如在<code>v-my-directive=&quot;1 + 1&quot;</code>中，值是 2</li><li><code>oldValue</code>：旧值，仅在<code>beforeUpdate</code>和<code>updated</code>中可用</li><li><code>arg</code>：传给指令的参数，<code>v-my-directive:foo</code>中，参数是<code>&quot;foo&quot;</code></li><li><code>modifiers</code>：一个包含修饰符的对象，<code>v-my-direactive.foo.bar</code>中，修饰符对象是<code>&#123;foo: true, bar: true&#125;</code></li><li><code>instance</code>：使用该指令的组件实例</li><li><code>dir</code>：指令的定义对象</li></ol></li><li><code>vnode</code>：代表绑定元素的底层 VNode</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-example:foo.bar</span>=<span class="string">&quot;baz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>binding</code>参数会是这样一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">arg</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="attr">modifiers</span>: &#123;<span class="attr">bar</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  <span class="attr">value</span>: <span class="comment">/* `baz` 的值 */</span>,</span><br><span class="line">  <span class="attr">oldValue</span>: <span class="comment">/* 上一次更新时 `baz` 的值 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>简化形式：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;color&quot;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>对象字面量</strong></p><p>如果指令需要多个值，可以向它传递一个 JavaScript 对象字面量，也可以接收表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-demo</span>=<span class="string">&quot;&#123; color: &#x27;white&#x27;, text: &#x27;hello!&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;demo&quot;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>.<span class="property">color</span>); <span class="comment">// =&gt; &quot;white&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>.<span class="property">text</span>); <span class="comment">// =&gt; &quot;hello!&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件是一种能为 Vue 添加全局功能的工具代码，安装一个插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(myPlugin, &#123;</span><br><span class="line">  <span class="comment">/* 可选的选项 */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>插件是拥有<code>install()</code>方法的对象，是一个安装函数，函数接收<code>应用实例</code>和<code>app.use()</code>的额外选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPlugin = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用场景：</p><ol><li>通过<code>app.component()</code>和<code>app.directive()</code>注册的组件和指令</li><li>通过<code>app.provide()</code>使一个资源可供给全局</li><li>向<code>app.config.globalProperties</code>中添加一些全局实例属性和方法</li></ol><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">编写插件</button><button type="button" class="tab " data-href="-2">插件中的Provide和Inject</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><code>i18n</code>国际化插件</p><p>在一个单独的文件创建并导出它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>app.config.globalProperties</code>上，编写一个翻译文本的函数，函数接收一个值，在字段中查找对应的值得到翻译内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 注入一个全局可用的 $translate() 方法</span></span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$translate</span> = <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取 `options` 对象的深层属性</span></span><br><span class="line">      <span class="comment">// 使用 `key` 作为索引</span></span><br><span class="line">      <span class="keyword">return</span> key.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">o, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o) <span class="keyword">return</span> o[i];</span><br><span class="line">      &#125;, options);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个插件希望用户在使用该插件时，通过传入一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18nPlugin <span class="keyword">from</span> <span class="string">&quot;./plugins/i18n&quot;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(i18nPlugin, &#123;</span><br><span class="line">  <span class="attr">greetings</span>: &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="string">&quot;Bonjour!&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>$translate</code>会接收一个<code>greetins.hello</code>的字符串，在用户提供的字典中查找，并返回翻译的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $translate(&#x27;greetings.hello&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>在插件中，可以通过<code>Provide</code>来为插件用户提供一些内容，我们可以将<code>options</code>参数提供给整个应用，以便整个组件都可以使用翻译字典对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/i18n.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$translate</span> = <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> key.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">o, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o) <span class="keyword">return</span> o[i];</span><br><span class="line">      &#125;, options);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    app.<span class="title function_">provide</span>(<span class="string">&quot;i18n&quot;</span>, options);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>插件用户就可以在他们的组件中以 <code>i18n</code> 为 key 注入并访问插件的选项对象了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="keyword">const</span> i18n = <span class="title function_">inject</span>(<span class="string">&#x27;i18n&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i18n.<span class="property">greetings</span>.<span class="property">hello</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue文件路由生成</title>
      <link href="/2022/02/10/vue%E6%96%87%E4%BB%B6%E8%B7%AF%E7%94%B1%E7%94%9F%E6%88%90/"/>
      <url>/2022/02/10/vue%E6%96%87%E4%BB%B6%E8%B7%AF%E7%94%B1%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>在Vue中通过一个一个配置页面路由非常的麻烦，其实可以借助<code>Webpack</code>和<code>Vite</code>提供的api实现文件路由。文件路由即通过相对应的规则创建文件夹和vue文件，自动生成页面路由。</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">vite</button><button type="button" class="tab " data-href="-2">webpack</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><code>Vite</code>支持使用特殊的<code>import.meta.globEager</code>函数从文件系统导入多个模块；</p><p>请注意：</p><ul><li>这是Vite特有的，并不是ECMA的标准；</li><li>globEager方法传入的参数，必须是以<code>./</code>或者<code>/</code>开头，不能使用更换别名;</li></ul><p>假设现在有这么前端界面,页面路由<code>/admin/admin</code> ，</p><p>在页面中有共用的<code>Header</code>、<code>Menu</code>的<code>layouts</code>组件，<code>content</code>作为<code>admin</code>的子路由</p><p><img src="https://s2.loli.net/2022/02/02/mSMkJyAL7CgBcN9.png" alt="image-20220202143930031"></p><p>对应所生成的路由是：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteRecordRaw</span>[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/home.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Admin&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/admin/admin&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/admin/admin.vue&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>那我们可以写成一个方法来自动生成对应的路由：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> layoutsVueFiles = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">globEager</span>(<span class="string">&quot;../layouts/*.vue&quot;</span>);<span class="comment">// layouts文件夹里面所有的vue文件</span></span><br><span class="line"><span class="keyword">const</span> childrenVueFiles = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">globEager</span>(<span class="string">&quot;../views/**/*.vue&quot;</span>); <span class="comment">// views文件夹对应子路由对应的所有vue文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一级路由</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAuthRoutes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> layoutRoutes = [] <span class="keyword">as</span> <span class="title class_">RouteRecordRaw</span>[];</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">entries</span>(layoutsVueFiles).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[fileName, <span class="variable language_">module</span>]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> routes = <span class="title function_">getRouteByFileModule</span>(<span class="string">&quot;fatherRoutes&quot;</span>, fileName, <span class="variable language_">module</span>);</span><br><span class="line">    routes.<span class="property">children</span> = <span class="title function_">getChildrenRoutes</span>(routes);</span><br><span class="line">    layoutRoutes.<span class="title function_">push</span>(routes);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> layoutRoutes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子路由</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getChildrenRoutes</span>(<span class="params">routes: RouteRecordRaw</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> childrenRoutes = [] <span class="keyword">as</span> <span class="title class_">RouteRecordRaw</span>[];</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">entries</span>(childrenVueFiles).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[fileName, <span class="variable language_">module</span>]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fileName.<span class="title function_">includes</span>(<span class="string">`../views<span class="subst">$&#123;routes.path&#125;</span>`</span>)) &#123;</span><br><span class="line">      childrenRoutes.<span class="title function_">push</span>(<span class="title function_">getRouteByFileModule</span>(<span class="string">&quot;childrenRoutes&quot;</span>, fileName, <span class="variable language_">module</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> childrenRoutes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成routes路由对象格式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRouteByFileModule</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span>, fileName: <span class="built_in">string</span>, <span class="variable language_">module</span>: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pathName =</span><br><span class="line">    <span class="keyword">type</span> == <span class="string">&quot;fatherRoutes&quot;</span></span><br><span class="line">      ? fileName.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">pop</span>()?.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">      : fileName.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>].<span class="title function_">replace</span>(<span class="string">&quot;/views/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">`/<span class="subst">$&#123;pathName&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="variable language_">module</span>.<span class="property">default</span>,</span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="title class_">RouteRecordRaw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">getAuthRoutes</span>(); <span class="comment">// 导出最终路由</span></span><br></pre></td></tr></table></figure><p>在路由入口文件中，合并动态的路由和静态的路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHistory&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&quot;./routes&quot;</span>; <span class="comment">// 默认路由</span></span><br><span class="line"><span class="keyword">import</span> layoutsAuthRoutes <span class="keyword">from</span> <span class="string">&quot;./authLoad&quot;</span>; <span class="comment">// 自动导入路由</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">App</span>&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [...routes, ...layoutsAuthRoutes],</span><br><span class="line">&#125;<span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setupRouter</span>(<span class="params">app: App</span>) &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(router);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>同理，在<code>webpack</code>中可以使用<code>require.context</code>获取到对应文件夹下的文件模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">setRoutes</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> routes = []</span><br><span class="line">  <span class="keyword">const</span> files = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;../views&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.vue$/</span>);</span><br><span class="line">  <span class="keyword">const</span> pageViewPaths = files.<span class="title function_">keys</span>().<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !item.<span class="title function_">includes</span>(<span class="string">&#x27;components&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  pageViewPaths.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> path = key.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> pathSplitArr = path.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    routes.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">path</span>: path,</span><br><span class="line">      <span class="attr">name</span>: <span class="title function_">upperCaseFirstStr</span>(pathSplitArr[pathSplitArr.<span class="property">length</span> - <span class="number">1</span>]),</span><br><span class="line">      <span class="attr">component</span>: <span class="title function_">files</span>(key).<span class="property">default</span>,</span><br><span class="line">      ...<span class="title function_">files</span>(key).<span class="property">default</span>.<span class="property">otherRouterData</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> routes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 文件路由 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 文件路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koa</title>
      <link href="/2022/02/03/koa2/"/>
      <url>/2022/02/03/koa2/</url>
      
        <content type="html"><![CDATA[<h2 id="koa2安装"><a href="#koa2安装" class="headerlink" title="koa2安装"></a>koa2安装</h2><p>创建空白目录，进入终端初始化项目;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化项目</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm init -y</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装koa2</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install koa2 -s</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装nodemon</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install nodemon -d</span></span><br></pre></td></tr></table></figure><p>补充：</p><p>Npm中命令跟上的 -g、-d、-s、分别代表什么意思？</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>-g</td><td>这台设备全局安装</td></tr><tr><td>-d</td><td>只存在于开发环境，线上环境不需要(例如：<code>nodemon</code>&#x2F;<code>less</code>)</td></tr><tr><td>-s</td><td>线上环境开发环境都需要此插件，会显示在<code>package.json[&#39;dependencies&#39;]</code>中(例如：<code>koa2</code>)</td></tr></tbody></table><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><p>为了使node程序热更新，用<code>nodemon</code>代替默认启动命令;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon app.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>学习Koa需要了解到<code>洋葱模型</code>:</p><p><img src="https://s2.loli.net/2022/02/03/mhCBe7UTFr2tV1a.png" alt="image-20220203163417210"></p><p>Express和Koa作为同样作用的中间件，两者的执行顺序不太一样；</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">Express</button><button type="button" class="tab " data-href="-2">Koa2</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>在express框架中，中间件是顺序执行，通过<code>next()</code>逐级匹配，然后响应结果</p><p><img src="https://s2.loli.net/2022/02/03/AkGz8wbsRWPyaQm.png" alt="image-20220203164934821"></p></div><div class="tab-item-content" id="-2"><p>Koa2中，从第一个中间件开始执行，遇到<code>next()</code>进入下一个中间件，一直执行到最后一个中间件，再逆着顺序继续执行上一个中间<code>next()</code>方法后面的代码,一直到第一个中间件执行结束才完成响应;</p><p><img src="https://s2.loli.net/2022/02/03/XEPiF3urAnkRKsl.png" alt="image-20220203165252570"></p><p>通过一段代码结合上图加深理解：</p><p>koa中间件的执行顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running at http://localhost:&#x27;</span>+ port);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果： 1-3-5-4-2</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="什么是中间件？"><a href="#什么是中间件？" class="headerlink" title="什么是中间件？"></a>什么是中间件？</h2><blockquote><p>中间件是用于<code>匹配路由之前</code>或者<code>匹配路由之后</code>所完成的一些列操作;</p><p>在express中间件是一个函数，他可以访问请求对象<code>request</code>或者响应对象<code>response</code>，和 <code>web</code> 应用中处理请求-响应循环流程中的中间件，一般被命名为 <code>next</code> 的变量</p></blockquote><h3 id="中间件功能："><a href="#中间件功能：" class="headerlink" title="中间件功能："></a>中间件功能：</h3><ul><li>执行任何代码</li><li>修改请求和响应对象</li><li>终结请求-响应循环</li><li>调用堆栈中的下一个中间件</li></ul><p>如果我的 <code>get</code> 、<code>post</code>回调函数中，没有 next 参数，只会匹配上第一个路由，就不会往下匹配了。如果想往下匹配，就需要 next（）。</p><h3 id="中间件优先级："><a href="#中间件优先级：" class="headerlink" title="中间件优先级："></a>中间件优先级：</h3><table><thead><tr><th>中间件</th><th>解释</th></tr></thead><tbody><tr><td>router.get()</td><td>路由中间件</td></tr><tr><td>app.use()</td><td>应用级中间件(优先级更高)</td></tr></tbody></table><p>当<code>Koa2</code>中有<code>应用级中间件</code>和<code>路由级中间件</code>同时存在的时候，会先执行<code>应用级中间件</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是中间件02&#x27;</span>)</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;首页&#x27;</span> <span class="comment">/*返回数据，相当于原生里面的response.end()*/</span></span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是中间件01&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>() <span class="comment">/*当前路由匹配完成以后 继续匹配向下匹配路由*/</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这是中间件01  这是中间件02</span></span><br></pre></td></tr></table></figure><h3 id="中间件分类："><a href="#中间件分类：" class="headerlink" title="中间件分类："></a>中间件分类：</h3><ul><li>应用级中间件</li></ul><p>有<code>next()</code>的情况下，就会继续向下匹配路由，</p><p>没有<code>next()</code>的情况，就不会向下继续匹配了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在每个页面渲染之前 打印当前时间</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa应用级中间件</span></span><br><span class="line"><span class="comment">// 匹配任何路由之前打印日期</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;这是一个中间件&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>());</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>() <span class="comment">/*当前路由匹配完成以后 继续匹配向下匹配路由*/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动路由 让路由生效</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>()) <span class="comment">/*官方建议配置,不配置也不报错*/</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>)</span><br></pre></td></tr></table></figure><ul><li>错误处理中间件</li></ul><p>此处的执行流程：</p><ol><li>先全局匹配路由，打印 <code>这是中间件01</code>;</li><li>然后遇到<code>next()</code>执行下一个中间件，找到<code>news</code>路由 打印<code>这是新闻02</code>;</li><li>匹配不到其他路由后，再返回来执行<code>app.use</code>里面 next 之后的代码，最终响应app.use的执行结果;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// www.域名.com/xxx</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是中间件01&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">status</span> == <span class="number">404</span>) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">404</span></span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">&#x27;这是一个404页面&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa中间件</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;首页&#x27;</span> <span class="comment">/*返回数据，相当于原生里面的response.end()*/</span></span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是新闻02&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻列表&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/newsConatent&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动路由 让路由生效</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>()) <span class="comment">/*官方建议配置,不配置也不报错*/</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>)</span><br></pre></td></tr></table></figure><ul><li>路由级中间件</li></ul><p>匹配两次<code>news</code>路由，如果第一次匹配的<code>news</code>没有<code>next</code>，就不会继续执行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa中间件</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 匹配到news路由后，继续往下匹配路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一条新闻&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻列表&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/newsConatent&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动路由 让路由生效</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>()) <span class="comment">/*官方建议配置,不配置也不报错*/</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h2 id="Koa路由"><a href="#Koa路由" class="headerlink" title="Koa路由"></a>Koa路由</h2><p>koa中的路由和Express有所不同，在Express中直接引入Express就可以配置路由，但是在Koa中我们需要安装对应的koa-router路由模块来实现。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i koa-router -s</span></span><br></pre></td></tr></table></figure><h3 id="路由基本使用"><a href="#路由基本使用" class="headerlink" title="路由基本使用"></a>路由基本使用</h3><ol><li>引入koa模块和<code>koa-router</code>模块</li><li>实例化<code>koa</code>和<code>router</code></li><li>配置路由<ol><li>ctx包含了<code>request</code>、<code>response</code>等信息</li><li><code>ctx.body</code>是渲染页面数据，相当于原生里的<code>response.end()</code></li></ol></li><li>启动路由，让路由生效</li><li><code>router.allowedMethods()</code> 官方建议配置，不配置也不会报错</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa2&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.实例化模块</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">// 3.配置路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">ctx.<span class="property">body</span> = <span class="string">&#x27;首页&#x27;</span> </span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">ctx.<span class="property">body</span> = <span class="string">&#x27;新闻列表&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/newsConatent&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4.启动路由 让路由生效</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>()) <span class="comment">/*官方建议配置,不配置也不报错*/</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>)</span><br></pre></td></tr></table></figure><h3 id="get传值"><a href="#get传值" class="headerlink" title="get传值"></a>get传值</h3><p>在<code>koa2</code>中get传值通过<code>request</code>接收，方法有两种：<code>query</code> 和 <code>querystring</code></p><ol><li>query ：返回参数对象（也包含了域名信息、当前url信息等）。</li><li>querystring：返回的是请求字符串。</li></ol><p>假设现在通过接口访问: <code>http://localhost:3000/newsConatent?aid=123&amp;name=zwd</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/newsConatent&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;query&#x27;</span>, ctx.<span class="property">query</span>);  <span class="comment">// &#123; aid: &#x27;123&#x27;, name: &#x27;zwd&#x27; &#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;querystring&#x27;</span>, ctx.<span class="property">querystring</span>); <span class="comment">// aid=123&amp;name=zwd</span></span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;get传值&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="post传值"><a href="#post传值" class="headerlink" title="post传值"></a>post传值</h3><p>前端通过<code>post</code>请求的参数，在<code>koa2</code>中需要使用一个插件来获取<code>bodyparser</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-bodyparser</span><br></pre></td></tr></table></figure><p>在<code>koa2</code>入口文件<code>app.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用router中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());<span class="comment">// bodyParser</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>(), router.<span class="title function_">allowedMethods</span>());</span><br></pre></td></tr></table></figure><h3 id="动态路由传值"><a href="#动态路由传值" class="headerlink" title="动态路由传值"></a>动态路由传值</h3><ol><li>通过<code> :id</code>来添加动态路由</li><li>在<code>ctx.params</code>中动态获取</li></ol><p>假设现在通过接口访问: <code>http://localhost:3000/newsConatent/xxx/yyy</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/newsConatent/:aid/bid&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取动态路由的传值 ctx.params</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">params</span>); <span class="comment">// &#123; aid: &#x27;123&#x27;, bid: &#x27;456&#x27; &#125;</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由拆分"><a href="#路由拆分" class="headerlink" title="路由拆分"></a>路由拆分</h3><p>当项目较大，路由较多时，我们需要划分模块。此时，就需要对路由进行拆分。</p><p><img src="https://s2.loli.net/2022/02/03/MaF4foyZOW6B72i.png" alt="image-20220203173420035"></p><p>以上分别拆分了三个模块：<code>后台管理系统模块</code>、<code>前端界面模块</code>、<code>404模块</code></p><p>创建后台管理系统模块：<code>index.js</code>中</p><blockquote><p>模块中的根路径，其实是模块的名字</p><p>例如: web模块中的<code>/</code>,意思是<code>/web</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的根其实是/web模块</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;web系统数据&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>应用模块中的中间件和路由方法：<code>app.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入web模块</span></span><br><span class="line"><span class="keyword">const</span> web = <span class="built_in">require</span>(<span class="string">&#x27;./router/web/index&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.应用web模块中间件(匹配所有写的路由，允许所有的方法)</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="string">&#x27;/web&#x27;</span>, web.<span class="title function_">routes</span>(), web.<span class="title function_">allowedMethods</span>());</span><br></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>访问一个不存在资源，我们需要让页面重定向到<code>404页面</code></p><p>如果请求了根路径，则重定向到<code>/manage</code>页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;/manage&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果全局访问不存在资源，使用应用级中间件，重定向到<code>404页面</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Number</span>(ctx.<span class="property">status</span>) === <span class="number">404</span>)&#123;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="title function_">redirect</span>(<span class="string">&#x27;/404&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="后端允许跨域"><a href="#后端允许跨域" class="headerlink" title="后端允许跨域"></a>后端允许跨域</h3><p>依赖于<code>koa2-cors</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install koa2-cors</span></span><br></pre></td></tr></table></figure><p>设置跨域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;koa2-cors&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>()); <span class="comment">// 这里应用cors依赖，必须写在路由之前，即router之前</span></span><br></pre></td></tr></table></figure><h3 id="读取静态资源"><a href="#读取静态资源" class="headerlink" title="读取静态资源"></a>读取静态资源</h3><p>依赖于<code>koa-static</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add koa-static</span></span><br></pre></td></tr></table></figure><p>在项目根目录下创建文件夹<code>assets</code>，专门放一些静态文件(html，img，css等);现在放入一张<code>404</code>页面的图片;</p><p>使用步骤：</p><ol><li>通过node内置<code>path</code>读取到文件所在的路径;</li><li><code>fs</code>模块读取文件类型;</li><li>根据读取的文件类型，设置<code>content-type</code>为该类型</li></ol><p>依赖于<code>mime-types</code>来设置<code>content-type</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i mime-types</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">&quot;mime-types&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的根路径代表/404</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> ctx=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../assets/images/404.gif&quot;</span>); <span class="comment">// 获取资源路径</span></span><br><span class="line">    <span class="keyword">const</span> file = fs.<span class="title function_">readFileSync</span>(filePath); <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="keyword">const</span> mimeType = mime.<span class="title function_">lookup</span>(filePath)  <span class="comment">// 读取文件类型</span></span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;content-type&quot;</span>, mimeType);  <span class="comment">// 设置返回类型mimeType（这一步很重要）</span></span><br><span class="line">    ctx.<span class="property">body</span> = file;    <span class="comment">// 返回图片给前端</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> koa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ts封装的axios实例</title>
      <link href="/2022/02/02/%E5%9F%BA%E4%BA%8Etypescript%E5%B0%81%E8%A3%85axios%E5%AE%9E%E4%BE%8B/"/>
      <url>/2022/02/02/%E5%9F%BA%E4%BA%8Etypescript%E5%B0%81%E8%A3%85axios%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>基于Ts的axios请求封装，实现不同请求可以使用不同的拦截器以及请求配置。</p><p>可搭配<code>Element Plus</code>中的<code>Loading</code>实现请求前的<code>loading</code>效果</p><p>axios依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><p>定义拦截器方法接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> wdRequestInterceptors &#123;</span><br><span class="line">  <span class="comment">/*请求拦截方法*/</span></span><br><span class="line">  requestInterceptor?: <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> <span class="title class_">AxiosRequestConfig</span>;</span><br><span class="line">  <span class="comment">/*请求拦截失败，err无法确定类型，所以使用any*/</span></span><br><span class="line">  requestInterceptorCatch?: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line">  <span class="comment">// 响应拦截</span></span><br><span class="line">  responseInterceptor?: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line">  <span class="comment">// 响应失败拦截</span></span><br><span class="line">  responseInterceptorCatch?: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<code>config</code>对象的接口，可以自定义传入配置项，继承自内置的<code>AxiosRequestConfig</code>接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> wdRequestConfig <span class="keyword">extends</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line">  interceptors?: wdRequestInterceptors;</span><br><span class="line">  showLoading?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义请求类(包含对拦截器的操作、loading展示、不同请求methods)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ILoadingInstance</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/el-loading/src/loading.type&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WdRequest</span> &#123;</span><br><span class="line">  <span class="attr">instance</span>: <span class="title class_">AxiosInstance</span>;</span><br><span class="line">  interceptors?: wdRequestInterceptors;</span><br><span class="line">  loading?: <span class="title class_">ILoadingInstance</span>;</span><br><span class="line">  showLoadin?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">config: wdRequestConfig</span>) &#123;</span><br><span class="line">    <span class="comment">/*将axios实例保存在类中*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span> = axios.<span class="title function_">create</span>(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将传入的拦截器保存在类中*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span> = config.<span class="property">interceptors</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*传入请求拦截(请求前的函数、请求失败的函数)*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">interceptors</span>?.<span class="property">requestInterceptor</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">interceptors</span>?.<span class="property">requestInterceptorCatch</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">/*传入的响应拦截(响应成功的函数、响应失败的函数)*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">interceptors</span>?.<span class="property">responseInterceptor</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">interceptors</span>?.<span class="property">responseInterceptorCatch</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*若没有传入拦截方法，则走默认的拦截方法*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">interceptorsRequest</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">interceptorsRespones</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*请求拦截*/</span></span><br><span class="line">  <span class="title function_">interceptorsRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*响应拦截*/</span></span><br><span class="line">  <span class="title function_">interceptorsRespones</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  request&lt;T&gt;(<span class="attr">config</span>: wdRequestConfig): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/*自定义传入是否展示loading效果，默认为true*/</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showLoading</span> = config.<span class="property">showLoading</span> ?? <span class="variable constant_">DEFAULTLOADING</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** 自定义传入的请求拦截器, 设置config **/</span></span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">interceptors</span>?.<span class="property">requestInterceptor</span>) &#123;</span><br><span class="line">        config = config.<span class="property">interceptors</span>.<span class="title function_">requestInterceptor</span>(config);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">instance</span></span><br><span class="line">        .<span class="property">request</span>&lt;<span class="built_in">any</span>, T&gt;(config)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">/** 自定义传入的响应拦截器 **/</span></span><br><span class="line">          <span class="keyword">if</span> (config.<span class="property">interceptors</span>?.<span class="property">responseInterceptor</span>) &#123;</span><br><span class="line">            res = config.<span class="property">interceptors</span>.<span class="title function_">responseInterceptor</span>(res);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">showLoading</span> = <span class="variable constant_">DEFAULTLOADING</span>;</span><br><span class="line">          <span class="title function_">resolve</span>(res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">request</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  get&lt;T&gt;(<span class="attr">config</span>: wdRequestConfig): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>&lt;T&gt;(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  post&lt;T&gt;(<span class="attr">config</span>: wdRequestConfig): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>&lt;T&gt;(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span>&lt;T&gt;(<span class="attr">config</span>: wdRequestConfig): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>&lt;T&gt;(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;DELETE&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  patch&lt;T&gt;(<span class="attr">config</span>: wdRequestConfig): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>&lt;T&gt;(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;PATCH&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> wdRequest;</span><br></pre></td></tr></table></figure><p>默认统一拦截器或者请求</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wdRequest <span class="keyword">from</span> <span class="string">&quot;@/service/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wdRequestFn = <span class="keyword">new</span> <span class="title function_">wdRequest</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;http://152.136.185.210:5000&quot;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">interceptors</span>: &#123;</span><br><span class="line">    <span class="comment">// 传入请求拦截</span></span><br><span class="line">    <span class="attr">requestInterceptor</span>: <span class="function">(<span class="params">config: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> token = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;vue3token&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 传入响应拦截</span></span><br><span class="line">    <span class="attr">responseInterceptor</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> wdRequestFn;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pinia (皮尼亚)</title>
      <link href="/2022/01/23/%E9%82%82%E9%80%85Pinia/"/>
      <url>/2022/01/23/%E9%82%82%E9%80%85Pinia/</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><p><strong>由于Hexo暂不支持Vue模板文件的编译，所以所有vue文件内容会以文本形式展示</strong></p></div><h3 id="Store是什么？"><a href="#Store是什么？" class="headerlink" title="Store是什么？"></a>Store是什么？</h3><p>Pinia从使用角度和之前的Vuex几乎是一样的。</p><table><thead><tr><th>Pinia</th><th>Vuex</th></tr></thead><tbody><tr><td>State</td><td>State</td></tr><tr><td>Getter</td><td>Getter</td></tr><tr><td>Actions(同步异步都支持)</td><td>Actions(仅支持异步)</td></tr><tr><td><del>Mutation(移除)</del></td><td>Mutations</td></tr></tbody></table><p><code>Store</code>是一个保存状态和业务逻辑的实体，它不绑定到组件树。换句话说，<code>Store</code>承载全局的<code>全局状态</code>，每个组件都可以进行读取和写入；</p><ul><li>State：类似组件中的<code>data</code>,用来储存全局状态。</li><li>Getters：类似组件的<code>computed</code>,根据已有<code>State</code>封装派生数据，也具有缓存的特性。</li><li>Actions：类似组件的<code>methods</code>,用来封装业务逻辑，同步异步都可以。</li></ul><h3 id="应用场景？"><a href="#应用场景？" class="headerlink" title="应用场景？"></a>应用场景？</h3><p>一个<code>状态</code>在多处使用的数据，例如用户信息、通过页面保存的数据、一个非常复杂的多步骤表单…</p><p>应该避免原本可以在组件中保存的数据，例如一个组件内的按钮的显示状态</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个Store是通过<code>defineStore()</code>定义的</p><p>第一个参数：<strong>相当于id，是独一无二的</strong></p><p><code>defineStore()</code>的返回值是可以任意命名的，官方推荐使用以<code>use</code>开头，<code>Store</code>结尾的格式：（比如<code>useUserStore</code>、<code>useCartStore</code>、<code>useProductStore</code>）</p><p>第二个参数：<strong>setup函数</strong>、<strong>option对象</strong></p><p>option对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = (<span class="string">&#x27;userInfo&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="attr">double</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   <span class="attr">actions</span>:&#123;</span><br><span class="line">     <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">count</span> ++</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>setup函数：相对option对象的方式，setup函数比较灵活，因为可以在store内创建侦听器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCartStore = (<span class="string">&#x27;cart&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">    count.<span class="property">value</span> ++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    count,</span><br><span class="line">    increment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>注意⚠️：store是一个用<code>reactive</code>包装的对象，直接从store中解构属性会破坏响应性</p></div><p>以下<code>count</code>会丢失响应式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">useCountStore</span>();</span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = store;</span><br></pre></td></tr></table></figure><p>为了从store中提取属性并且保持响应式，需要使用<code>storeToRefs()</code>，它将为每一个响应式属性创建引用。</p><p>以下<code>count</code>是响应式的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useCountStore</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; count &#125; = <span class="title function_">storeToRefs</span>(store);</span><br></pre></td></tr></table></figure><h3 id="state的操作"><a href="#state的操作" class="headerlink" title="state的操作"></a>state的操作</h3><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">访问</button><button type="button" class="tab " data-href="-2">重置</button><button type="button" class="tab " data-href="-3">变更</button><button type="button" class="tab " data-href="-4">监听</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>通过store直接访问state：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">useCountStore</span>()</span><br><span class="line">store.<span class="property">count</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><p>通过<code>$reset()</code>方法重置state为初始值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">useCountStore</span>()</span><br><span class="line">store.$reset()</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><p>除了使用<code>store.count++</code>直接改变store以外，还可以调用<code>$patch()</code>，同时修改多个属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">useCountStore</span>()</span><br><span class="line">store.$patch(&#123;</span><br><span class="line">  <span class="attr">count</span>: store.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;bernie&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">99</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>$patch()</code>也可以接受一个函数来实现变更：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.$patch(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  state.<span class="property">count</span> += <span class="number">5</span>;</span><br><span class="line">  state.<span class="property">name</span> = <span class="string">`bernie`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><p>通过<code>$subscribe()</code>方法可以监听state的变化，在每次<code>patch</code>后只触发一次;</p><p>每次状态发生变化时，将某个state持久化到本地存储；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">useCountStore</span>()</span><br><span class="line">store.$subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@&quot;</span>, mutation);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;#&quot;</span>, state);</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">name</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>等同于vue中的计算属性，推荐使用箭头函数，并且它接收<code>state</code>作为第一个参数：</p><p>基本使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&quot;counter&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">doubleCountPlus</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="string">&quot;~~`&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 可以直接在组件中访问 doubleCount、doubleCountPlus</span></span><br></pre></td></tr></table></figure><p>向getter传递参数：</p><p>默认是不可以向getter传递任何参数，但是可以从getter返回一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">editNameValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">userId</span>) =&gt;</span> userId + <span class="string">&quot;-uuid-&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> editNameValue = store.<span class="property">editNameValue</span>;</span><br><span class="line"><span class="title function_">editNameValue</span>(<span class="number">3</span>) <span class="comment">// 3-uuid-bernie</span></span><br></pre></td></tr></table></figure><h2 id="基本事例"><a href="#基本事例" class="headerlink" title="基本事例"></a>基本事例</h2><p>首先先创建一个全局<code>store</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件中使用；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>()</span><br><span class="line">    counter.<span class="property">count</span>++</span><br><span class="line">    <span class="comment">// 1.直接修改</span></span><br><span class="line">    counter.$patch(&#123;<span class="attr">count</span>: counter.<span class="property">count</span> + <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="comment">// 2.使用actions修改</span></span><br><span class="line">    counter.<span class="title function_">increment</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      counter</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>这里使用vite创建vue3+ts项目；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><p>安装<code>Pinia</code>；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><p>在vue3项目入口文件引入调用<code>Pinia实例</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br></pre></td></tr></table></figure><p>创建<code>store文件夹</code>，<code>index文件</code></p><p><code>defineStore</code>方法有两个参数：</p><ul><li>参数一：容器id，全局唯一</li><li>参数二：对象，里面包含了三大核心<code>state</code>,<code>getters</code>,<code>actions</code></li><li>返回值：是一个函数，调用函数获得一个<code>pinia实例</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建容器</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMainStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">102</span>,</span><br><span class="line">      <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取state值"><a href="#获取state值" class="headerlink" title="获取state值"></a>获取state值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useMainStore &#125; from &quot;../store/index&quot;;</span><br><span class="line">const mainStore = useMainStore(); // 返回值是一个函数调用实例</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; mainStore.count &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123; mainStore.foo &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>像上面的获取<code>state</code>的值有点太麻烦，可以使用ES6解构的方式;</p><p>但是问题来了，通过这种方式获取的值，并不是响应式的;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useMainStore &#125; from &quot;../store/index&quot;;</span><br><span class="line">const mainStore = useMainStore(); // 返回值是一个函数调用实例</span><br><span class="line">const &#123; count, foo &#125; = mainStore</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; count &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123; foo &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>如何将<code>state</code>的值使用解构的方式，并且让它变成响应式的呢；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; useMainStore &#125; from &quot;../store/index&quot;;</span><br><span class="line">import &#123; storeToRefs &#125; from &quot;pinia&quot;;</span><br><span class="line">const mainStore = useMainStore()</span><br><span class="line">const &#123; count, foo &#125; = storeToRefs(mainStore)  // 这样解构的数据是响应式的</span><br><span class="line">console.log(count.value) // 访问数据需要使用.value的方式</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="修改state值"><a href="#修改state值" class="headerlink" title="修改state值"></a>修改state值</h3><p>现有某个组件；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; count &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; foo &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; bar &#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button @click=&quot;handleChangeState&quot;&gt;修改数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useMainStore &#125; from &quot;../store/index&quot;;</span><br><span class="line">const mainStore = useMainStore();</span><br><span class="line">import &#123; storeToRefs &#125; from &quot;pinia&quot;;</span><br><span class="line">const &#123; count, foo, bar &#125; = storeToRefs(mainStore);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>方式——：直接修改某个值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const handleEditData = () =&gt; &#123;</span><br><span class="line">  mainStore.count++</span><br><span class="line">  mainStore.foo =&#x27;Hello Pinia!&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>方式二：批量更新多个数据(对象形式)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const handleEditData = () =&gt; &#123;</span><br><span class="line">  mainStore.$patch(&#123;</span><br><span class="line">    count: mainStore.count + 1,</span><br><span class="line">    foo: &quot;Hello Pinia&quot;,</span><br><span class="line">    bar: [...mainStore.bar, 4],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>方式三：批量更新多个数据(函数形式),<code>state</code>就是Pinia里的<code>state</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  mainStore.$patch((state) =&gt; &#123;</span><br><span class="line">    state.count++;</span><br><span class="line">    state.foo = &quot;zwed&quot;;</span><br><span class="line">    state.bar.push(4);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>方式四：逻辑过多的时候，在<code>actions</code>中进行修改</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMainStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">102</span>,</span><br><span class="line">      <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">      <span class="attr">bar</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">changeState</span>(<span class="params">num: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="comment">// this.count++;</span></span><br><span class="line">      <span class="comment">// this.foo = &quot;good&quot;;</span></span><br><span class="line">      <span class="comment">// this.bar.push(4);</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">count</span> += num;</span><br><span class="line">        state.<span class="property">foo</span> = <span class="string">&quot;good&quot;</span>;</span><br><span class="line">        state.<span class="property">bar</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>组件中通过<code>$patch</code>调用<code>Pinia</code>中<code>actions</code>的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  mainStore.changeState(10);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用getters"><a href="#使用getters" class="headerlink" title="使用getters"></a>使用getters</h3><p>上面提到<code>getters</code>相当于是<code>computed</code>，他是依赖于某个值的变化，而调用的方法，也具有缓存的特性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMainStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">102</span>,</span><br><span class="line">      <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">      <span class="attr">bar</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">count10</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;,   </span><br><span class="line">    <span class="title function_">count20</span>(): <span class="built_in">number</span> &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">20</span>; <span class="comment">// 如果是使用this，需要手动添加函数返回类型，ts不会自动推导</span></span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/22/AHXPLSdiMYFtlKZ.png"></p><h2 id="Pinia购物车案例"><a href="#Pinia购物车案例" class="headerlink" title="Pinia购物车案例"></a>Pinia购物车案例</h2><p><img src="https://s2.loli.net/2022/01/23/GOHtiWNv2xoQDgf.png" alt="image-20220123171352752"></p><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><ul><li>商品列表(展示商品列表、添加到购物车)</li><li>购物车(展示购物车商品列表、展示总价格、订单结算、展示结算状态)</li></ul><h3 id="项目的目录结构"><a href="#项目的目录结构" class="headerlink" title="项目的目录结构"></a>项目的目录结构</h3><p><img src="https://s2.loli.net/2022/01/23/uKyGczPNL1sprot.png" alt="image-20220123173855099"></p><h3 id="模拟api请求"><a href="#模拟api请求" class="headerlink" title="模拟api请求"></a>模拟api请求</h3><p>在根目录下 <code>api/shop.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IProduce</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">inventory</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">_products</span>: <span class="title class_">IProduce</span>[] = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">title</span>: <span class="string">&quot;iPad 4 Mini&quot;</span>, <span class="attr">price</span>: <span class="number">500.01</span>, <span class="attr">inventory</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&quot;H&amp;M T-Shirt White&quot;</span>, <span class="attr">price</span>: <span class="number">10.99</span>, <span class="attr">inventory</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&quot;Charli XcX - Sucker CD&quot;</span>, <span class="attr">price</span>: <span class="number">19.99</span>, <span class="attr">inventory</span>: <span class="number">5</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getProducts</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">return</span> _products;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">buyProducts</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">delay: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, delay);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pinia模块"><a href="#pinia模块" class="headerlink" title="pinia模块"></a>pinia模块</h3><p>每个模块都可以有自己的<code>pinia实例</code></p><p>这里会使用到三个组件：</p><p>父组件<code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Pinia - 购物车案例&lt;/h1&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;h3&gt;商品列表&lt;/h3&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;ProductList /&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;ShoppingCart /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import ProductList from &quot;./components/ProductList.vue&quot;;</span><br><span class="line">import ShoppingCart from &quot;./components/ShoppingCart.vue&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件<code>ProductList.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in productsStore.all&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">      &#123;&#123; item.title &#125;&#125; - &#123;&#123; item.price &#125;&#125;</span><br><span class="line">      &lt;br /&gt;</span><br><span class="line">      &lt;button @click=&quot;handleAddProducts(item)&quot; :disabled=&quot;!item.inventory&quot;&gt;添加到购物车&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useMainStore &#125; from &quot;../store/index&quot;; // 商品列表pinia实例</span><br><span class="line">import &#123; useCartStore &#125; from &quot;../store/cart&quot;; // 购物车pinia实例</span><br><span class="line"></span><br><span class="line">// 加载所有商品信息</span><br><span class="line">const productsStore = useMainStore();</span><br><span class="line">productsStore.loadAllProducts();</span><br><span class="line"></span><br><span class="line">// 添加到购物车</span><br><span class="line">const shoppingCartStore = useCartStore();</span><br><span class="line">const handleAddProducts = (item: any) =&gt; &#123;</span><br><span class="line">  shoppingCartStore.addProductToCart(item);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">li &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-content: center;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>子组件<code>ProductList.vue</code>对应的<code>pinia实例</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getProducts, <span class="title class_">IProduce</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../api/shop&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMainStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">all</span>: [] <span class="keyword">as</span> <span class="title class_">IProduce</span>[], <span class="comment">// 所有商品列表 默认空数组转换成IProduce接口类型的数组</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 加载所有的商品列表</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">loadAllProducts</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> ret = <span class="keyword">await</span> <span class="title function_">getProducts</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">all</span> = ret;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每添加一件商品到购物车，库存就减少1</span></span><br><span class="line"><span class="comment">     * product是点击添加到购物车的商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">decrementProduct</span>(<span class="params">product: IProduce</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> productItem = <span class="variable language_">this</span>.<span class="property">all</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> == product.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">if</span> (productItem) &#123;</span><br><span class="line">        productItem.<span class="property">inventory</span>--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>子组件<code>ShoppingCart.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;cart&quot;&gt;</span><br><span class="line">    &lt;h3&gt;你的购物车&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &lt;i&gt;请添加一些商品到购物车&lt;/i&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in cartStore.carProducts&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &#123;&#123; item.title &#125;&#125; - &#123;&#123; item.price &#125;&#125; x &#123;&#123; item.quantity &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;商品总价: &#123;&#123; cartStore.totalPrice &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &lt;button @click=&quot;handlePayment&quot;&gt;结算&lt;/button&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p v-show=&quot;cartStore.checkOutStatus&quot;&gt;结算&#123;&#123; cartStore.checkOutStatus &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useCartStore &#125; from &quot;../store/cart&quot;;</span><br><span class="line">const cartStore = useCartStore();</span><br><span class="line">const handlePayment = () =&gt; &#123;</span><br><span class="line">  cartStore.checkOutAndPayment();</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件<code>ShoppingCart.vue</code>对应的<code>Pinia实例</code></p><p><code>Omit</code>是<code>TypeScript中type</code>的语法，过滤掉一些属性及属性值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; buyProducts, <span class="title class_">IProduce</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../api/shop&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useMainStore &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartProduct的类型接口最终只会有 &#123;id,title,price,quantity&#125; </span></span><br><span class="line"><span class="comment">// Omit是将IProduce接口类型中的库存字段inventory过滤掉，因为购物车里不需要库存信息</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CartProduct</span> = &#123;</span><br><span class="line">  <span class="attr">quantity</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125; &amp; <span class="title class_">Omit</span>&lt;<span class="title class_">IProduce</span>, <span class="string">&quot;inventory&quot;</span>&gt;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCartStore = <span class="title function_">defineStore</span>(<span class="string">&quot;cart&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">carProducts</span>: [] <span class="keyword">as</span> <span class="title class_">CartProduct</span>[], <span class="comment">// 购物车列表</span></span><br><span class="line">      <span class="attr">checkOutStatus</span>: <span class="literal">null</span> <span class="keyword">as</span> <span class="literal">null</span> | <span class="built_in">string</span>, <span class="comment">// 是否结算成功 联合类型null或者string</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算总价格 相当于computed</span></span><br><span class="line">    <span class="title function_">totalPrice</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">      <span class="comment">// 使用this必须手动添加函数类型返回</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">carProducts</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total + item.<span class="property">price</span> * item.<span class="property">quantity</span>;</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 添加商品到购物车列表</span></span><br><span class="line">    <span class="title function_">addProductToCart</span>(<span class="params">product: IProduce</span>) &#123;</span><br><span class="line">      <span class="comment">// 1.看商品有没有库存</span></span><br><span class="line">      <span class="keyword">if</span> (product.<span class="property">inventory</span> &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">// 2.检查购物车中是否已有该商品</span></span><br><span class="line">      <span class="keyword">const</span> cartItem = <span class="variable language_">this</span>.<span class="property">carProducts</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item: <span class="built_in">any</span></span>) =&gt;</span> item.<span class="property">id</span> == product.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">if</span> (cartItem) &#123;</span><br><span class="line">        <span class="comment">// 3.如果有则让商品数量+1</span></span><br><span class="line">        cartItem.<span class="property">quantity</span>++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 4.如果没有则往购物车添加商品信息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">carProducts</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">id</span>: product.<span class="property">id</span>,</span><br><span class="line">          <span class="attr">title</span>: product.<span class="property">title</span>,</span><br><span class="line">          <span class="attr">price</span>: product.<span class="property">price</span>,</span><br><span class="line">          <span class="attr">quantity</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 5.更新商品的库存(使用商品信息pinia的实例)</span></span><br><span class="line">      <span class="keyword">const</span> mainStore = <span class="title function_">useMainStore</span>();</span><br><span class="line">      mainStore.<span class="title function_">decrementProduct</span>(product);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结算功能(buyProducts返回随机布尔值)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">checkOutAndPayment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> ret = <span class="keyword">await</span> <span class="title function_">buyProducts</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">checkOutStatus</span> = ret ? <span class="string">&quot;成功&quot;</span> : <span class="string">&quot;失败&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">carProducts</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">checkOutStatus</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pinia </category>
          
          <category> vuex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins自动化部署</title>
      <link href="/2022/01/10/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/01/10/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="自动化部署背景："><a href="#自动化部署背景：" class="headerlink" title="自动化部署背景："></a>自动化部署背景：</h2><p>基于 Jenkins 的前端自动化构建的过程，搭建完这套工作流，我们只需要在本地发起一个git提交，剩下的打包构建，代码部署等功能全部自动化完成，让持续集成、持续交付、持续部署变得简单易操作。</p><h2 id="目前个人使用的服务器："><a href="#目前个人使用的服务器：" class="headerlink" title="目前个人使用的服务器："></a>目前个人使用的服务器：</h2><p>腾讯云服务器：轻量应用服务器。</p><p>CPU: 2核 内存: 4GB 硬盘: 80GB SSD云硬盘 带宽: 8Mbps 镜像: CentOS 7.6。</p><p>服务器已经集成<code>yum源</code>，通过yum命令可以在服务器内安装依赖。</p><h2 id="服务器内安装依赖："><a href="#服务器内安装依赖：" class="headerlink" title="服务器内安装依赖："></a>服务器内安装依赖：</h2><p><strong>本地连接远程服务器：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@公网ip</span><br><span class="line"><span class="comment">// =&gt; 输入密码后回车</span></span><br></pre></td></tr></table></figure><p><strong>安装版本管理工具：Git</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br><span class="line"><span class="comment">// =&gt; 验证git是否安装</span></span><br></pre></td></tr></table></figure><p><strong>安装Node版本管理工具：nvm</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// curl方式</span></span><br><span class="line">curl -o- <span class="attr">https</span>:<span class="comment">//raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span></span><br><span class="line"><span class="comment">// wget方式</span></span><br><span class="line">wget -qO- <span class="attr">https</span>:<span class="comment">//raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span></span><br><span class="line"><span class="comment">// git方式</span></span><br><span class="line">git clone <span class="attr">git</span>:<span class="comment">//github.com/creationix/nvm.git ~/nvm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 验证nvm是否安装成功</span></span><br><span class="line">nvm --version</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 设置nvm自动运行</span></span><br><span class="line">echo <span class="string">&quot;source ~/nvm/nvm.sh&quot;</span> &gt;&gt; ~/.<span class="property">bashrc</span></span><br><span class="line">source ~/.<span class="property">bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nvm安装node版本 版本建议14.15.0即可</span></span><br><span class="line">nvm install <span class="number">14.15</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="安装Jenkins："><a href="#安装Jenkins：" class="headerlink" title="安装Jenkins："></a>安装Jenkins：</h2><p>一、安装Java JDK</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java</span><br></pre></td></tr></table></figure><p>二、添加Jenkins库到yum,Jenkins将从这里下载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.<span class="property">repos</span>.<span class="property">d</span>/jenkins.<span class="property">repo</span> <span class="attr">http</span>:<span class="comment">//pkg.jenkins-ci.org/redhat/jenkins.repo</span></span><br></pre></td></tr></table></figure><p>三、使用rpm导入Jenkins-ci.org.key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --<span class="keyword">import</span> <span class="attr">https</span>:<span class="comment">//jenkins-ci.org/redhat/jenkins-ci.org.key</span></span><br></pre></td></tr></table></figure><p>四、执行安装命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y jenkins</span><br></pre></td></tr></table></figure><p>五、如果安装失败，就到jenkins官网下载rmp包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官网地址（http://pkg.jenkins-ci.org/redhat-stable/）</span></span><br><span class="line"></span><br><span class="line">wget <span class="attr">http</span>:<span class="comment">//pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</span></span><br><span class="line">rpm -ivh jenkins-<span class="number">2.7</span><span class="number">.3</span>-<span class="number">1.1</span>.<span class="property">noarch</span>.<span class="property">rpm</span></span><br></pre></td></tr></table></figure><p>六、设置jenkin的ip端口，默认端口是8080</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/jenkins</span><br><span class="line"><span class="comment">// =&gt; 修改JENKINS_PORT=&quot;8080&quot;  此端口不冲突可以不修改 </span></span><br><span class="line"><span class="comment">// =&gt; JENKINS_USER=&quot;root&quot; 设置Jenkins的权限为服务器用户</span></span><br></pre></td></tr></table></figure><p>七、修改端口号后，需要去服务器后台设置开放端口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新规则 =&gt; 默认协议TCP =&gt; 端口设置成在jenkins里设置的一致</span></span><br></pre></td></tr></table></figure><p>八、修改后尝试启动Jenkins</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动</span></span><br><span class="line">service jenkins start</span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line">service jenkins stop</span><br><span class="line"><span class="comment">// 重启</span></span><br><span class="line">service jenkins restart</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>安装Jenkins后将作为一个进程随系统启动</li><li>启动时将从<code>etc/sysconfig/jenkins</code>获取配置参数</li><li>默认情况下，Jenkins运行在8080端口，在浏览器中直接访问公网ip+端口</li></ol><h2 id="初始化Jenkins："><a href="#初始化Jenkins：" class="headerlink" title="初始化Jenkins："></a>初始化Jenkins：</h2><p>一、首次进入Jenkins需要输入密码，界面会提示初始化密码存放处，通过命令获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /<span class="keyword">var</span>/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p>二、选择”Install suggested plugins”，安装默认插件</p><ol><li>安装完默认插件后，需要去安装Gitee插件</li><li>系统管理&#x3D;&gt;插件管理&#x3D;&gt;Gitee&#x3D;&gt;点击后自动安装</li><li>若在线安装不成功，可以尝试手动安装</li><li>从gitee官网下载</li><li>进入到Gitee具体项目里&#x3D;&gt;从release列表中下载对应的xxx.hpi文件</li><li>前往Jenkins插件管理中上传刚才下载到hpi文件</li><li>后续页面中勾选 Restart Jenkins when installation is complete and no jobs are running</li></ol><p>三、安装默认插件后需要创建超级管理员（这一步需要备份好账号密码）</p><p>四、配置全局的环境变量</p><ol><li>在服务器中通过<code>echo $PATH</code>输出当前环境变量</li><li>在jenkins中，系统管理&#x3D;&gt;全局属性&#x3D;&gt; 键：PATH 值：服务器输出的环境变量</li></ol><h2 id="Jenkins新建任务："><a href="#Jenkins新建任务：" class="headerlink" title="Jenkins新建任务："></a>Jenkins新建任务：</h2><p>一、键入任务名称，这里的名称建议和码云的代码库名称保持一致</p><p>二、选择 构建一个自由风格的软件项目</p><p>三、任务新建后进入配置项，构建处选择 执行shell</p><p>四、命令根据脚本的实际情况改写，以下作为参考</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp /data/shell/firstblood.sh $&#123;WORKSPACE&#125;/firstblood.sh</span><br><span class="line">sh firstblood.sh first-blood master N</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span>[参数][文件] 复制文件或目录:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制文件夹data下的文件夹shell下的firstblood.sh脚本到当前工作空间里</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sh 执行命令:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行firstblood.sh脚本 这里的脚本设置了3个变量 <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span></span></span><br></pre></td></tr></table></figure><p>五、构建脚本如下参考：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">projectName=$1</span><br><span class="line">branch=$2</span><br><span class="line">isInstall=$3</span><br><span class="line">serverName=&#x27;&#x27;</span><br><span class="line">projectRoot=&#x27;&#x27;</span><br><span class="line">serverRoot=&#x27;&#x27;</span><br><span class="line">currentTime=$(date &quot;+%Y%m%d%H%M%S&quot;)</span><br><span class="line"></span><br><span class="line">gitWarehouse=&quot;git@gitee.com:xxxxxx/$&#123;projectName&#125;.git&quot;</span><br><span class="line"></span><br><span class="line">echo &#x27;--------------------------------------服务器node.js版本--------------------------------------&#x27;</span><br><span class="line">node --version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断是否需要重新拉取项目并下载依赖</span></span><br><span class="line">if [ &quot;$isInstall&quot; == &#x27;Y&#x27; ]; then</span><br><span class="line">echo &#x27;--------------------------------------进行项目依赖下载--------------------------------------&#x27;</span><br><span class="line">rm -rf $projectName</span><br><span class="line">git clone $gitWarehouse</span><br><span class="line">cd $projectName</span><br><span class="line">git checkout $branch</span><br><span class="line">npm install</span><br><span class="line">else</span><br><span class="line">echo &#x27;--------------------------------------拉取代码--------------------------------------&#x27;</span><br><span class="line">cd $projectName</span><br><span class="line">git checkout $branch</span><br><span class="line">git pull</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印当前使用分支</span></span><br><span class="line">echo &#x27;--------------------------------------当前git分支--------------------------------------&#x27;</span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印最近一次的提交记录详情</span></span><br><span class="line">echo &#x27;--------------------------------------提交记录详情--------------------------------------&#x27;</span><br><span class="line">git show</span><br><span class="line"></span><br><span class="line">echo &#x27;--------------------------------------进行项目打包--------------------------------------&#x27;</span><br><span class="line">npm run build</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断是开发环境还是生产环境</span></span><br><span class="line">if [ &quot;$branch&quot; == &#x27;develop&#x27; ]; then</span><br><span class="line">projectRoot=&#x27;/data/develop/projects&#x27;</span><br><span class="line">serverName=&#x27;express-server_dev&#x27;</span><br><span class="line">elif [ &quot;$branch&quot; == &#x27;master&#x27; ]; then</span><br><span class="line">projectRoot=&#x27;/data/master/projects&#x27;</span><br><span class="line">serverName=&#x27;express-server_master&#x27;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对项目编译打包出来的东西进行压缩和移动</span></span><br><span class="line">eval &quot;tar -zcf $&#123;projectName&#125;.tar.gz ./dist/&quot; </span><br><span class="line">eval &quot;mv $&#123;projectName&#125;.tar.gz $&#123;projectRoot&#125;/$&#123;projectName&#125;.tar.gz&quot; </span><br><span class="line">cd $projectRoot</span><br><span class="line">eval &quot;tar -zcf $&#123;projectName&#125;-$&#123;currentTime&#125;.tar.gz $&#123;projectName&#125; &gt; /dev/null&quot;</span><br><span class="line">rm -rf $projectName &gt; /dev/null</span><br><span class="line">eval &quot;tar -zxf $&#123;projectName&#125;.tar.gz &gt; /dev/null&quot;</span><br><span class="line">eval &quot;mv $&#123;projectRoot&#125;/dist $&#123;projectRoot&#125;/$&#123;projectName&#125;&quot;</span><br><span class="line">eval &quot;rm $&#123;projectName&#125;.tar.gz&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 重启部署项目的中间件</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;--------------------------------------重启部署项目的中间件--------------------------------------&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pm2 restart <span class="variable">$serverName</span></span></span><br></pre></td></tr></table></figure><h2 id="Jenkins自动化构建："><a href="#Jenkins自动化构建：" class="headerlink" title="Jenkins自动化构建："></a>Jenkins自动化构建：</h2><p>一、进入全局的Gitee配置：系统管理 &#x3D;&gt; Gitee配置</p><p>二、链接名：’’Gitee”</p><p>三、Gitee域名URL：”<a href="https://gitee.com/">https://gitee.com/</a>“</p><p>四、证书令牌：Gitee API令牌</p><p>五、进入到项目配置项&#x3D;&gt;源码管理&#x3D;&gt;构建触发器&#x3D;&gt;勾选上Gitee webhook触发构建，需要在Gitee webhook中填写xxx</p><p>六、将Gitee webhook中的网址填写到码云上 项目配置里的URl</p><p>七、Gitee webhoook密码在 Jenkins设置中生成后，也填写到码云上</p><p>八、到此所有步骤完结，在码云上可以测试是否自动触发构建器。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目搭建规范</title>
      <link href="/2021/09/16/vue3-admin%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/09/16/vue3-admin%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="项目搭建规范"><a href="#项目搭建规范" class="headerlink" title="项目搭建规范"></a>项目搭建规范</h1><h2 id="一-代码规范"><a href="#一-代码规范" class="headerlink" title="一. 代码规范"></a>一. 代码规范</h2><h3 id="1-1-集成editorconfig配置"><a href="#1-1-集成editorconfig配置" class="headerlink" title="1.1. 集成editorconfig配置"></a>1.1. 集成editorconfig配置</h3><p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://editorconfig.org</span></span><br><span class="line"></span><br><span class="line"><span class="string">root</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*</span>] <span class="comment"># 表示所有文件适用</span></span><br><span class="line"><span class="string">charset</span> <span class="string">=</span> <span class="string">utf-8</span> <span class="comment"># 设置文件字符集为 utf-8</span></span><br><span class="line"><span class="string">indent_style</span> <span class="string">=</span> <span class="string">space</span> <span class="comment"># 缩进风格（tab | space）</span></span><br><span class="line"><span class="string">indent_size</span> <span class="string">=</span> <span class="number">2</span> <span class="comment"># 缩进大小</span></span><br><span class="line"><span class="string">end_of_line</span> <span class="string">=</span> <span class="string">lf</span> <span class="comment"># 控制换行类型(lf | cr | crlf)</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 去除行首的任意空白字符</span></span><br><span class="line"><span class="string">insert_final_newline</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 始终在文件末尾插入一个新行</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*.md</span>] <span class="comment"># 表示仅 md 文件适用以下规则</span></span><br><span class="line"><span class="string">max_line_length</span> <span class="string">=</span> <span class="string">off</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>VSCode需要安装一个插件：EditorConfig for VS Code</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2gh989yj30pj05ggmb.jpg" alt="image-20210722215138665"></p><h3 id="1-2-使用prettier工具"><a href="#1-2-使用prettier工具" class="headerlink" title="1.2. 使用prettier工具"></a>1.2. 使用prettier工具</h3><p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p><p>1.安装prettier</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prettier -D</span><br></pre></td></tr></table></figure><p>2.配置.prettierrc文件：</p><ul><li>useTabs：使用tab缩进还是空格缩进，选择false；</li><li>tabWidth：tab是空格的情况下，是几个空格，选择2个；</li><li>printWidth：当行字符的长度，推荐80，也有人喜欢100或者120；</li><li>singleQuote：使用单引号还是双引号，选择true，使用单引号；</li><li>trailingComma：在多行输入的尾逗号是否添加，设置为 <code>none</code>；</li><li>semi：语句末尾是否要加分号，默认值true，选择false表示不加；</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>3.创建.prettierignore忽略文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/dist/*</span><br><span class="line">.local</span><br><span class="line">.output.js</span><br><span class="line">/node_modules/**</span><br><span class="line"></span><br><span class="line">**/*.svg</span><br><span class="line">**/*.sh</span><br><span class="line"></span><br><span class="line">/public/*</span><br></pre></td></tr></table></figure><p>4.VSCode需要安装prettier的插件</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2acx21rj30ow057mxp.jpg" alt="image-20210722214543454"></p><p>5.测试prettier是否生效</p><ul><li>测试一：在代码中保存代码；</li><li>测试二：配置一次性修改的命令；</li></ul><p>在package.json中配置一个scripts：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write .&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-使用ESLint检测"><a href="#1-3-使用ESLint检测" class="headerlink" title="1.3. 使用ESLint检测"></a>1.3. 使用ESLint检测</h3><p>1.在前面创建项目的时候，我们就选择了ESLint，所以Vue会默认帮助我们配置需要的ESLint环境。</p><p>2.VSCode需要安装ESLint插件：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2oq26odj30pw05faaq.jpg" alt="image-20210722215933360"></p><p>3.解决eslint和prettier冲突的问题：</p><p>安装插件：（vue在创建项目时，如果选择prettier，那么这两个插件会自动安装）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure><p>添加prettier插件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extends<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;plugin:vue/vue3-essential&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;@vue/typescript/recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;@vue/prettier&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;@vue/prettier/@typescript-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">  &#x27;plugin<span class="punctuation">:</span>prettier/recommended&#x27;</span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="1-4-git-Husky和eslint"><a href="#1-4-git-Husky和eslint" class="headerlink" title="1.4. git Husky和eslint"></a>1.4. git Husky和eslint</h3><p>虽然我们已经要求项目使用eslint了，但是不能保证组员提交代码之前都将eslint中的问题解决掉了：</p><ul><li><p>也就是我们希望保证代码仓库中的代码都是符合eslint规范的；</p></li><li><p>那么我们需要在组员执行 <code>git commit </code> 命令的时候对其进行校验，如果不符合eslint规范，那么自动通过规范进行修复；</p></li></ul><p>那么如何做到这一点呢？可以通过Husky工具：</p><ul><li>husky是一个git hook工具，可以帮助我们触发git提交的各个阶段：pre-commit、commit-msg、pre-push</li></ul><p>如何使用husky呢？</p><p>这里我们可以使用自动配置命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky-init &amp;&amp; npm install</span><br></pre></td></tr></table></figure><p>这里会做三件事：</p><p>1.安装husky相关的依赖：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq0o5jxmj30bb04qwen.jpg" alt="image-20210723112648927"></p><p>2.在项目目录下创建 <code>.husky</code> 文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx huksy install</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq16zo75j307703mt8m.jpg" alt="image-20210723112719634"></p><p>3.在package.json中添加一个脚本：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq26phpxj30dj06fgm3.jpg" alt="image-20210723112817691"></p><p>接下来，我们需要去完成一个操作：在进行commit时，执行lint脚本：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq3hn229j30nf04z74q.jpg" alt="image-20210723112932943"></p><p>这个时候我们执行git commit的时候会自动对代码进行lint校验。</p><h3 id="1-5-git-commit规范"><a href="#1-5-git-commit规范" class="headerlink" title="1.5. git commit规范"></a>1.5. git commit规范</h3><h4 id="1-5-1-代码提交风格"><a href="#1-5-1-代码提交风格" class="headerlink" title="1.5.1. 代码提交风格"></a>1.5.1. 代码提交风格</h4><p>通常我们的git commit会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw17gaqjj30to0cj3zp.jpg"></p><p>但是如果每次手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen</p><ul><li>Commitizen 是一个帮助我们编写规范 commit message 的工具；</li></ul><p>1.安装Commitizen</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commitizen -D</span><br></pre></td></tr></table></figure><p>2.安装cz-conventional-changelog，并且初始化cz-conventional-changelog：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure><p>这个命令会帮助我们安装cz-conventional-changelog：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqvz2odi4j30ek00zmx2.jpg" alt="image-20210723145249096"></p><p>并且在package.json中进行配置：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqvzftay5j30iu04k74d.jpg"></p><p>这个时候我们提交代码需要使用 <code>npx cz</code>：</p><ul><li>第一步是选择type，本次更新的类型</li></ul><table><thead><tr><th>Type</th><th>作用</th></tr></thead><tbody><tr><td>feat</td><td>新增特性 (feature)</td></tr><tr><td>fix</td><td>修复 Bug(bug fix)</td></tr><tr><td>docs</td><td>修改文档 (documentation)</td></tr><tr><td>style</td><td>代码格式修改(white-space, formatting, missing semi colons, etc)</td></tr><tr><td>refactor</td><td>代码重构(refactor)</td></tr><tr><td>perf</td><td>改善性能(A code change that improves performance)</td></tr><tr><td>test</td><td>测试(when adding missing tests)</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具(比如更改测试环境)</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><ul><li>第二步选择本次修改的范围（作用域）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8ca15oj30r600wmx4.jpg" alt="image-20210723150147510"></p><ul><li>第三步选择提交的信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8mq3zlj60ni01hmx402.jpg" alt="image-20210723150204780"></p><ul><li>第四步提交详细的描述信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8y05bjj30kt01fjrb.jpg" alt="image-20210723150223287"></p><ul><li>第五步是否是一次重大的更改</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw9z5vbij30bm00q744.jpg" alt="image-20210723150322122"></p><ul><li>第六步是否影响某个open issue</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqwar8xp1j30fq00ya9x.jpg" alt="image-20210723150407822"></p><p>我们也可以在scripts中构建一个命令来执行 cz：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqwc4gtkxj30e207174t.jpg" alt="image-20210723150526211"></p><h4 id="1-5-2-代码提交验证"><a href="#1-5-2-代码提交验证" class="headerlink" title="1.5.2. 代码提交验证"></a>1.5.2. 代码提交验证</h4><p>如果我们按照cz来规范了提交风格，但是依然有同事通过 <code>git commit</code> 按照不规范的格式提交应该怎么办呢？</p><ul><li>我们可以通过commitlint来限制提交；</li></ul><p>1.安装 @commitlint&#x2F;config-conventional 和 @commitlint&#x2F;cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @commitlint/config-conventional @commitlint/cli -D</span><br></pre></td></tr></table></figure><p>2.在根目录创建commitlint.config.js文件，配置commitlint</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用husky生成commit-msg文件，验证提交信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/commit-msg &quot;npx --no-install commitlint --edit $1&quot;</span><br></pre></td></tr></table></figure><h2 id="二-第三方库集成"><a href="#二-第三方库集成" class="headerlink" title="二. 第三方库集成"></a>二. 第三方库集成</h2><h3 id="2-1-vue-config-js配置"><a href="#2-1-vue-config-js配置" class="headerlink" title="2.1. vue.config.js配置"></a>2.1. vue.config.js配置</h3><p>vue.config.js有三种配置方式：</p><ul><li>方式一：直接通过CLI提供给我们的选项来配置：<ul><li>比如publicPath：配置应用程序部署的子目录（默认是 <code>/</code>，相当于部署在 <code>https://www.my-app.com/</code>）；</li><li>比如outputDir：修改输出的文件夹；</li></ul></li><li>方式二：通过configureWebpack修改webpack的配置：<ul><li>可以是一个对象，直接会被合并；</li><li>可以是一个函数，会接收一个config，可以通过config来修改配置；</li></ul></li><li>方式三：通过chainWebpack修改webpack的配置：<ul><li>是一个函数，会接收一个基于  <a href="https://github.com/mozilla-neutrino/webpack-chain">webpack-chain</a> 的config对象，可以对配置进行修改；</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;./build&#x27;</span>,</span><br><span class="line">  <span class="comment">// configureWebpack: &#123;</span></span><br><span class="line">  <span class="comment">//   resolve: &#123;</span></span><br><span class="line">  <span class="comment">//     alias: &#123;</span></span><br><span class="line">  <span class="comment">//       views: &#x27;@/views&#x27;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// configureWebpack: (config) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   config.resolve.alias = &#123;</span></span><br><span class="line">  <span class="comment">//     &#x27;@&#x27;: path.resolve(__dirname, &#x27;src&#x27;),</span></span><br><span class="line">  <span class="comment">//     views: &#x27;@/views&#x27;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">resolve</span>.<span class="property">alias</span>.<span class="title function_">set</span>(<span class="string">&#x27;@&#x27;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)).<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;@/views&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-vue-router集成"><a href="#2-2-vue-router集成" class="headerlink" title="2.2. vue-router集成"></a>2.2. vue-router集成</h3><p>安装vue-router的最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@next</span><br></pre></td></tr></table></figure><p>创建router对象：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteRecordRaw</span>[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/main/main.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/login/login.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>安装router：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在App.vue中配置跳转：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-vuex集成"><a href="#2-3-vuex集成" class="headerlink" title="2.3. vuex集成"></a>2.3. vuex集成</h3><p>安装vuex：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex@next</span><br></pre></td></tr></table></figure><p>创建store对象：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;coderwhy&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>安装store：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(store).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在App.vue中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; $store.state.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-element-plus集成"><a href="#2-4-element-plus集成" class="headerlink" title="2.4. element-plus集成"></a>2.4. element-plus集成</h3><p>Element Plus，一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库：</p><ul><li>相信很多同学在Vue2中都使用过element-ui，而element-plus正是element-ui针对于vue3开发的一个UI组件库；</li><li>它的使用方式和很多其他的组件库是一样的，所以学会element-plus，其他类似于ant-design-vue、NaiveUI、VantUI都是差不多的；</li></ul><p>安装element-plus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><h4 id="2-4-1-全局引入"><a href="#2-4-1-全局引入" class="headerlink" title="2.4.1. 全局引入"></a>2.4.1. 全局引入</h4><p>一种引入element-plus的方式是全局引入，代表的含义是所有的组件和插件都会被自动注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(store).<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-4-2-局部引入"><a href="#2-4-2-局部引入" class="headerlink" title="2.4.2. 局部引入"></a>2.4.2. 局部引入</h4><p>也就是在开发中用到某个组件对某个组件进行引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/main&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;&#123;&#123; $store.state.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">import &#123; ElButton &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElButton</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>但是我们会发现是没有对应的样式的，引入样式有两种方式：</p><ul><li>全局引用样式（像之前做的那样）；</li><li>局部引用样式（通过babel的插件）；</li></ul><p>1.安装babel的插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import -D</span><br></pre></td></tr></table></figure><p>2.配置babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">libraryName</span>: <span class="string">&#x27;element-plus&#x27;</span>,</span><br><span class="line">        <span class="attr">customStyleName</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`element-plus/lib/theme-chalk/<span class="subst">$&#123;name&#125;</span>.css`</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里依然有个弊端：</p><ul><li>这些组件我们在多个页面或者组件中使用的时候，都需要导入并且在components中进行注册；</li><li>所以我们可以将它们在全局注册一次；</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">ElButton</span>,</span><br><span class="line">  <span class="title class_">ElTable</span>,</span><br><span class="line">  <span class="title class_">ElAlert</span>,</span><br><span class="line">  <span class="title class_">ElAside</span>,</span><br><span class="line">  <span class="title class_">ElAutocomplete</span>,</span><br><span class="line">  <span class="title class_">ElAvatar</span>,</span><br><span class="line">  <span class="title class_">ElBacktop</span>,</span><br><span class="line">  <span class="title class_">ElBadge</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  <span class="title class_">ElButton</span>,</span><br><span class="line">  <span class="title class_">ElTable</span>,</span><br><span class="line">  <span class="title class_">ElAlert</span>,</span><br><span class="line">  <span class="title class_">ElAside</span>,</span><br><span class="line">  <span class="title class_">ElAutocomplete</span>,</span><br><span class="line">  <span class="title class_">ElAvatar</span>,</span><br><span class="line">  <span class="title class_">ElBacktop</span>,</span><br><span class="line">  <span class="title class_">ElBadge</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> cpn <span class="keyword">of</span> components) &#123;</span><br><span class="line">  app.<span class="title function_">component</span>(cpn.<span class="property">name</span>, cpn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-axios集成"><a href="#2-5-axios集成" class="headerlink" title="2.5. axios集成"></a>2.5. axios集成</h3><p>安装axios：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>封装axios：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Result</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;/@/store/modules/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HYRequest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">instance</span>: <span class="title class_">AxiosInstance</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">options</span>: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options: AxiosRequestConfig</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span> = axios.<span class="title function_">create</span>(options)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> token = <span class="title function_">useUserStore</span>().<span class="property">getToken</span></span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">          config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 拦截响应的数据</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">instance</span></span><br><span class="line">        .<span class="property">request</span>&lt;<span class="built_in">any</span>, <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">Result</span>&lt;T&gt;&gt;&gt;(config)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>((res <span class="keyword">as</span> <span class="built_in">unknown</span>) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;T&gt;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123; ...config, <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  post&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123; ...config, <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  patch&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123; ...config, <span class="attr">method</span>: <span class="string">&#x27;PATCH&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123; ...config, <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HYRequest</span></span><br></pre></td></tr></table></figure><h3 id="2-6-VSCode配置"><a href="#2-6-VSCode配置" class="headerlink" title="2.6. VSCode配置"></a>2.6. VSCode配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-great-icons&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.migration.2_x&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;afterDelay&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.renderWhitespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;strings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debug.console.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;window.zoomLevel&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascriptreact&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workbench.tree.indent&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path-intellisense.mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/src&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hediet.vscode-drawio.local-storage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyIuZHJhd2lvLWNvbmZpZyI6IntcImxhbmd1YWdlXCI6XCJcIixcImN1c3RvbUZvbnRzXCI6W10sXCJsaWJyYXJpZXNcIjpcImdlbmVyYWw7YmFzaWM7YXJyb3dzMjtmbG93Y2hhcnQ7ZXI7c2l0ZW1hcDt1bWw7YnBtbjt3ZWJpY29uc1wiLFwiY3VzdG9tTGlicmFyaWVzXCI6W1wiTC5zY3JhdGNocGFkXCJdLFwicGx1Z2luc1wiOltdLFwicmVjZW50Q29sb3JzXCI6W1wiRkYwMDAwXCIsXCIwMENDNjZcIixcIm5vbmVcIixcIkNDRTVGRlwiLFwiNTI1MjUyXCIsXCJGRjMzMzNcIixcIjMzMzMzM1wiLFwiMzMwMDAwXCIsXCIwMENDQ0NcIixcIkZGNjZCM1wiLFwiRkZGRkZGMDBcIl0sXCJmb3JtYXRXaWR0aFwiOjI0MCxcImNyZWF0ZVRhcmdldFwiOmZhbHNlLFwicGFnZUZvcm1hdFwiOntcInhcIjowLFwieVwiOjAsXCJ3aWR0aFwiOjExNjksXCJoZWlnaHRcIjoxNjU0fSxcInNlYXJjaFwiOnRydWUsXCJzaG93U3RhcnRTY3JlZW5cIjp0cnVlLFwiZ3JpZENvbG9yXCI6XCIjZDBkMGQwXCIsXCJkYXJrR3JpZENvbG9yXCI6XCIjNmU2ZTZlXCIsXCJhdXRvc2F2ZVwiOnRydWUsXCJyZXNpemVJbWFnZXNcIjpudWxsLFwib3BlbkNvdW50ZXJcIjowLFwidmVyc2lvblwiOjE4LFwidW5pdFwiOjEsXCJpc1J1bGVyT25cIjpmYWxzZSxcInVpXCI6XCJcIn0ifQ==&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hediet.vscode-drawio.theme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kennedy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Source Code Pro, &#x27;Courier New&#x27;, monospace&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Atom One Dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vetur.completion.autoImport&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;security.workspace.trust.untrustedFiles&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.lintTask.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="三-接口文档"><a href="#三-接口文档" class="headerlink" title="三. 接口文档"></a>三. 接口文档</h2><p><a href="https://documenter.getpostman.com/view/12387168/TzsfmQvw">https://documenter.getpostman.com/view/12387168/TzsfmQvw</a></p><p>baseURL的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://152.136.185.210:5000</span><br></pre></td></tr></table></figure><p>设置全局token的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = pm.<span class="property">response</span>.<span class="title function_">json</span>();</span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>, res.<span class="property">data</span>.<span class="property">token</span>);</span><br></pre></td></tr></table></figure><p>接口文档v2版本：（有部分更新）</p><p><a href="https://documenter.getpostman.com/view/12387168/TzzDKb12">https://documenter.getpostman.com/view/12387168/TzzDKb12</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 项目搭建规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window下右键cmd终端菜单</title>
      <link href="/2021/09/16/window%E7%B3%BB%E7%BB%9F%E5%8F%B3%E9%94%AEcmd%E7%BB%88%E7%AB%AF%E8%8F%9C%E5%8D%95/"/>
      <url>/2021/09/16/window%E7%B3%BB%E7%BB%9F%E5%8F%B3%E9%94%AEcmd%E7%BB%88%E7%AB%AF%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>桌面新建记事本文件，添加以下文字，将后缀改为 .reg 双击运行即可。</p></div><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">[HKEY<span class="built_in">_</span>CLASSES<span class="built_in">_</span>ROOT<span class="keyword">\Directory</span><span class="keyword">\shell</span><span class="keyword">\OpenCmdHere</span>]</span><br><span class="line">@=&quot;cmd&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY<span class="built_in">_</span>CLASSES<span class="built_in">_</span>ROOT<span class="keyword">\Directory</span><span class="keyword">\shell</span><span class="keyword">\OpenCmdHere</span><span class="keyword">\command</span>]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd &quot;<span class="comment">%V&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">[HKEY<span class="built_in">_</span>CLASSES<span class="built_in">_</span>ROOT<span class="keyword">\Directory</span><span class="keyword">\Background</span><span class="keyword">\shell</span><span class="keyword">\OpenCmdHere</span>]</span><br><span class="line">@=&quot;cmd&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY<span class="built_in">_</span>CLASSES<span class="built_in">_</span>ROOT<span class="keyword">\Directory</span><span class="keyword">\Background</span><span class="keyword">\shell</span><span class="keyword">\OpenCmdHere</span><span class="keyword">\command</span>]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd <span class="keyword">\&quot;</span><span class="comment">%V\&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">[HKEY<span class="built_in">_</span>CLASSES<span class="built_in">_</span>ROOT<span class="keyword">\Drive</span><span class="keyword">\shell</span><span class="keyword">\OpenCmdHere</span>]</span><br><span class="line">@=&quot;cmd&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY<span class="built_in">_</span>CLASSES<span class="built_in">_</span>ROOT<span class="keyword">\Drive</span><span class="keyword">\shell</span><span class="keyword">\OpenCmdHere</span><span class="keyword">\command</span>]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd <span class="keyword">\&quot;</span><span class="comment">%V\&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">[HKEY<span class="built_in">_</span>CLASSES<span class="built_in">_</span>ROOT<span class="keyword">\LibraryFolder</span><span class="keyword">\background</span><span class="keyword">\shell</span><span class="keyword">\OpenCmdHere</span>]</span><br><span class="line">@=&quot;cmd&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY<span class="built_in">_</span>CLASSES<span class="built_in">_</span>ROOT<span class="keyword">\LibraryFolder</span><span class="keyword">\background</span><span class="keyword">\shell</span><span class="keyword">\OpenCmdHere</span><span class="keyword">\command</span>]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd <span class="keyword">\&quot;</span><span class="comment">%V\&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> window </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 右键cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly标签外挂</title>
      <link href="/2021/08/17/Butterfly%E6%A0%87%E7%AD%BE/"/>
      <url>/2021/08/17/Butterfly%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><div class="note primary no-icon flat"><p>预设选择第一个</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">% tabs test1 %&#125;</span></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;<span class="comment">% endtabs %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半</p><p>而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分</p><p>此誠<mark class="hl-label red">危急存亡之秋</mark> 也！</p><mark class="hl-label purple">忠志之士</mark> ，忘身於外者<p>若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;<span class="comment">% label 先帝 %&#125;創業未半，</span></span><br><span class="line">而&#123;<span class="comment">% label 中道崩殂 blue %&#125;。今天下三分，</span></span><br><span class="line">&#123;<span class="comment">% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！</span></span><br><span class="line">&#123;<span class="comment">% label 忠志之士 purple %&#125;，忘身於外者，</span></span><br><span class="line">若有&#123;<span class="comment">% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司</span></span><br></pre></td></tr></table></figure><h2 id="Img"><a href="#Img" class="headerlink" title="Img"></a>Img</h2><p>你看我長得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png"></p><p>我覺得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"/></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你看我長得漂亮不</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png)</span><br><span class="line"></span><br><span class="line">我覺得很漂亮 &#123;<span class="comment">% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Tab-hide"><a href="#Tab-hide" class="headerlink" title="Tab-hide"></a>Tab-hide</h2><details class="toggle" ><summary class="toggle-button" style="">Butterfly安裝方法</summary><div class="toggle-content"><p>在你的博客根目錄裏</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p><p>如果想要安裝比較新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p></div></details><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">% hideToggle Butterfly安裝方法 %&#125;</span></span><br><span class="line">在你的博客根目錄裏</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安裝比較新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% endhideToggle %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Note标签"><a href="#Note标签" class="headerlink" title="Note标签"></a>Note标签</h2><div class="note primary no-icon flat"><p>primary 提示块标籤</p></div><div class="note success no-icon flat"><p>success 提示块标籤</p></div><div class="note info no-icon flat"><p>info 提示块标籤</p></div><div class="note warning no-icon flat"><p>warning 提示块标籤</p></div><div class="note danger no-icon flat"><p>danger 提示块标籤</p></div><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">% note primary no-icon %&#125;</span></span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note success no-icon %&#125;</span></span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note info no-icon %&#125;</span></span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note warning no-icon %&#125;</span></span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note danger no-icon %&#125;</span></span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="simple标签"><a href="#simple标签" class="headerlink" title="simple标签"></a>simple标签</h2><div class="note primary flat"><p>primary 提示块标籤</p></div><div class="note success flat"><p>success 提示块标籤</p></div><div class="note info flat"><p>info 提示块标籤</p></div><div class="note warning flat"><p>warning 提示块标籤</p></div><div class="note danger flat"><p>danger 提示块标籤</p></div><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">% note primary flat %&#125;</span></span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note success flat %&#125;</span></span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note info flat %&#125;</span></span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note warning flat %&#125;</span></span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note danger flat %&#125;</span></span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="自定义图标"><a href="#自定义图标" class="headerlink" title="自定义图标"></a>自定义图标</h2><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span></span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line">&#123;<span class="comment">% note red &#x27;fas fa-fan&#x27; flat%&#125;</span></span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line">&#123;<span class="comment">% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span></span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line">&#123;<span class="comment">% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span></span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line">&#123;<span class="comment">% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span></span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="flat样式"><a href="#flat样式" class="headerlink" title="flat样式"></a>flat样式</h2><div class="note primary flat"><p>primary 提示块标籤</p></div><div class="note success flat"><p>success 提示块标籤</p></div><div class="note info flat"><p>info 提示块标籤</p></div><div class="note warning flat"><p>warning 提示块标籤</p></div><div class="note danger flat"><p>danger 提示块标籤</p></div><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">% note primary flat %&#125;</span></span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note success flat %&#125;</span></span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note info flat %&#125;</span></span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note warning flat %&#125;</span></span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">% note danger flat %&#125;</span></span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;<span class="comment">% endnote %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="disabled样式"><a href="#disabled样式" class="headerlink" title="disabled样式"></a>disabled样式</h2><div class="note primary disabled"><p>primary 提示块标籤</p></div><div class="note success disabled"><p>success 提示块标籤</p></div><div class="note info disabled"><p>info 提示块标籤</p></div><div class="note warning disabled"><p>warning 提示块标籤</p></div><div class="note danger disabled"><p>danger 提示块标籤</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note primary disabled %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签外挂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内置对象及方法（常用）</title>
      <link href="/2021/08/17/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%8F%8A%E6%96%B9%E6%B3%95/"/>
      <url>/2021/08/17/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%8F%8A%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p>将字符串以指定字符分割成数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myData = <span class="string">&quot;Manchester,London,Liverpool&quot;</span>;</span><br><span class="line">myData.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>); <span class="comment">// [&#x27;Manchester&#x27;,&#x27;London&#x27;,&#x27;Liverpool&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>将数组项以指定字符转换成字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dogNames = [<span class="string">&quot;Rocket&quot;</span>, <span class="string">&quot;Flash&quot;</span>, <span class="string">&quot;Bella&quot;</span>, <span class="string">&quot;Slugger&quot;</span>];</span><br><span class="line">dogNames.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>); <span class="comment">// Rocket-Flash-Bella-Slugger</span></span><br></pre></td></tr></table></figure><h2 id="末尾删除-末尾添加"><a href="#末尾删除-末尾添加" class="headerlink" title="末尾删除&amp;末尾添加"></a>末尾删除&amp;<strong>末尾添加</strong></h2><p>添加：push()，返回数组的新长度</p><p>删除：pop()，返回删除项</p><h2 id="起始删除-起始添加"><a href="#起始删除-起始添加" class="headerlink" title="起始删除&amp;起始添加"></a>起始删除&amp;起始添加</h2><p>添加：unshift()，返回数组的长度</p><p>删除：shift()，返回删除项</p><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p><strong>splice（从哪里开始删除,总共删除多少个,使用哪些新元素进行替换）用于插入、删除、替换数组的元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;王雷&quot;</span>, <span class="string">&quot;朱振义&quot;</span>, <span class="string">&quot;林北&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">0</span>, <span class="string">&quot;data1&quot;</span>, <span class="string">&quot;data2&quot;</span>);</span><br><span class="line"><span class="comment">// [1,2,3,&quot;data1&quot;,&quot;data2&quot;,&quot;王雷&quot;,&quot;朱振义&quot;,&quot;林北&quot;]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 删除，返回删除的那一项  [&quot;王雷&quot;]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="string">&quot;机车&quot;</span>);</span><br><span class="line"><span class="comment">// 替换，替换掉了数组中索引3的元素  [1, 2, 3, &quot;机车&quot;, &quot;朱振义&quot;, &quot;林北&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>slice（开始位置，结束位置）截取数组部分,返回新数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;George&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Thomas&quot;</span>, <span class="string">&quot;James&quot;</span>, <span class="string">&quot;Adrew&quot;</span>, <span class="string">&quot;Martin&quot;</span>];</span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//返回[&quot;George&quot;, &quot;John&quot;]  返回索引0-2之间的元素 不包含索引2那一项</span></span><br></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p><strong>includes()判断一个数组是否包含一个指定的值,返回布尔值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;bat&quot;</span>];</span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&quot;cat&quot;</span>); <span class="comment">//true</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&quot;at&quot;</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p><strong>every（）测试一个数组内部所有元素是否都能通过条件,返回布尔值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">13</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">item</span>) =&gt; item &lt; <span class="number">40</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">every</span>(fn)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p><strong>some（）测试数组中至少有一个元素能通过条件,返回布尔值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">13</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">item</span>) =&gt; item &gt; <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">every</span>(fn)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><strong>find（）返回数组中满足提供的函数的第一个元素的值,否则返回 undefined</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> found = array1.<span class="title function_">find</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><p><strong>findIndex（）找到第一个满足函数元素并返回那个元素的索引，若没有返回-1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> found = array1.<span class="title function_">find</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p><strong>filter 遍历数组,把数组中的满足条件的元素筛选出来,返回新数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> 条件;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回新数组,数组的项是经过检查后符合条件的元素(主要用于筛选数组)</span></span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><strong>map 遍历数组，把某个结果作为返回的数组中的某一个,返回新数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">e, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> 你希望放到数组里面的元素;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回新数组,数组里面的项是经过函数体处理后的值</span></span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p><strong>reduce（）数组中的每个元素执行一个由您提供的 reducer 函数(升序执行),将其结果汇总为单个返回值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">reducer接收<span class="number">4</span>个参数</span><br><span class="line">accumulator  累计器 currentValue 当前值 currentIndex 当前索引 array 数组</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, currentValue, currentIndex, array</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;); <span class="comment">// 10</span></span><br><span class="line">以上的写法可以化简为以下:</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,curr</span>)=&gt;</span>prev+curr) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果打算提供一个初始值作为reduce方法的第二个参数:</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,curr</span>)=&gt;</span>prev+curr,<span class="number">10</span>)<span class="comment">// 20</span></span><br><span class="line">运行步骤如下:</span><br></pre></td></tr></table></figure><p><strong>利用 reduce 累加数组对象的值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = [&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;].<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + curr.<span class="property">x</span>;</span><br><span class="line">&#125;, initValue);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(initValue); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><strong>将二维数组转换为一维数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flat = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">].<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev.<span class="title function_">concat</span>(curr);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p><strong>计算数组中每个元素出现的次数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  <span class="string">&quot;机车&quot;</span>,</span><br><span class="line">  <span class="string">&quot;王雷&quot;</span>,</span><br><span class="line">  <span class="string">&quot;朱振忆&quot;</span>,</span><br><span class="line">  <span class="string">&quot;王雷&quot;</span>,</span><br><span class="line">  <span class="string">&quot;朱振忆&quot;</span>,</span><br><span class="line">  <span class="string">&quot;王雷&quot;</span>,</span><br><span class="line">  <span class="string">&quot;朱振忆&quot;</span>,</span><br><span class="line">  <span class="string">&quot;机车&quot;</span>,</span><br><span class="line">  <span class="string">&quot;机车&quot;</span>,</span><br><span class="line">  <span class="string">&quot;机车&quot;</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  <span class="number">5</span>,</span><br><span class="line">  <span class="number">36</span>,</span><br><span class="line">  <span class="number">34</span>,</span><br><span class="line">  <span class="number">234</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">5</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> count = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (curr <span class="keyword">in</span> prev) &#123;</span><br><span class="line">    prev[curr]++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    prev[curr] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line"><span class="comment">// &#123;2: 8 3: 3 4: 1 5: 2 34: 1 36: 1 234: 1 朱振忆: 3 机车: 4 王雷: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><p>数组降维操作，将多个嵌套数组进行扁平化</p><details class="toggle" ><summary class="toggle-button" style="">扁平化嵌套数组</summary><div class="toggle-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, [<span class="string">&quot;Aa&quot;</span>]]].<span class="title function_">flat</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, [ &#x27;Aa&#x27; ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, [<span class="string">&quot;Aa&quot;</span>]]].<span class="title function_">flat</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [ 1,    2,   3, &#x27;a&#x27;,  &#x27;b&#x27;, &#x27;c&#x27;, &#x27;Aa&#x27; ]</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">通过Infinity扁平化任意深度</summary><div class="toggle-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, [<span class="string">&quot;Aa&quot;</span>, [<span class="string">&quot;abc&quot;</span>, [<span class="string">&quot;666&quot;</span>]]]]].<span class="title function_">flat</span>(<span class="title class_">Infinity</span>);</span><br><span class="line"><span class="comment">// [ 1,    2,     3, &#x27;a&#x27;,  &#x27;b&#x27;,   &#x27;c&#x27;, &#x27;Aa&#x27;, &#x27;abc&#x27;, &#x27;666&#x27; ]</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">扁平化空项</summary><div class="toggle-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">false</span>, , , <span class="string">&quot;666&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>].<span class="title function_">flat</span>();</span><br><span class="line"><span class="comment">// [ 1,2,3, false, &#x27;666&#x27;, &#x27;a&#x27;, &#x27;A&#x27; ]</span></span><br></pre></td></tr></table></figure></div></details><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>使用映射函数映射每个元素,然后将其展平为新数组，等效于<code>arr.map().flat()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> n1 = arr1.<span class="title function_">flatMap</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x ** <span class="number">2</span>]); <span class="comment">// [1, 4, 9, 16, 25]</span></span><br><span class="line"><span class="keyword">const</span> n2 = arr1.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x ** <span class="number">2</span>]); <span class="comment">// [[1],[4],[9],[16],[25]]</span></span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">将对象数组中的某个字段，扁平化处理后形成新的数组</summary><div class="toggle-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123; <span class="attr">itemKey</span>: <span class="string">&quot;a&quot;</span>, <span class="attr">text</span>: <span class="string">&quot;a&quot;</span>, <span class="attr">items</span>: [] &#125;,</span><br><span class="line">  &#123; <span class="attr">itemKey</span>: <span class="string">&quot;b&quot;</span>, <span class="attr">text</span>: <span class="string">&quot;b&quot;</span>, <span class="attr">items</span>: [] &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">itemKey</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">      &#123; <span class="attr">itemKey</span>: <span class="string">&quot;c1&quot;</span>, <span class="attr">text</span>: <span class="string">&quot;c1&quot;</span>, <span class="attr">items</span>: [] &#125;,</span><br><span class="line">      &#123; <span class="attr">itemKey</span>: <span class="string">&quot;c2&quot;</span>, <span class="attr">text</span>: <span class="string">&quot;c2&quot;</span>, <span class="attr">items</span>: [] &#125;,</span><br><span class="line">      &#123; <span class="attr">itemKey</span>: <span class="string">&quot;c3&quot;</span>, <span class="attr">text</span>: <span class="string">&quot;c3&quot;</span>, <span class="attr">items</span>: [] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keyMaps = arr.<span class="title function_">flatMap</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> [</span><br><span class="line">  item.<span class="property">itemKey</span>,</span><br><span class="line">  ...item.<span class="property">items</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">subItem</span>) =&gt;</span> subItem.<span class="property">itemKey</span>),</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// =&gt; [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;c1&#x27;, &#x27;c2&#x27;, &#x27;c3&#x27;]</span></span><br></pre></td></tr></table></figure></div></details><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><p>查找子字符串，返回第一次出现指定值的索引，未找到则返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fullName = <span class="string">`zhongweidong`</span>;</span><br><span class="line"></span><br><span class="line">fullName.<span class="title function_">indexOf</span>(<span class="string">`on`</span>); <span class="comment">// 2</span></span><br><span class="line">fullName.<span class="title function_">indexOf</span>(<span class="string">`ww`</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>空格也可以当做子字符串来截取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">`zhong weidong`</span>;</span><br><span class="line">text.<span class="title function_">indexOf</span>(<span class="string">&quot; &quot;</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>截取字符串中的值，slice(起始位置，结束位置&lt;可选&gt;)，若没有传入结束位置，会返回剩余字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fullName = <span class="string">`zhongweidong`</span>;</span><br><span class="line"></span><br><span class="line">fullName.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// zhong</span></span><br><span class="line">fullName.<span class="title function_">slice</span>(<span class="number">5</span>); <span class="comment">// weidong</span></span><br><span class="line">fullName.<span class="title function_">slice</span>(<span class="number">200</span>); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="转换大小写"><a href="#转换大小写" class="headerlink" title="转换大小写"></a>转换大小写</h2><p>转大写：toUpperCase()</p><p>转小写：toLowerCase()</p><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>替换字符串的某部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fullName = <span class="string">&quot;zhongweidong&quot;</span>;</span><br><span class="line">fullName = fullName.<span class="title function_">replace</span>(<span class="string">&quot;zhong&quot;</span>, <span class="string">&quot;zz&quot;</span>); <span class="comment">// zzweidong</span></span><br></pre></td></tr></table></figure><h2 id="includes-1"><a href="#includes-1" class="headerlink" title="includes"></a>includes</h2><p>判断一个字符串是否包含在另一个字符串中 返回布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Blue White&quot;</span>.<span class="title function_">includes</span>(<span class="string">&quot;blue&quot;</span>); <span class="comment">// return false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;To be, or not to be, that is the question.&quot;</span>;</span><br><span class="line">str.<span class="title function_">include</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// return true</span></span><br><span class="line">str.<span class="title function_">include</span>(<span class="string">&quot;m&quot;</span>); <span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h2 id="endWith"><a href="#endWith" class="headerlink" title="endWith"></a>endWith</h2><p>判断当前字符串是否以另外一个给定的子字符串结尾的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exmple = <span class="string">&quot;Cats are the best&quot;</span>;</span><br><span class="line">exmple.<span class="title function_">endsWith</span>(<span class="string">&quot;best&quot;</span>); <span class="comment">// return true</span></span><br><span class="line">exmple.<span class="title function_">endsWith</span>(<span class="string">&quot;?&quot;</span>); <span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="获取范围内随机数字-0-1"><a href="#获取范围内随机数字-0-1" class="headerlink" title="获取范围内随机数字[0,1)"></a>获取范围内随机数字[0,1)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"><span class="comment">// 返回值是一个随机的[0~1)小数</span></span><br></pre></td></tr></table></figure><h2 id="数字四舍五入"><a href="#数字四舍五入" class="headerlink" title="数字四舍五入"></a>数字四舍五入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">3.3</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">3.6</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="数字向上取整"><a href="#数字向上取整" class="headerlink" title="数字向上取整"></a>数字向上取整</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">5.1</span>); <span class="comment">// -5</span></span><br></pre></td></tr></table></figure><h2 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">3.33</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="绝对值"><a href="#绝对值" class="headerlink" title="绝对值"></a>绝对值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">7.25</span>); <span class="comment">// 7.25</span></span><br></pre></td></tr></table></figure><h1 id="常用工具类方法"><a href="#常用工具类方法" class="headerlink" title="常用工具类方法"></a>常用工具类方法</h1><h2 id="格式化金额"><a href="#格式化金额" class="headerlink" title="格式化金额"></a>格式化金额</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> digitsRE = <span class="regexp">/(\d&#123;3&#125;)(?=\d)/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatMoney</span>(<span class="params">value, currency = <span class="string">&#x27;元&#x27;</span>, decimals = <span class="number">2</span></span>) =&gt; &#123;</span><br><span class="line">  value = <span class="built_in">parseFloat</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (!value &amp;&amp; value !== <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> stringified = <span class="title class_">Math</span>.<span class="title function_">abs</span>(value).<span class="title function_">toFixed</span>(decimals);</span><br><span class="line">  <span class="keyword">const</span> $int = decimals ? stringified.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span> - decimals) : stringified;</span><br><span class="line">  <span class="keyword">const</span> i = $int.<span class="property">length</span> % <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> head = i &gt; <span class="number">0</span> ? ($int.<span class="title function_">slice</span>(<span class="number">0</span>, i) + ($int.<span class="property">length</span> &gt; <span class="number">3</span> ? <span class="string">&#x27;,&#x27;</span> : <span class="string">&#x27;&#x27;</span>)) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> $float = decimals ? stringified.<span class="title function_">slice</span>(-<span class="number">1</span> - decimals) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> sign = value &lt; <span class="number">0</span> ? <span class="string">&#x27;-&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;sign&#125;</span><span class="subst">$&#123;head&#125;</span><span class="subst">$&#123;$int.slice(i).replace(digitsRE, <span class="string">&#x27;$1,&#x27;</span>)&#125;</span><span class="subst">$&#123;$float&#125;</span> <span class="subst">$&#123;currency&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac一些开发环境搭建</title>
      <link href="/2021/04/10/Mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/04/10/Mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>cnpm</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cnpm --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org --verbose</span></span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>yarn</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>Homebrew</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;$(curl -fsSL https://gitee.com/topfullstack/install/raw/cn/install)&quot;</span></span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>MongoDB - 文档型数据库</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew tap mongodb/brew</span><br><span class="line">brew install mongodb-community</span><br><span class="line">brew services start mongodb-community</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>全局安装nest cli, vue cli ，nodemon 和 serve</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="variable language_">global</span> add @nestjs/cli @vue/cli nodemon serve</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>生成ssh key并加入git账户</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">cat ~/.ssh/id_rsa.pub | clipcopy</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>nvm</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="attr">https</span>:<span class="comment">//gitee.com/mirrors/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout &#x27;git describe --abbrev=0 --tags&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>配置环境变量</strong></p><p>终端运行<mark class="hl-label ~/.base_profile">vim</mark> 或者找到个人盘符，利用<mark class="hl-label blue">command+shift+句号</mark> 找到bash_profile文件，添加以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#nvm</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  </span><br></pre></td></tr></table></figure><p><strong>执行shell脚本</strong></p><p>安装后发现每次切换node版本，需要通过命令<mark class="hl-label ~/.bash_profile">source</mark> 才能启动nvm</p><p>解决办法：终端运行<mark class="hl-label ~/.zshrc">vim</mark> 添加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -f ~/.bash_profile ]; then</span><br><span class="line">source ~/.bash_profile</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>nvm基本命令：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm ls <span class="comment">// 查看Node版本列表</span></span><br><span class="line">nvm use xx.<span class="property">xx</span>.<span class="property">xx</span> <span class="comment">// 切换Node版本</span></span><br><span class="line">nvm install xx.<span class="property">xx</span>.<span class="property">xx</span> <span class="comment">// 安装Node版本</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sass常用语法</title>
      <link href="/2021/04/10/Sass/"/>
      <url>/2021/04/10/Sass/</url>
      
        <content type="html"><![CDATA[<h1 id="sass常用语法"><a href="#sass常用语法" class="headerlink" title="sass常用语法"></a>sass常用语法</h1><p>区分下<code>sass</code>和<code>scss</code></p><p>sass：语法跟Ruby的语法比较接近，看起来有点怪怪的</p><p>scss：是日常使用比较多的语法格式</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>通过<code>$</code>符号来定义变量，引用的时候通过$变量名使用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>:<span class="number">#FF6700</span></span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="variable">$primary-color</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>父级与子级嵌套书写方式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套时候可以用<code>&amp;</code>来调用父级选择器</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">      &amp;<span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h3><p>相同属性名，可以用{}来包裹，只书写不一样的变量名字</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>:Helvetica,Arial,sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 简写后</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font</span>&#123;</span><br><span class="line">family:Helvetica,Arial,sans-serif;</span><br><span class="line">    size:<span class="number">16px</span>;</span><br><span class="line">    weight:normal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mixin混合"><a href="#mixin混合" class="headerlink" title="mixin混合"></a>mixin混合</h2><p>类似于定义一个函数，可以在任意地方取调用它</p><p>语法规则：@mixin定义    @include调用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> 名字($参数<span class="number">1</span>，$参数<span class="number">2</span>......)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 例如</span></span><br><span class="line"><span class="keyword">@mixin</span> alert&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ff6700</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#10325E</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// =&gt; 在某处调用</span></span><br><span class="line"><span class="selector-class">.alert-warning</span>&#123;</span><br><span class="line">   <span class="keyword">@include</span> alert</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extend继承"><a href="#extend继承" class="headerlink" title="@extend继承"></a>@extend继承</h2><p>可以让一个选择器去继承另外一个选择器样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.alert</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-info</span>&#123;</span><br><span class="line">  <span class="keyword">@extend</span> .alert;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#10325E</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 输出之后</span></span><br><span class="line"><span class="selector-class">.alert</span> <span class="selector-class">.alert-info</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-info</span>&#123;</span><br><span class="line"> <span class="attribute">background-color</span>:<span class="number">#10325E</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if"><a href="#if" class="headerlink" title="@if"></a>@if</h2><p>判断是否使用该样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@if</span> 条件&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 弹性布局盒子封装</span></span><br><span class="line"><span class="keyword">@mixin</span> flexBox(<span class="variable">$justify</span>: center, <span class="variable">$align</span>: center, <span class="variable">$direction</span>: row, <span class="variable">$flex-wrap</span>: nowrap) &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">display</span>: -webkit-flex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@if</span> (<span class="variable">$justify</span> !=null) &#123;</span><br><span class="line"><span class="attribute">justify-content</span>: <span class="variable">$justify</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@if</span> (<span class="variable">$align</span> !=null) &#123;</span><br><span class="line"><span class="attribute">align-items</span>: <span class="variable">$align</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@if</span> (<span class="variable">$direction</span> !=null) &#123;</span><br><span class="line"><span class="attribute">flex-direction</span>: <span class="variable">$direction</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@if</span> (<span class="variable">$flex-wrap</span> !=null) &#123;</span><br><span class="line"><span class="attribute">flex-wrap</span>: <span class="variable">$flex-wrap</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">@include</span> flexBox(space-around, center, column);</span><br></pre></td></tr></table></figure><h2 id="function用户自定义函数"><a href="#function用户自定义函数" class="headerlink" title="function用户自定义函数"></a>function用户自定义函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> 名称（参数<span class="number">1</span>，参数<span class="number">2</span>）&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算单位函数</span></span><br><span class="line"><span class="keyword">@function</span> computed(<span class="variable">$number</span>) &#123;</span><br><span class="line"><span class="keyword">@return</span> (<span class="variable">$number</span>/<span class="number">750</span>)*<span class="number">100vw</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@function</span> computedH(<span class="variable">$height</span>) &#123;</span><br><span class="line"><span class="keyword">@return</span> (<span class="variable">$height</span>/<span class="number">1334</span>)*<span class="number">100vh</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">.nav&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="built_in">computed</span>(<span class="number">322</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用封装工具类方法</title>
      <link href="/2021/04/10/%E5%B8%B8%E7%94%A8%E5%B0%81%E8%A3%85%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
      <url>/2021/04/10/%E5%B8%B8%E7%94%A8%E5%B0%81%E8%A3%85%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="获取-url-中参数"><a href="#获取-url-中参数" class="headerlink" title="获取 url 中参数"></a>获取 url 中参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getWindonHref</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sHref = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">  <span class="keyword">var</span> args = sHref.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (args[<span class="number">0</span>] === sHref) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> hrefarr = args[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;#&quot;</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hrefarr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    hrefarr[i] = hrefarr[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    obj[hrefarr[i][<span class="number">0</span>]] = hrefarr[i][<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; &#123;id:12, chilid: 34&#125;</span></span><br></pre></td></tr></table></figure><h2 id="获取滚动条距离"><a href="#获取滚动条距离" class="headerlink" title="获取滚动条距离"></a>获取滚动条距离</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getScrollOffset</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageXOffset</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="variable language_">window</span>.<span class="property">pageXOffset</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="variable language_">window</span>.<span class="property">pageYOffset</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span> + <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> + <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; &#123;x: 0, y: 1389&#125;</span></span><br></pre></td></tr></table></figure><h2 id="设备判断：android、ios、web"><a href="#设备判断：android、ios、web" class="headerlink" title="设备判断：android、ios、web"></a>设备判断：android、ios、web</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDevice = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 判断是android还是ios还是web</span></span><br><span class="line">  <span class="keyword">var</span> ua = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">if</span> (ua.<span class="title function_">match</span>(<span class="regexp">/iPhone\sOS/i</span>) === <span class="string">&quot;iphone os&quot;</span> || ua.<span class="title function_">match</span>(<span class="regexp">/iPad/i</span>) === <span class="string">&quot;ipad&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// ios</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;iOS&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ua.<span class="title function_">match</span>(<span class="regexp">/Android/i</span>) === <span class="string">&quot;android&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Android&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Web&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// =&gt; &#x27;web&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="判断是否为微信浏览器"><a href="#判断是否为微信浏览器" class="headerlink" title="判断是否为微信浏览器"></a>判断是否为微信浏览器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isWx = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 判断是否为微信</span></span><br><span class="line">  <span class="keyword">var</span> ua = <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">if</span> (ua.<span class="title function_">match</span>(<span class="regexp">/MicroMessenger/i</span>) === <span class="string">&quot;micromessenger&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// =&gt; Boolean</span></span><br></pre></td></tr></table></figure><h2 id="判断是否为-pc-端"><a href="#判断是否为-pc-端" class="headerlink" title="判断是否为 pc 端"></a>判断是否为 pc 端</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPC = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 是否为PC端</span></span><br><span class="line">  <span class="keyword">let</span> userAgentInfo = navigator.<span class="property">userAgent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">Agents</span> = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>, <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>, <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; <span class="title class_">Agents</span>.<span class="property">length</span>; v++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (userAgentInfo.<span class="title function_">indexOf</span>(<span class="title class_">Agents</span>[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// =&gt; Boolean</span></span><br></pre></td></tr></table></figure><h2 id="图片地址转-Base64"><a href="#图片地址转-Base64" class="headerlink" title="图片地址转 Base64"></a>图片地址转 Base64</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getBase64 = <span class="keyword">function</span> (<span class="params">img</span>) &#123;</span><br><span class="line">  <span class="comment">//传入图片路径，返回base64，使用getBase64(url).then(function(base64)&#123;&#125;,function(err)&#123;&#125;);</span></span><br><span class="line">  <span class="keyword">let</span> getBase64Image = <span class="keyword">function</span> (<span class="params">img, width, height</span>) &#123;</span><br><span class="line">    <span class="comment">//width、height调用时传入具体像素值，控制大小,不传则默认图像大小</span></span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    canvas.<span class="property">width</span> = width ? width : img.<span class="property">width</span>;</span><br><span class="line">    canvas.<span class="property">height</span> = height ? height : img.<span class="property">height</span>;</span><br><span class="line">    <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">    <span class="keyword">let</span> dataURL = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line">    <span class="keyword">return</span> dataURL;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">  image.<span class="property">crossOrigin</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  image.<span class="property">src</span> = img;</span><br><span class="line">  <span class="keyword">let</span> deferred = $.<span class="title class_">Deferred</span>();</span><br><span class="line">  <span class="keyword">if</span> (img) &#123;</span><br><span class="line">    image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      deferred.<span class="title function_">resolve</span>(<span class="title function_">getBase64Image</span>(image));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> deferred.<span class="title function_">promise</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="base64-图片下载功能"><a href="#base64-图片下载功能" class="headerlink" title="base64 图片下载功能"></a>base64 图片下载功能</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> downloadFile = <span class="keyword">function</span> (<span class="params">base64, fileName</span>) &#123;</span><br><span class="line">  <span class="comment">//base64图片下载功能</span></span><br><span class="line">  <span class="keyword">let</span> base64ToBlob = <span class="keyword">function</span> (<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> parts = code.<span class="title function_">split</span>(<span class="string">&quot;;base64,&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> contentType = parts[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> raw = <span class="variable language_">window</span>.<span class="title function_">atob</span>(parts[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">let</span> rawLength = raw.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> uInt8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(rawLength);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rawLength; ++i) &#123;</span><br><span class="line">      uInt8Array[i] = raw.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blob</span>([uInt8Array], &#123;</span><br><span class="line">      <span class="attr">type</span>: contentType,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> aLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> blob = <span class="title function_">base64ToBlob</span>(base64); <span class="comment">//new Blob([content]);</span></span><br><span class="line">  <span class="keyword">let</span> evt = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&quot;HTMLEvents&quot;</span>);</span><br><span class="line">  evt.<span class="title function_">initEvent</span>(<span class="string">&quot;click&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>); <span class="comment">//initEvent不加后两个参数在FF下会报错  事件类型，是否冒泡，是否阻止浏览器的默认行为</span></span><br><span class="line">  aLink.<span class="property">download</span> = fileName;</span><br><span class="line">  aLink.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">  aLink.<span class="title function_">click</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对象转url参数格式"><a href="#对象转url参数格式" class="headerlink" title="对象转url参数格式"></a>对象转url参数格式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stringfyQueryString = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">//对象序列化【对象转url参数】</span></span><br><span class="line">  <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> pairs = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = obj[key];</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; value.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        pairs.<span class="title function_">push</span>(<span class="built_in">encodeURIComponent</span>(key + <span class="string">&quot;[&quot;</span> + i + <span class="string">&quot;]&quot;</span>) + <span class="string">&quot;=&quot;</span> + <span class="built_in">encodeURIComponent</span>(value[i]));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pairs.<span class="title function_">push</span>(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">&quot;=&quot;</span> + <span class="built_in">encodeURIComponent</span>(obj[key]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pairs.<span class="title function_">join</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// =&gt; stringfyQueryString(&#123;id:123,name:&#x27;zwd&#x27;&#125;)</span></span><br><span class="line"><span class="comment">// =&gt; id=123&amp;name=zwd</span></span><br></pre></td></tr></table></figure><h2 id="格式化金额"><a href="#格式化金额" class="headerlink" title="格式化金额"></a>格式化金额</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> digitsRE = <span class="regexp">/(\d&#123;3&#125;)(?=\d)/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatMoney</span>(<span class="params">value, currency = <span class="string">&#x27;元&#x27;</span>, decimals = <span class="number">2</span></span>) =&gt; &#123;</span><br><span class="line">  value = <span class="built_in">parseFloat</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (!value &amp;&amp; value !== <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> stringified = <span class="title class_">Math</span>.<span class="title function_">abs</span>(value).<span class="title function_">toFixed</span>(decimals);</span><br><span class="line">  <span class="keyword">const</span> $int = decimals ? stringified.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span> - decimals) : stringified;</span><br><span class="line">  <span class="keyword">const</span> i = $int.<span class="property">length</span> % <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> head = i &gt; <span class="number">0</span> ? ($int.<span class="title function_">slice</span>(<span class="number">0</span>, i) + ($int.<span class="property">length</span> &gt; <span class="number">3</span> ? <span class="string">&#x27;,&#x27;</span> : <span class="string">&#x27;&#x27;</span>)) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> $float = decimals ? stringified.<span class="title function_">slice</span>(-<span class="number">1</span> - decimals) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> sign = value &lt; <span class="number">0</span> ? <span class="string">&#x27;-&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;sign&#125;</span><span class="subst">$&#123;head&#125;</span><span class="subst">$&#123;$int.slice(i).replace(digitsRE, <span class="string">&#x27;$1,&#x27;</span>)&#125;</span><span class="subst">$&#123;$float&#125;</span> <span class="subst">$&#123;currency&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="h5中滚动条触底"><a href="#h5中滚动条触底" class="headerlink" title="h5中滚动条触底"></a>h5中滚动条触底</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, getScroll);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>; <span class="comment">//变量scrollTop是滚动条滚动时，距离顶部的距离</span></span><br><span class="line">  <span class="keyword">let</span> windowHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>; <span class="comment">//变量windowHeight是 可视区的高度</span></span><br><span class="line">  <span class="keyword">let</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>; <span class="comment">//变量scrollHeight是 滚动条的总高度 /可视化的高度与溢出的距离（总高度）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//滚动条到底部的条件</span></span><br><span class="line">  <span class="keyword">if</span> (scrollTop + windowHeight &gt; scrollHeight) &#123;</span><br><span class="line">    <span class="comment">//触发事件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动到底部&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, getScroll);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
